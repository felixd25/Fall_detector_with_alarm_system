
MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cd0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08007e70  08007e70  00008e70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008300  08008300  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008300  08008300  00009300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008308  08008308  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008308  08008308  00009308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800830c  0800830c  0000930c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008310  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  200001d4  080084e4  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  080084e4  0000a418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce2e  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ee  00000000  00000000  00017032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  00019220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ef  00000000  00000000  00019da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176f8  00000000  00000000  0001a697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8c9  00000000  00000000  00031d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a413  00000000  00000000  00041658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cba6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004150  00000000  00000000  000cbab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000cfc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007e58 	.word	0x08007e58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08007e58 	.word	0x08007e58

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <OLED_W_SCL>:
  * 说    明：当上层函数需要写SCL时，此函数会被调用
  *           用户需要根据参数传入的值，将SCL置为高电平或者低电平
  *           当参数传入0时，置SCL为低电平，当参数传入1时，置SCL为高电平
  */
void OLED_W_SCL(uint8_t BitValue)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
	/*根据BitValue的值，将SCL置高电平或者低电平*/
//	GPIO_WriteBit(GPIOB, GPIO_Pin_8, (BitAction)BitValue);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, (GPIO_PinState)BitValue);
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	461a      	mov	r2, r3
 8000f56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f5a:	4803      	ldr	r0, [pc, #12]	@ (8000f68 <OLED_W_SCL+0x20>)
 8000f5c:	f001 fc8c 	bl	8002878 <HAL_GPIO_WritePin>
	/*如果单片机速度过快，可在此添加适量延时，以避免超出I2C通信的最大速度*/
	//...
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40020400 	.word	0x40020400

08000f6c <OLED_W_SDA>:
  * 说    明：当上层函数需要写SDA时，此函数会被调用
  *           用户需要根据参数传入的值，将SDA置为高电平或者低电平
  *           当参数传入0时，置SDA为低电平，当参数传入1时，置SDA为高电平
  */
void OLED_W_SDA(uint8_t BitValue)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
	/*根据BitValue的值，将SDA置高电平或者低电平*/
//	GPIO_WriteBit(GPIOB, GPIO_Pin_9, (BitAction)BitValue);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, (GPIO_PinState)BitValue);
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f7e:	4803      	ldr	r0, [pc, #12]	@ (8000f8c <OLED_W_SDA+0x20>)
 8000f80:	f001 fc7a 	bl	8002878 <HAL_GPIO_WritePin>
	/*如果单片机速度过快，可在此添加适量延时，以避免超出I2C通信的最大速度*/
	//...
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40020400 	.word	0x40020400

08000f90 <OLED_GPIO_Init>:
  * 返 回 值：无
  * 说    明：当上层函数需要初始化时，此函数会被调用
  *           用户需要将SCL和SDA引脚初始化为开漏模式，并释放引脚
  */
void OLED_GPIO_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
	uint32_t i, j;
	
	/*在初始化前，加入适量延时，待OLED供电稳定*/
	for (i = 0; i < 1000; i ++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
 8000f9a:	e00c      	b.n	8000fb6 <OLED_GPIO_Init+0x26>
	{
		for (j = 0; j < 1000; j ++);
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61bb      	str	r3, [r7, #24]
 8000fa0:	e002      	b.n	8000fa8 <OLED_GPIO_Init+0x18>
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	61bb      	str	r3, [r7, #24]
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000fae:	d3f8      	bcc.n	8000fa2 <OLED_GPIO_Init+0x12>
	for (i = 0; i < 1000; i ++)
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	61fb      	str	r3, [r7, #28]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000fbc:	d3ee      	bcc.n	8000f9c <OLED_GPIO_Init+0xc>
	}
	
	/*将SCL和SDA引脚初始化为开漏模式*/
//    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	603b      	str	r3, [r7, #0]
 8000fc2:	4b15      	ldr	r3, [pc, #84]	@ (8001018 <OLED_GPIO_Init+0x88>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	4a14      	ldr	r2, [pc, #80]	@ (8001018 <OLED_GPIO_Init+0x88>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fce:	4b12      	ldr	r3, [pc, #72]	@ (8001018 <OLED_GPIO_Init+0x88>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	603b      	str	r3, [r7, #0]
 8000fd8:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStructure;
    //配置SCL引脚（GPIOB的Pin 8）为开漏输出，速度为50MHz
 	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 8000fda:	2311      	movs	r3, #17
 8000fdc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pin = GPIO_PIN_8;
 8000fe2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fe6:	607b      	str	r3, [r7, #4]
 	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	4619      	mov	r1, r3
 8000fec:	480b      	ldr	r0, [pc, #44]	@ (800101c <OLED_GPIO_Init+0x8c>)
 8000fee:	f001 f9c3 	bl	8002378 <HAL_GPIO_Init>

    //配置SDA（GPIOB的Pin 9）为开漏输出模式，速度与SCL相同
	GPIO_InitStructure.Pin = GPIO_PIN_9;
 8000ff2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ff6:	607b      	str	r3, [r7, #4]
 	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4807      	ldr	r0, [pc, #28]	@ (800101c <OLED_GPIO_Init+0x8c>)
 8000ffe:	f001 f9bb 	bl	8002378 <HAL_GPIO_Init>
	
	/*释放SCL和SDA*/
	OLED_W_SCL(1);
 8001002:	2001      	movs	r0, #1
 8001004:	f7ff ffa0 	bl	8000f48 <OLED_W_SCL>
	OLED_W_SDA(1);
 8001008:	2001      	movs	r0, #1
 800100a:	f7ff ffaf 	bl	8000f6c <OLED_W_SDA>
}
 800100e:	bf00      	nop
 8001010:	3720      	adds	r7, #32
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800
 800101c:	40020400 	.word	0x40020400

08001020 <OLED_I2C_Start>:
  * 函    数：I2C起始
  * 参    数：无
  * 返 回 值：无
  */
void OLED_I2C_Start(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	OLED_W_SDA(1);		//释放SDA，确保SDA为高电平
 8001024:	2001      	movs	r0, #1
 8001026:	f7ff ffa1 	bl	8000f6c <OLED_W_SDA>
	OLED_W_SCL(1);		//释放SCL，确保SCL为高电平
 800102a:	2001      	movs	r0, #1
 800102c:	f7ff ff8c 	bl	8000f48 <OLED_W_SCL>
	OLED_W_SDA(0);		//在SCL高电平期间，拉低SDA，产生起始信号
 8001030:	2000      	movs	r0, #0
 8001032:	f7ff ff9b 	bl	8000f6c <OLED_W_SDA>
	OLED_W_SCL(0);		//起始后把SCL也拉低，即为了占用总线，也为了方便总线时序的拼接
 8001036:	2000      	movs	r0, #0
 8001038:	f7ff ff86 	bl	8000f48 <OLED_W_SCL>
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}

08001040 <OLED_I2C_Stop>:
  * 函    数：I2C终止
  * 参    数：无
  * 返 回 值：无
  */
void OLED_I2C_Stop(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	OLED_W_SDA(0);		//拉低SDA，确保SDA为低电平
 8001044:	2000      	movs	r0, #0
 8001046:	f7ff ff91 	bl	8000f6c <OLED_W_SDA>
	OLED_W_SCL(1);		//释放SCL，使SCL呈现高电平
 800104a:	2001      	movs	r0, #1
 800104c:	f7ff ff7c 	bl	8000f48 <OLED_W_SCL>
	OLED_W_SDA(1);		//在SCL高电平期间，释放SDA，产生终止信号
 8001050:	2001      	movs	r0, #1
 8001052:	f7ff ff8b 	bl	8000f6c <OLED_W_SDA>
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}

0800105a <OLED_I2C_SendByte>:
  * 函    数：I2C发送一个字节
  * 参    数：Byte 要发送的一个字节数据，范围：0x00~0xFF
  * 返 回 值：无
  */
void OLED_I2C_SendByte(uint8_t Byte)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b084      	sub	sp, #16
 800105e:	af00      	add	r7, sp, #0
 8001060:	4603      	mov	r3, r0
 8001062:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	
	/*循环8次，主机依次发送数据的每一位*/
	for (i = 0; i < 8; i++)
 8001064:	2300      	movs	r3, #0
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e016      	b.n	8001098 <OLED_I2C_SendByte+0x3e>
	{
		/*使用掩码的方式取出Byte的指定一位数据并写入到SDA线*/
		/*两个!的作用是，让所有非零的值变为1*/
		OLED_W_SDA(!!(Byte & (0x80 >> i)));
 800106a:	79fa      	ldrb	r2, [r7, #7]
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	2180      	movs	r1, #128	@ 0x80
 8001070:	fa41 f303 	asr.w	r3, r1, r3
 8001074:	4013      	ands	r3, r2
 8001076:	2b00      	cmp	r3, #0
 8001078:	bf14      	ite	ne
 800107a:	2301      	movne	r3, #1
 800107c:	2300      	moveq	r3, #0
 800107e:	b2db      	uxtb	r3, r3
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff73 	bl	8000f6c <OLED_W_SDA>
		OLED_W_SCL(1);	//释放SCL，从机在SCL高电平期间读取SDA
 8001086:	2001      	movs	r0, #1
 8001088:	f7ff ff5e 	bl	8000f48 <OLED_W_SCL>
		OLED_W_SCL(0);	//拉低SCL，主机开始发送下一位数据
 800108c:	2000      	movs	r0, #0
 800108e:	f7ff ff5b 	bl	8000f48 <OLED_W_SCL>
	for (i = 0; i < 8; i++)
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	3301      	adds	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	2b07      	cmp	r3, #7
 800109c:	d9e5      	bls.n	800106a <OLED_I2C_SendByte+0x10>
	}
	
	OLED_W_SCL(1);		//额外的一个时钟，不处理应答信号
 800109e:	2001      	movs	r0, #1
 80010a0:	f7ff ff52 	bl	8000f48 <OLED_W_SCL>
	OLED_W_SCL(0);
 80010a4:	2000      	movs	r0, #0
 80010a6:	f7ff ff4f 	bl	8000f48 <OLED_W_SCL>
}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <OLED_WriteCommand>:
  * 函    数：OLED写命令
  * 参    数：Command 要写入的命令值，范围：0x00~0xFF
  * 返 回 值：无
  */
void OLED_WriteCommand(uint8_t Command)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	71fb      	strb	r3, [r7, #7]
	OLED_I2C_Start();				//I2C起始
 80010bc:	f7ff ffb0 	bl	8001020 <OLED_I2C_Start>
	OLED_I2C_SendByte(0x78);		//发送OLED的I2C从机地址
 80010c0:	2078      	movs	r0, #120	@ 0x78
 80010c2:	f7ff ffca 	bl	800105a <OLED_I2C_SendByte>
	OLED_I2C_SendByte(0x00);		//控制字节，给0x00，表示即将写命令
 80010c6:	2000      	movs	r0, #0
 80010c8:	f7ff ffc7 	bl	800105a <OLED_I2C_SendByte>
	OLED_I2C_SendByte(Command);		//写入指定的命令
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ffc3 	bl	800105a <OLED_I2C_SendByte>
	OLED_I2C_Stop();				//I2C终止
 80010d4:	f7ff ffb4 	bl	8001040 <OLED_I2C_Stop>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <OLED_Init>:
  * 参    数：无
  * 返 回 值：无
  * 说    明：使用前，需要调用此初始化函数
  */
void OLED_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	OLED_GPIO_Init();			//先调用底层的端口初始化
 80010e4:	f7ff ff54 	bl	8000f90 <OLED_GPIO_Init>
	
	/*写入一系列的命令，对OLED进行初始化配置*/
	OLED_WriteCommand(0xAE);	//设置显示开启/关闭，0xAE关闭，0xAF开启
 80010e8:	20ae      	movs	r0, #174	@ 0xae
 80010ea:	f7ff ffe2 	bl	80010b2 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xD5);	//设置显示时钟分频比/振荡器频率
 80010ee:	20d5      	movs	r0, #213	@ 0xd5
 80010f0:	f7ff ffdf 	bl	80010b2 <OLED_WriteCommand>
	OLED_WriteCommand(0x80);	//0x00~0xFF
 80010f4:	2080      	movs	r0, #128	@ 0x80
 80010f6:	f7ff ffdc 	bl	80010b2 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xA8);	//设置多路复用率
 80010fa:	20a8      	movs	r0, #168	@ 0xa8
 80010fc:	f7ff ffd9 	bl	80010b2 <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);	//0x0E~0x3F
 8001100:	203f      	movs	r0, #63	@ 0x3f
 8001102:	f7ff ffd6 	bl	80010b2 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xD3);	//设置显示偏移
 8001106:	20d3      	movs	r0, #211	@ 0xd3
 8001108:	f7ff ffd3 	bl	80010b2 <OLED_WriteCommand>
	OLED_WriteCommand(0x00);	//0x00~0x7F
 800110c:	2000      	movs	r0, #0
 800110e:	f7ff ffd0 	bl	80010b2 <OLED_WriteCommand>
	
	OLED_WriteCommand(0x40);	//设置显示开始行，0x40~0x7F
 8001112:	2040      	movs	r0, #64	@ 0x40
 8001114:	f7ff ffcd 	bl	80010b2 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xA1);	//设置左右方向，0xA1正常，0xA0左右反置
 8001118:	20a1      	movs	r0, #161	@ 0xa1
 800111a:	f7ff ffca 	bl	80010b2 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xC8);	//设置上下方向，0xC8正常，0xC0上下反置
 800111e:	20c8      	movs	r0, #200	@ 0xc8
 8001120:	f7ff ffc7 	bl	80010b2 <OLED_WriteCommand>

	OLED_WriteCommand(0xDA);	//设置COM引脚硬件配置
 8001124:	20da      	movs	r0, #218	@ 0xda
 8001126:	f7ff ffc4 	bl	80010b2 <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 800112a:	2012      	movs	r0, #18
 800112c:	f7ff ffc1 	bl	80010b2 <OLED_WriteCommand>
	
	OLED_WriteCommand(0x81);	//设置对比度
 8001130:	2081      	movs	r0, #129	@ 0x81
 8001132:	f7ff ffbe 	bl	80010b2 <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);	//0x00~0xFF
 8001136:	20cf      	movs	r0, #207	@ 0xcf
 8001138:	f7ff ffbb 	bl	80010b2 <OLED_WriteCommand>

	OLED_WriteCommand(0xD9);	//设置预充电周期
 800113c:	20d9      	movs	r0, #217	@ 0xd9
 800113e:	f7ff ffb8 	bl	80010b2 <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 8001142:	20f1      	movs	r0, #241	@ 0xf1
 8001144:	f7ff ffb5 	bl	80010b2 <OLED_WriteCommand>

	OLED_WriteCommand(0xDB);	//设置VCOMH取消选择级别
 8001148:	20db      	movs	r0, #219	@ 0xdb
 800114a:	f7ff ffb2 	bl	80010b2 <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 800114e:	2030      	movs	r0, #48	@ 0x30
 8001150:	f7ff ffaf 	bl	80010b2 <OLED_WriteCommand>

	OLED_WriteCommand(0xA4);	//设置整个显示打开/关闭
 8001154:	20a4      	movs	r0, #164	@ 0xa4
 8001156:	f7ff ffac 	bl	80010b2 <OLED_WriteCommand>

	OLED_WriteCommand(0xA6);	//设置正常/反色显示，0xA6正常，0xA7反色
 800115a:	20a6      	movs	r0, #166	@ 0xa6
 800115c:	f7ff ffa9 	bl	80010b2 <OLED_WriteCommand>

	OLED_WriteCommand(0x8D);	//设置充电泵
 8001160:	208d      	movs	r0, #141	@ 0x8d
 8001162:	f7ff ffa6 	bl	80010b2 <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 8001166:	2014      	movs	r0, #20
 8001168:	f7ff ffa3 	bl	80010b2 <OLED_WriteCommand>

	OLED_WriteCommand(0xAF);	//开启显示
 800116c:	20af      	movs	r0, #175	@ 0xaf
 800116e:	f7ff ffa0 	bl	80010b2 <OLED_WriteCommand>
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <i2c_init>:
static float ax, ay, az, gx, gy, gz, temperature, yaw, pitch, roll;
uint8_t buffer[14] = {0};

// I2C初始化
void i2c_init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	__HAL_RCC_I2C1_FORCE_RESET();
 800117c:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <i2c_init+0x38>)
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	4a0b      	ldr	r2, [pc, #44]	@ (80011b0 <i2c_init+0x38>)
 8001182:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001186:	6213      	str	r3, [r2, #32]
	HAL_Delay(100);
 8001188:	2064      	movs	r0, #100	@ 0x64
 800118a:	f000 ffeb 	bl	8002164 <HAL_Delay>
	__HAL_RCC_I2C1_RELEASE_RESET();
 800118e:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <i2c_init+0x38>)
 8001190:	6a1b      	ldr	r3, [r3, #32]
 8001192:	4a07      	ldr	r2, [pc, #28]	@ (80011b0 <i2c_init+0x38>)
 8001194:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001198:	6213      	str	r3, [r2, #32]

	HAL_I2C_DeInit(&hi2c1);
 800119a:	4806      	ldr	r0, [pc, #24]	@ (80011b4 <i2c_init+0x3c>)
 800119c:	f001 fcca 	bl	8002b34 <HAL_I2C_DeInit>
	HAL_Delay(100);
 80011a0:	2064      	movs	r0, #100	@ 0x64
 80011a2:	f000 ffdf 	bl	8002164 <HAL_Delay>
    HAL_I2C_Init(&hi2c1);
 80011a6:	4803      	ldr	r0, [pc, #12]	@ (80011b4 <i2c_init+0x3c>)
 80011a8:	f001 fb80 	bl	80028ac <HAL_I2C_Init>
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40023800 	.word	0x40023800
 80011b4:	20000228 	.word	0x20000228

080011b8 <MPU6050_Init>:




void MPU6050_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af04      	add	r7, sp, #16

    // 初始化I2C
    i2c_init();
 80011be:	f7ff ffdb 	bl	8001178 <i2c_init>


    // 复位
    HAL_I2C_Mem_Write(&hi2c1, MPU6050, POWER_REG, I2C_MEMADD_SIZE_8BIT, RESET_BIT, 1, HAL_MAX_DELAY);
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011c6:	9302      	str	r3, [sp, #8]
 80011c8:	2301      	movs	r3, #1
 80011ca:	9301      	str	r3, [sp, #4]
 80011cc:	2380      	movs	r3, #128	@ 0x80
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2301      	movs	r3, #1
 80011d2:	226b      	movs	r2, #107	@ 0x6b
 80011d4:	21d0      	movs	r1, #208	@ 0xd0
 80011d6:	481e      	ldr	r0, [pc, #120]	@ (8001250 <MPU6050_Init+0x98>)
 80011d8:	f001 fcdc 	bl	8002b94 <HAL_I2C_Mem_Write>
//    HAL_I2C_Master_Transmit(&hi2c1, MPU6050, buf, 2, HAL_MAX_DELAY);    //复位MPU6050，清空寄存器

    HAL_Delay(100);
 80011dc:	2064      	movs	r0, #100	@ 0x64
 80011de:	f000 ffc1 	bl	8002164 <HAL_Delay>

    // 唤醒
    HAL_I2C_Mem_Write(&hi2c1, MPU6050, POWER_REG, I2C_MEMADD_SIZE_8BIT, WEAK_BIT, 1, HAL_MAX_DELAY);
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011e6:	9302      	str	r3, [sp, #8]
 80011e8:	2301      	movs	r3, #1
 80011ea:	9301      	str	r3, [sp, #4]
 80011ec:	2300      	movs	r3, #0
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	2301      	movs	r3, #1
 80011f2:	226b      	movs	r2, #107	@ 0x6b
 80011f4:	21d0      	movs	r1, #208	@ 0xd0
 80011f6:	4816      	ldr	r0, [pc, #88]	@ (8001250 <MPU6050_Init+0x98>)
 80011f8:	f001 fccc 	bl	8002b94 <HAL_I2C_Mem_Write>
//    HAL_I2C_Master_Transmit(&hi2c1, MPU6050, buf, 2, HAL_MAX_DELAY);    //唤醒MPU6050，退出休眠模式


    // 设置采样率为200Hz
    HAL_I2C_Mem_Write(&hi2c1, MPU6050, SAMPLE_RATE_DIVIDER_REG, I2C_MEMADD_SIZE_8BIT, HZ200, 1, HAL_MAX_DELAY);
 80011fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001200:	9302      	str	r3, [sp, #8]
 8001202:	2301      	movs	r3, #1
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	2304      	movs	r3, #4
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2301      	movs	r3, #1
 800120c:	2219      	movs	r2, #25
 800120e:	21d0      	movs	r1, #208	@ 0xd0
 8001210:	480f      	ldr	r0, [pc, #60]	@ (8001250 <MPU6050_Init+0x98>)
 8001212:	f001 fcbf 	bl	8002b94 <HAL_I2C_Mem_Write>
//    HAL_I2C_Master_Transmit(&hi2c1, MPU6050, buf, 2, HAL_MAX_DELAY);

    // 设置加速度计量程为+-2G
    HAL_I2C_Mem_Write(&hi2c1, MPU6050, ACCEL_CONFIG_REG, I2C_MEMADD_SIZE_8BIT, ACCEL_FS_SEL_2G, 1, HAL_MAX_DELAY);
 8001216:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800121a:	9302      	str	r3, [sp, #8]
 800121c:	2301      	movs	r3, #1
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	2300      	movs	r3, #0
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	2301      	movs	r3, #1
 8001226:	221c      	movs	r2, #28
 8001228:	21d0      	movs	r1, #208	@ 0xd0
 800122a:	4809      	ldr	r0, [pc, #36]	@ (8001250 <MPU6050_Init+0x98>)
 800122c:	f001 fcb2 	bl	8002b94 <HAL_I2C_Mem_Write>
//    HAL_I2C_Master_Transmit(&hi2c1, MPU6050, buf, 2, HAL_MAX_DELAY);

    // 设置陀螺仪满量程为+-2000dps
    HAL_I2C_Mem_Write(&hi2c1, MPU6050, GYRO_CONFIG_REG, I2C_MEMADD_SIZE_8BIT, GYRO_FS_SEL_2000DPS, 1, HAL_MAX_DELAY);
 8001230:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001234:	9302      	str	r3, [sp, #8]
 8001236:	2301      	movs	r3, #1
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	2318      	movs	r3, #24
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	2301      	movs	r3, #1
 8001240:	221b      	movs	r2, #27
 8001242:	21d0      	movs	r1, #208	@ 0xd0
 8001244:	4802      	ldr	r0, [pc, #8]	@ (8001250 <MPU6050_Init+0x98>)
 8001246:	f001 fca5 	bl	8002b94 <HAL_I2C_Mem_Write>
//    HAL_I2C_Master_Transmit(&hi2c1, MPU6050, buf, 2, HAL_MAX_DELAY);


}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000228 	.word	0x20000228
 8001254:	00000000 	.word	0x00000000

08001258 <MPU6050_Proc>:

//要求每隔5ms执行一次下面的函数
void MPU6050_Proc(void)
{
 8001258:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800125c:	b08a      	sub	sp, #40	@ 0x28
 800125e:	af04      	add	r7, sp, #16
    HAL_Delay(5);
 8001260:	2005      	movs	r0, #5
 8001262:	f000 ff7f 	bl	8002164 <HAL_Delay>
    // 从MPU6050读取数据

    HAL_I2C_Mem_Read(&hi2c1, MPU6050, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, buffer, 14, HAL_MAX_DELAY);
 8001266:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800126a:	9302      	str	r3, [sp, #8]
 800126c:	230e      	movs	r3, #14
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	4bc3      	ldr	r3, [pc, #780]	@ (8001580 <MPU6050_Proc+0x328>)
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2301      	movs	r3, #1
 8001276:	223b      	movs	r2, #59	@ 0x3b
 8001278:	21d0      	movs	r1, #208	@ 0xd0
 800127a:	48c2      	ldr	r0, [pc, #776]	@ (8001584 <MPU6050_Proc+0x32c>)
 800127c:	f001 fd84 	bl	8002d88 <HAL_I2C_Mem_Read>

//    HAL_I2C_Master_Transmit(&hi2c1, MPU6050, (uint8_t *)ACCEL_XOUT_H_REG, 1, HAL_MAX_DELAY);
//    HAL_I2C_Master_Receive(&hi2c1, MPU6050, buffer, 14, HAL_MAX_DELAY);

    // 解析数据
    ax = (int16_t)(buffer[0] << 8 | buffer[1]) / 16384.0f;
 8001280:	4bbf      	ldr	r3, [pc, #764]	@ (8001580 <MPU6050_Proc+0x328>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	b21a      	sxth	r2, r3
 8001288:	4bbd      	ldr	r3, [pc, #756]	@ (8001580 <MPU6050_Proc+0x328>)
 800128a:	785b      	ldrb	r3, [r3, #1]
 800128c:	b21b      	sxth	r3, r3
 800128e:	4313      	orrs	r3, r2
 8001290:	b21b      	sxth	r3, r3
 8001292:	ee07 3a90 	vmov	s15, r3
 8001296:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800129a:	eddf 6abb 	vldr	s13, [pc, #748]	@ 8001588 <MPU6050_Proc+0x330>
 800129e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012a2:	4bba      	ldr	r3, [pc, #744]	@ (800158c <MPU6050_Proc+0x334>)
 80012a4:	edc3 7a00 	vstr	s15, [r3]
    ay = (int16_t)(buffer[2] << 8 | buffer[3]) / 16384.0f;
 80012a8:	4bb5      	ldr	r3, [pc, #724]	@ (8001580 <MPU6050_Proc+0x328>)
 80012aa:	789b      	ldrb	r3, [r3, #2]
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	4bb3      	ldr	r3, [pc, #716]	@ (8001580 <MPU6050_Proc+0x328>)
 80012b2:	78db      	ldrb	r3, [r3, #3]
 80012b4:	b21b      	sxth	r3, r3
 80012b6:	4313      	orrs	r3, r2
 80012b8:	b21b      	sxth	r3, r3
 80012ba:	ee07 3a90 	vmov	s15, r3
 80012be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c2:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8001588 <MPU6050_Proc+0x330>
 80012c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ca:	4bb1      	ldr	r3, [pc, #708]	@ (8001590 <MPU6050_Proc+0x338>)
 80012cc:	edc3 7a00 	vstr	s15, [r3]
    az = (int16_t)(buffer[4] << 8 | buffer[5]) / 16384.0f;
 80012d0:	4bab      	ldr	r3, [pc, #684]	@ (8001580 <MPU6050_Proc+0x328>)
 80012d2:	791b      	ldrb	r3, [r3, #4]
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	b21a      	sxth	r2, r3
 80012d8:	4ba9      	ldr	r3, [pc, #676]	@ (8001580 <MPU6050_Proc+0x328>)
 80012da:	795b      	ldrb	r3, [r3, #5]
 80012dc:	b21b      	sxth	r3, r3
 80012de:	4313      	orrs	r3, r2
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	ee07 3a90 	vmov	s15, r3
 80012e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ea:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 8001588 <MPU6050_Proc+0x330>
 80012ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012f2:	4ba8      	ldr	r3, [pc, #672]	@ (8001594 <MPU6050_Proc+0x33c>)
 80012f4:	edc3 7a00 	vstr	s15, [r3]
    temperature = (int16_t)(buffer[6] << 8 | buffer[7]) / 340.0f + 36.53f;
 80012f8:	4ba1      	ldr	r3, [pc, #644]	@ (8001580 <MPU6050_Proc+0x328>)
 80012fa:	799b      	ldrb	r3, [r3, #6]
 80012fc:	021b      	lsls	r3, r3, #8
 80012fe:	b21a      	sxth	r2, r3
 8001300:	4b9f      	ldr	r3, [pc, #636]	@ (8001580 <MPU6050_Proc+0x328>)
 8001302:	79db      	ldrb	r3, [r3, #7]
 8001304:	b21b      	sxth	r3, r3
 8001306:	4313      	orrs	r3, r2
 8001308:	b21b      	sxth	r3, r3
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001312:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8001598 <MPU6050_Proc+0x340>
 8001316:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800131a:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 800159c <MPU6050_Proc+0x344>
 800131e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001322:	4b9f      	ldr	r3, [pc, #636]	@ (80015a0 <MPU6050_Proc+0x348>)
 8001324:	edc3 7a00 	vstr	s15, [r3]
    gx = (int16_t)(buffer[8] << 8 | buffer[9]) / 16.4f;
 8001328:	4b95      	ldr	r3, [pc, #596]	@ (8001580 <MPU6050_Proc+0x328>)
 800132a:	7a1b      	ldrb	r3, [r3, #8]
 800132c:	021b      	lsls	r3, r3, #8
 800132e:	b21a      	sxth	r2, r3
 8001330:	4b93      	ldr	r3, [pc, #588]	@ (8001580 <MPU6050_Proc+0x328>)
 8001332:	7a5b      	ldrb	r3, [r3, #9]
 8001334:	b21b      	sxth	r3, r3
 8001336:	4313      	orrs	r3, r2
 8001338:	b21b      	sxth	r3, r3
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001342:	eddf 6a98 	vldr	s13, [pc, #608]	@ 80015a4 <MPU6050_Proc+0x34c>
 8001346:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800134a:	4b97      	ldr	r3, [pc, #604]	@ (80015a8 <MPU6050_Proc+0x350>)
 800134c:	edc3 7a00 	vstr	s15, [r3]
    gy = (int16_t)(buffer[10] << 8 | buffer[11]) / 16.4f;
 8001350:	4b8b      	ldr	r3, [pc, #556]	@ (8001580 <MPU6050_Proc+0x328>)
 8001352:	7a9b      	ldrb	r3, [r3, #10]
 8001354:	021b      	lsls	r3, r3, #8
 8001356:	b21a      	sxth	r2, r3
 8001358:	4b89      	ldr	r3, [pc, #548]	@ (8001580 <MPU6050_Proc+0x328>)
 800135a:	7adb      	ldrb	r3, [r3, #11]
 800135c:	b21b      	sxth	r3, r3
 800135e:	4313      	orrs	r3, r2
 8001360:	b21b      	sxth	r3, r3
 8001362:	ee07 3a90 	vmov	s15, r3
 8001366:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800136a:	eddf 6a8e 	vldr	s13, [pc, #568]	@ 80015a4 <MPU6050_Proc+0x34c>
 800136e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001372:	4b8e      	ldr	r3, [pc, #568]	@ (80015ac <MPU6050_Proc+0x354>)
 8001374:	edc3 7a00 	vstr	s15, [r3]
    gz = (int16_t)(buffer[12] << 8 | buffer[13]) / 16.4f;
 8001378:	4b81      	ldr	r3, [pc, #516]	@ (8001580 <MPU6050_Proc+0x328>)
 800137a:	7b1b      	ldrb	r3, [r3, #12]
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	b21a      	sxth	r2, r3
 8001380:	4b7f      	ldr	r3, [pc, #508]	@ (8001580 <MPU6050_Proc+0x328>)
 8001382:	7b5b      	ldrb	r3, [r3, #13]
 8001384:	b21b      	sxth	r3, r3
 8001386:	4313      	orrs	r3, r2
 8001388:	b21b      	sxth	r3, r3
 800138a:	ee07 3a90 	vmov	s15, r3
 800138e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001392:	eddf 6a84 	vldr	s13, [pc, #528]	@ 80015a4 <MPU6050_Proc+0x34c>
 8001396:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800139a:	4b85      	ldr	r3, [pc, #532]	@ (80015b0 <MPU6050_Proc+0x358>)
 800139c:	edc3 7a00 	vstr	s15, [r3]
//    OLED_ShowNum(0, 16, (int32_t)temperature, 5, OLED_8X16);
//    OLED_ShowNum(0, 32, (int32_t)ax, 5, OLED_8X16);
//    OLED_Update();

    //使用加速度计算欧拉角
    float pitch_a = -atan2(ax, az) * 180.0f / PI;
 80013a0:	4b7a      	ldr	r3, [pc, #488]	@ (800158c <MPU6050_Proc+0x334>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff f8d7 	bl	8000558 <__aeabi_f2d>
 80013aa:	4680      	mov	r8, r0
 80013ac:	4689      	mov	r9, r1
 80013ae:	4b79      	ldr	r3, [pc, #484]	@ (8001594 <MPU6050_Proc+0x33c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f8d0 	bl	8000558 <__aeabi_f2d>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	ec43 2b11 	vmov	d1, r2, r3
 80013c0:	ec49 8b10 	vmov	d0, r8, r9
 80013c4:	f006 fade 	bl	8007984 <atan2>
 80013c8:	ec53 2b10 	vmov	r2, r3, d0
 80013cc:	4614      	mov	r4, r2
 80013ce:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	4b77      	ldr	r3, [pc, #476]	@ (80015b4 <MPU6050_Proc+0x35c>)
 80013d8:	4620      	mov	r0, r4
 80013da:	4629      	mov	r1, r5
 80013dc:	f7ff f914 	bl	8000608 <__aeabi_dmul>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	a35d      	add	r3, pc, #372	@ (adr r3, 8001560 <MPU6050_Proc+0x308>)
 80013ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ee:	f7ff fa35 	bl	800085c <__aeabi_ddiv>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	f7ff fbdd 	bl	8000bb8 <__aeabi_d2f>
 80013fe:	4603      	mov	r3, r0
 8001400:	617b      	str	r3, [r7, #20]
    float roll_a = atan2(ay, az) * 180.0f / PI;
 8001402:	4b63      	ldr	r3, [pc, #396]	@ (8001590 <MPU6050_Proc+0x338>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f8a6 	bl	8000558 <__aeabi_f2d>
 800140c:	4604      	mov	r4, r0
 800140e:	460d      	mov	r5, r1
 8001410:	4b60      	ldr	r3, [pc, #384]	@ (8001594 <MPU6050_Proc+0x33c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f89f 	bl	8000558 <__aeabi_f2d>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	ec43 2b11 	vmov	d1, r2, r3
 8001422:	ec45 4b10 	vmov	d0, r4, r5
 8001426:	f006 faad 	bl	8007984 <atan2>
 800142a:	ec51 0b10 	vmov	r0, r1, d0
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	4b60      	ldr	r3, [pc, #384]	@ (80015b4 <MPU6050_Proc+0x35c>)
 8001434:	f7ff f8e8 	bl	8000608 <__aeabi_dmul>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	a347      	add	r3, pc, #284	@ (adr r3, 8001560 <MPU6050_Proc+0x308>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7ff fa09 	bl	800085c <__aeabi_ddiv>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	f7ff fbb1 	bl	8000bb8 <__aeabi_d2f>
 8001456:	4603      	mov	r3, r0
 8001458:	613b      	str	r3, [r7, #16]

    //使用陀螺仪计算欧拉角
    float yaw_g = yaw + gz * DT;
 800145a:	4b57      	ldr	r3, [pc, #348]	@ (80015b8 <MPU6050_Proc+0x360>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f87a 	bl	8000558 <__aeabi_f2d>
 8001464:	4604      	mov	r4, r0
 8001466:	460d      	mov	r5, r1
 8001468:	4b51      	ldr	r3, [pc, #324]	@ (80015b0 <MPU6050_Proc+0x358>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f873 	bl	8000558 <__aeabi_f2d>
 8001472:	a33d      	add	r3, pc, #244	@ (adr r3, 8001568 <MPU6050_Proc+0x310>)
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	f7ff f8c6 	bl	8000608 <__aeabi_dmul>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4620      	mov	r0, r4
 8001482:	4629      	mov	r1, r5
 8001484:	f7fe ff0a 	bl	800029c <__adddf3>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4610      	mov	r0, r2
 800148e:	4619      	mov	r1, r3
 8001490:	f7ff fb92 	bl	8000bb8 <__aeabi_d2f>
 8001494:	4603      	mov	r3, r0
 8001496:	60fb      	str	r3, [r7, #12]
    float pitch_g = pitch + gy * DT;
 8001498:	4b48      	ldr	r3, [pc, #288]	@ (80015bc <MPU6050_Proc+0x364>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f85b 	bl	8000558 <__aeabi_f2d>
 80014a2:	4604      	mov	r4, r0
 80014a4:	460d      	mov	r5, r1
 80014a6:	4b41      	ldr	r3, [pc, #260]	@ (80015ac <MPU6050_Proc+0x354>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff f854 	bl	8000558 <__aeabi_f2d>
 80014b0:	a32d      	add	r3, pc, #180	@ (adr r3, 8001568 <MPU6050_Proc+0x310>)
 80014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b6:	f7ff f8a7 	bl	8000608 <__aeabi_dmul>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4620      	mov	r0, r4
 80014c0:	4629      	mov	r1, r5
 80014c2:	f7fe feeb 	bl	800029c <__adddf3>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fb73 	bl	8000bb8 <__aeabi_d2f>
 80014d2:	4603      	mov	r3, r0
 80014d4:	60bb      	str	r3, [r7, #8]
    float roll_g = roll + gx * DT;
 80014d6:	4b3a      	ldr	r3, [pc, #232]	@ (80015c0 <MPU6050_Proc+0x368>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff f83c 	bl	8000558 <__aeabi_f2d>
 80014e0:	4604      	mov	r4, r0
 80014e2:	460d      	mov	r5, r1
 80014e4:	4b30      	ldr	r3, [pc, #192]	@ (80015a8 <MPU6050_Proc+0x350>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff f835 	bl	8000558 <__aeabi_f2d>
 80014ee:	a31e      	add	r3, pc, #120	@ (adr r3, 8001568 <MPU6050_Proc+0x310>)
 80014f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f4:	f7ff f888 	bl	8000608 <__aeabi_dmul>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4620      	mov	r0, r4
 80014fe:	4629      	mov	r1, r5
 8001500:	f7fe fecc 	bl	800029c <__adddf3>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4610      	mov	r0, r2
 800150a:	4619      	mov	r1, r3
 800150c:	f7ff fb54 	bl	8000bb8 <__aeabi_d2f>
 8001510:	4603      	mov	r3, r0
 8001512:	607b      	str	r3, [r7, #4]

    //互补滤波
    yaw = yaw_g;
 8001514:	4a28      	ldr	r2, [pc, #160]	@ (80015b8 <MPU6050_Proc+0x360>)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6013      	str	r3, [r2, #0]
    pitch = ALPHA * pitch_g + (1 - ALPHA) * pitch_a;
 800151a:	68b8      	ldr	r0, [r7, #8]
 800151c:	f7ff f81c 	bl	8000558 <__aeabi_f2d>
 8001520:	a313      	add	r3, pc, #76	@ (adr r3, 8001570 <MPU6050_Proc+0x318>)
 8001522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001526:	f7ff f86f 	bl	8000608 <__aeabi_dmul>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4614      	mov	r4, r2
 8001530:	461d      	mov	r5, r3
 8001532:	6978      	ldr	r0, [r7, #20]
 8001534:	f7ff f810 	bl	8000558 <__aeabi_f2d>
 8001538:	a30f      	add	r3, pc, #60	@ (adr r3, 8001578 <MPU6050_Proc+0x320>)
 800153a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153e:	f7ff f863 	bl	8000608 <__aeabi_dmul>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4620      	mov	r0, r4
 8001548:	4629      	mov	r1, r5
 800154a:	f7fe fea7 	bl	800029c <__adddf3>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4610      	mov	r0, r2
 8001554:	4619      	mov	r1, r3
 8001556:	f7ff fb2f 	bl	8000bb8 <__aeabi_d2f>
 800155a:	4603      	mov	r3, r0
 800155c:	e032      	b.n	80015c4 <MPU6050_Proc+0x36c>
 800155e:	bf00      	nop
 8001560:	54442d18 	.word	0x54442d18
 8001564:	400921fb 	.word	0x400921fb
 8001568:	47ae147b 	.word	0x47ae147b
 800156c:	3f747ae1 	.word	0x3f747ae1
 8001570:	9f2ba9d2 	.word	0x9f2ba9d2
 8001574:	3fee79e5 	.word	0x3fee79e5
 8001578:	0d4562e0 	.word	0x0d4562e0
 800157c:	3fa861a6 	.word	0x3fa861a6
 8001580:	20000218 	.word	0x20000218
 8001584:	20000228 	.word	0x20000228
 8001588:	46800000 	.word	0x46800000
 800158c:	200001f0 	.word	0x200001f0
 8001590:	200001f4 	.word	0x200001f4
 8001594:	200001f8 	.word	0x200001f8
 8001598:	43aa0000 	.word	0x43aa0000
 800159c:	42121eb8 	.word	0x42121eb8
 80015a0:	20000208 	.word	0x20000208
 80015a4:	41833333 	.word	0x41833333
 80015a8:	200001fc 	.word	0x200001fc
 80015ac:	20000200 	.word	0x20000200
 80015b0:	20000204 	.word	0x20000204
 80015b4:	40668000 	.word	0x40668000
 80015b8:	2000020c 	.word	0x2000020c
 80015bc:	20000210 	.word	0x20000210
 80015c0:	20000214 	.word	0x20000214
 80015c4:	4a18      	ldr	r2, [pc, #96]	@ (8001628 <MPU6050_Proc+0x3d0>)
 80015c6:	6013      	str	r3, [r2, #0]
    roll = ALPHA * roll_g + (1 - ALPHA) * roll_a;
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7fe ffc5 	bl	8000558 <__aeabi_f2d>
 80015ce:	a312      	add	r3, pc, #72	@ (adr r3, 8001618 <MPU6050_Proc+0x3c0>)
 80015d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d4:	f7ff f818 	bl	8000608 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4614      	mov	r4, r2
 80015de:	461d      	mov	r5, r3
 80015e0:	6938      	ldr	r0, [r7, #16]
 80015e2:	f7fe ffb9 	bl	8000558 <__aeabi_f2d>
 80015e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8001620 <MPU6050_Proc+0x3c8>)
 80015e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ec:	f7ff f80c 	bl	8000608 <__aeabi_dmul>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4620      	mov	r0, r4
 80015f6:	4629      	mov	r1, r5
 80015f8:	f7fe fe50 	bl	800029c <__adddf3>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4610      	mov	r0, r2
 8001602:	4619      	mov	r1, r3
 8001604:	f7ff fad8 	bl	8000bb8 <__aeabi_d2f>
 8001608:	4603      	mov	r3, r0
 800160a:	4a08      	ldr	r2, [pc, #32]	@ (800162c <MPU6050_Proc+0x3d4>)
 800160c:	6013      	str	r3, [r2, #0]
}
 800160e:	bf00      	nop
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001618:	9f2ba9d2 	.word	0x9f2ba9d2
 800161c:	3fee79e5 	.word	0x3fee79e5
 8001620:	0d4562e0 	.word	0x0d4562e0
 8001624:	3fa861a6 	.word	0x3fa861a6
 8001628:	20000210 	.word	0x20000210
 800162c:	20000214 	.word	0x20000214

08001630 <MPU6050_GetResult>:

void MPU6050_GetResult(float *pAccel, float *pTemp, float *pGyro, float *pAngle, uint8_t *pBuffer)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
 800163c:	603b      	str	r3, [r7, #0]
    pAccel[0] = ax;
 800163e:	4b1b      	ldr	r3, [pc, #108]	@ (80016ac <MPU6050_GetResult+0x7c>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	601a      	str	r2, [r3, #0]
    pAccel[1] = ay;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	3304      	adds	r3, #4
 800164a:	4a19      	ldr	r2, [pc, #100]	@ (80016b0 <MPU6050_GetResult+0x80>)
 800164c:	6812      	ldr	r2, [r2, #0]
 800164e:	601a      	str	r2, [r3, #0]
    pAccel[2] = az;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	3308      	adds	r3, #8
 8001654:	4a17      	ldr	r2, [pc, #92]	@ (80016b4 <MPU6050_GetResult+0x84>)
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	601a      	str	r2, [r3, #0]

    *pTemp = temperature;
 800165a:	4b17      	ldr	r3, [pc, #92]	@ (80016b8 <MPU6050_GetResult+0x88>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	601a      	str	r2, [r3, #0]

    pGyro[0] = gx;
 8001662:	4b16      	ldr	r3, [pc, #88]	@ (80016bc <MPU6050_GetResult+0x8c>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	601a      	str	r2, [r3, #0]
    pGyro[1] = gy;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3304      	adds	r3, #4
 800166e:	4a14      	ldr	r2, [pc, #80]	@ (80016c0 <MPU6050_GetResult+0x90>)
 8001670:	6812      	ldr	r2, [r2, #0]
 8001672:	601a      	str	r2, [r3, #0]
    pGyro[2] = gz;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3308      	adds	r3, #8
 8001678:	4a12      	ldr	r2, [pc, #72]	@ (80016c4 <MPU6050_GetResult+0x94>)
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	601a      	str	r2, [r3, #0]

    pAngle[0] = yaw;
 800167e:	4b12      	ldr	r3, [pc, #72]	@ (80016c8 <MPU6050_GetResult+0x98>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	601a      	str	r2, [r3, #0]
    pAngle[1] = roll;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	3304      	adds	r3, #4
 800168a:	4a10      	ldr	r2, [pc, #64]	@ (80016cc <MPU6050_GetResult+0x9c>)
 800168c:	6812      	ldr	r2, [r2, #0]
 800168e:	601a      	str	r2, [r3, #0]
    pAngle[2] = pitch;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	3308      	adds	r3, #8
 8001694:	4a0e      	ldr	r2, [pc, #56]	@ (80016d0 <MPU6050_GetResult+0xa0>)
 8001696:	6812      	ldr	r2, [r2, #0]
 8001698:	601a      	str	r2, [r3, #0]

    pBuffer = buffer;
 800169a:	4b0e      	ldr	r3, [pc, #56]	@ (80016d4 <MPU6050_GetResult+0xa4>)
 800169c:	61bb      	str	r3, [r7, #24]
}
 800169e:	bf00      	nop
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	200001f0 	.word	0x200001f0
 80016b0:	200001f4 	.word	0x200001f4
 80016b4:	200001f8 	.word	0x200001f8
 80016b8:	20000208 	.word	0x20000208
 80016bc:	200001fc 	.word	0x200001fc
 80016c0:	20000200 	.word	0x20000200
 80016c4:	20000204 	.word	0x20000204
 80016c8:	2000020c 	.word	0x2000020c
 80016cc:	20000214 	.word	0x20000214
 80016d0:	20000210 	.word	0x20000210
 80016d4:	20000218 	.word	0x20000218

080016d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	@ 0x28
 80016dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	4b2d      	ldr	r3, [pc, #180]	@ (80017a8 <MX_GPIO_Init+0xd0>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	4a2c      	ldr	r2, [pc, #176]	@ (80017a8 <MX_GPIO_Init+0xd0>)
 80016f8:	f043 0304 	orr.w	r3, r3, #4
 80016fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fe:	4b2a      	ldr	r3, [pc, #168]	@ (80017a8 <MX_GPIO_Init+0xd0>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	4b26      	ldr	r3, [pc, #152]	@ (80017a8 <MX_GPIO_Init+0xd0>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	4a25      	ldr	r2, [pc, #148]	@ (80017a8 <MX_GPIO_Init+0xd0>)
 8001714:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001718:	6313      	str	r3, [r2, #48]	@ 0x30
 800171a:	4b23      	ldr	r3, [pc, #140]	@ (80017a8 <MX_GPIO_Init+0xd0>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	4b1f      	ldr	r3, [pc, #124]	@ (80017a8 <MX_GPIO_Init+0xd0>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	4a1e      	ldr	r2, [pc, #120]	@ (80017a8 <MX_GPIO_Init+0xd0>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6313      	str	r3, [r2, #48]	@ 0x30
 8001736:	4b1c      	ldr	r3, [pc, #112]	@ (80017a8 <MX_GPIO_Init+0xd0>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	4b18      	ldr	r3, [pc, #96]	@ (80017a8 <MX_GPIO_Init+0xd0>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	4a17      	ldr	r2, [pc, #92]	@ (80017a8 <MX_GPIO_Init+0xd0>)
 800174c:	f043 0302 	orr.w	r3, r3, #2
 8001750:	6313      	str	r3, [r2, #48]	@ 0x30
 8001752:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <MX_GPIO_Init+0xd0>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	2120      	movs	r1, #32
 8001762:	4812      	ldr	r0, [pc, #72]	@ (80017ac <MX_GPIO_Init+0xd4>)
 8001764:	f001 f888 	bl	8002878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001768:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800176c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800176e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	4619      	mov	r1, r3
 800177e:	480c      	ldr	r0, [pc, #48]	@ (80017b0 <MX_GPIO_Init+0xd8>)
 8001780:	f000 fdfa 	bl	8002378 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001784:	2320      	movs	r3, #32
 8001786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	2301      	movs	r3, #1
 800178a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4619      	mov	r1, r3
 800179a:	4804      	ldr	r0, [pc, #16]	@ (80017ac <MX_GPIO_Init+0xd4>)
 800179c:	f000 fdec 	bl	8002378 <HAL_GPIO_Init>

}
 80017a0:	bf00      	nop
 80017a2:	3728      	adds	r7, #40	@ 0x28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40020000 	.word	0x40020000
 80017b0:	40020800 	.word	0x40020800

080017b4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017b8:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <MX_I2C1_Init+0x50>)
 80017ba:	4a13      	ldr	r2, [pc, #76]	@ (8001808 <MX_I2C1_Init+0x54>)
 80017bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017be:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <MX_I2C1_Init+0x50>)
 80017c0:	4a12      	ldr	r2, [pc, #72]	@ (800180c <MX_I2C1_Init+0x58>)
 80017c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <MX_I2C1_Init+0x50>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001804 <MX_I2C1_Init+0x50>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <MX_I2C1_Init+0x50>)
 80017d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001804 <MX_I2C1_Init+0x50>)
 80017da:	2200      	movs	r2, #0
 80017dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017de:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <MX_I2C1_Init+0x50>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017e4:	4b07      	ldr	r3, [pc, #28]	@ (8001804 <MX_I2C1_Init+0x50>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ea:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <MX_I2C1_Init+0x50>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017f0:	4804      	ldr	r0, [pc, #16]	@ (8001804 <MX_I2C1_Init+0x50>)
 80017f2:	f001 f85b 	bl	80028ac <HAL_I2C_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017fc:	f000 fa6e 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000228 	.word	0x20000228
 8001808:	40005400 	.word	0x40005400
 800180c:	000186a0 	.word	0x000186a0

08001810 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	@ 0x28
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a19      	ldr	r2, [pc, #100]	@ (8001894 <HAL_I2C_MspInit+0x84>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d12c      	bne.n	800188c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	4b18      	ldr	r3, [pc, #96]	@ (8001898 <HAL_I2C_MspInit+0x88>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	4a17      	ldr	r2, [pc, #92]	@ (8001898 <HAL_I2C_MspInit+0x88>)
 800183c:	f043 0302 	orr.w	r3, r3, #2
 8001840:	6313      	str	r3, [r2, #48]	@ 0x30
 8001842:	4b15      	ldr	r3, [pc, #84]	@ (8001898 <HAL_I2C_MspInit+0x88>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800184e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001854:	2312      	movs	r3, #18
 8001856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185c:	2303      	movs	r3, #3
 800185e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001860:	2304      	movs	r3, #4
 8001862:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	4619      	mov	r1, r3
 800186a:	480c      	ldr	r0, [pc, #48]	@ (800189c <HAL_I2C_MspInit+0x8c>)
 800186c:	f000 fd84 	bl	8002378 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	4b08      	ldr	r3, [pc, #32]	@ (8001898 <HAL_I2C_MspInit+0x88>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001878:	4a07      	ldr	r2, [pc, #28]	@ (8001898 <HAL_I2C_MspInit+0x88>)
 800187a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800187e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001880:	4b05      	ldr	r3, [pc, #20]	@ (8001898 <HAL_I2C_MspInit+0x88>)
 8001882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001884:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800188c:	bf00      	nop
 800188e:	3728      	adds	r7, #40	@ 0x28
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40005400 	.word	0x40005400
 8001898:	40023800 	.word	0x40023800
 800189c:	40020400 	.word	0x40020400

080018a0 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a0a      	ldr	r2, [pc, #40]	@ (80018d8 <HAL_I2C_MspDeInit+0x38>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d10e      	bne.n	80018d0 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80018b2:	4b0a      	ldr	r3, [pc, #40]	@ (80018dc <HAL_I2C_MspDeInit+0x3c>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b6:	4a09      	ldr	r2, [pc, #36]	@ (80018dc <HAL_I2C_MspDeInit+0x3c>)
 80018b8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80018bc:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80018be:	2140      	movs	r1, #64	@ 0x40
 80018c0:	4807      	ldr	r0, [pc, #28]	@ (80018e0 <HAL_I2C_MspDeInit+0x40>)
 80018c2:	f000 fedd 	bl	8002680 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80018c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018ca:	4805      	ldr	r0, [pc, #20]	@ (80018e0 <HAL_I2C_MspDeInit+0x40>)
 80018cc:	f000 fed8 	bl	8002680 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40005400 	.word	0x40005400
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40020400 	.word	0x40020400

080018e4 <wait_for_gpio_state_timeout>:

/* USER CODE BEGIN 1 */
/* Function to clear I2C busy flag error */
static bool wait_for_gpio_state_timeout(GPIO_TypeDef *port, uint16_t pin, GPIO_PinState state, uint32_t timeout)
 {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	460b      	mov	r3, r1
 80018f0:	817b      	strh	r3, [r7, #10]
 80018f2:	4613      	mov	r3, r2
 80018f4:	727b      	strb	r3, [r7, #9]
    uint32_t Tickstart = HAL_GetTick();
 80018f6:	f000 fc29 	bl	800214c <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]
    bool ret = true;
 80018fc:	2301      	movs	r3, #1
 80018fe:	75fb      	strb	r3, [r7, #23]
    /* Wait until flag is set */
    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (true == ret);)
 8001900:	e011      	b.n	8001926 <wait_for_gpio_state_timeout+0x42>
    {
        /* Check for the timeout */
        if (timeout != HAL_MAX_DELAY)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001908:	d00c      	beq.n	8001924 <wait_for_gpio_state_timeout+0x40>
        {
            if ((timeout == 0U) || ((HAL_GetTick() - Tickstart) > timeout))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d007      	beq.n	8001920 <wait_for_gpio_state_timeout+0x3c>
 8001910:	f000 fc1c 	bl	800214c <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	429a      	cmp	r2, r3
 800191e:	d201      	bcs.n	8001924 <wait_for_gpio_state_timeout+0x40>
            {
                ret = false;
 8001920:	2300      	movs	r3, #0
 8001922:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
            }
        }
        asm("nop");
 8001924:	bf00      	nop
    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (true == ret);)
 8001926:	897b      	ldrh	r3, [r7, #10]
 8001928:	4619      	mov	r1, r3
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f000 ff8c 	bl	8002848 <HAL_GPIO_ReadPin>
 8001930:	4603      	mov	r3, r0
 8001932:	461a      	mov	r2, r3
 8001934:	7a7b      	ldrb	r3, [r7, #9]
 8001936:	4293      	cmp	r3, r2
 8001938:	d002      	beq.n	8001940 <wait_for_gpio_state_timeout+0x5c>
 800193a:	7dfb      	ldrb	r3, [r7, #23]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1e0      	bne.n	8001902 <wait_for_gpio_state_timeout+0x1e>
    }
    return ret;
 8001940:	7dfb      	ldrb	r3, [r7, #23]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <I2C_ClearBusyFlagErratum>:


void I2C_ClearBusyFlagErratum(I2C_HandleTypeDef* handle, uint32_t timeout)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStructure;

    // 1. Clear PE bit.
    CLEAR_BIT(handle->Instance->CR1, I2C_CR1_PE);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0201 	bic.w	r2, r2, #1
 8001964:	601a      	str	r2, [r3, #0]

    //  2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_I2C_DeInit(handle);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f001 f8e4 	bl	8002b34 <HAL_I2C_DeInit>

    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 800196c:	2311      	movs	r3, #17
 800196e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]

    GPIO_InitStructure.Pin = I2C1_SCL_Pin;
 8001974:	2340      	movs	r3, #64	@ 0x40
 8001976:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001978:	f107 030c 	add.w	r3, r7, #12
 800197c:	4619      	mov	r1, r3
 800197e:	4845      	ldr	r0, [pc, #276]	@ (8001a94 <I2C_ClearBusyFlagErratum+0x148>)
 8001980:	f000 fcfa 	bl	8002378 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = I2C1_SDA_Pin;
 8001984:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001988:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStructure);
 800198a:	f107 030c 	add.w	r3, r7, #12
 800198e:	4619      	mov	r1, r3
 8001990:	4840      	ldr	r0, [pc, #256]	@ (8001a94 <I2C_ClearBusyFlagErratum+0x148>)
 8001992:	f000 fcf1 	bl	8002378 <HAL_GPIO_Init>

    // 3. Check SCL and SDA High level in GPIOx_IDR.
    HAL_GPIO_WritePin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET);
 8001996:	2201      	movs	r2, #1
 8001998:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800199c:	483d      	ldr	r0, [pc, #244]	@ (8001a94 <I2C_ClearBusyFlagErratum+0x148>)
 800199e:	f000 ff6b 	bl	8002878 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET);
 80019a2:	2201      	movs	r2, #1
 80019a4:	2140      	movs	r1, #64	@ 0x40
 80019a6:	483b      	ldr	r0, [pc, #236]	@ (8001a94 <I2C_ClearBusyFlagErratum+0x148>)
 80019a8:	f000 ff66 	bl	8002878 <HAL_GPIO_WritePin>

    wait_for_gpio_state_timeout(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET, timeout);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	2201      	movs	r2, #1
 80019b0:	2140      	movs	r1, #64	@ 0x40
 80019b2:	4838      	ldr	r0, [pc, #224]	@ (8001a94 <I2C_ClearBusyFlagErratum+0x148>)
 80019b4:	f7ff ff96 	bl	80018e4 <wait_for_gpio_state_timeout>
    wait_for_gpio_state_timeout(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET, timeout);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019c0:	4834      	ldr	r0, [pc, #208]	@ (8001a94 <I2C_ClearBusyFlagErratum+0x148>)
 80019c2:	f7ff ff8f 	bl	80018e4 <wait_for_gpio_state_timeout>

    // 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_RESET);
 80019c6:	2200      	movs	r2, #0
 80019c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019cc:	4831      	ldr	r0, [pc, #196]	@ (8001a94 <I2C_ClearBusyFlagErratum+0x148>)
 80019ce:	f000 ff53 	bl	8002878 <HAL_GPIO_WritePin>

    // 5. Check SDA Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_RESET, timeout);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019da:	482e      	ldr	r0, [pc, #184]	@ (8001a94 <I2C_ClearBusyFlagErratum+0x148>)
 80019dc:	f7ff ff82 	bl	80018e4 <wait_for_gpio_state_timeout>

    // 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_RESET);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2140      	movs	r1, #64	@ 0x40
 80019e4:	482b      	ldr	r0, [pc, #172]	@ (8001a94 <I2C_ClearBusyFlagErratum+0x148>)
 80019e6:	f000 ff47 	bl	8002878 <HAL_GPIO_WritePin>

    // 7. Check SCL Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_RESET, timeout);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	2200      	movs	r2, #0
 80019ee:	2140      	movs	r1, #64	@ 0x40
 80019f0:	4828      	ldr	r0, [pc, #160]	@ (8001a94 <I2C_ClearBusyFlagErratum+0x148>)
 80019f2:	f7ff ff77 	bl	80018e4 <wait_for_gpio_state_timeout>

    // 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET);
 80019f6:	2201      	movs	r2, #1
 80019f8:	2140      	movs	r1, #64	@ 0x40
 80019fa:	4826      	ldr	r0, [pc, #152]	@ (8001a94 <I2C_ClearBusyFlagErratum+0x148>)
 80019fc:	f000 ff3c 	bl	8002878 <HAL_GPIO_WritePin>

    // 9. Check SCL High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET, timeout);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	2201      	movs	r2, #1
 8001a04:	2140      	movs	r1, #64	@ 0x40
 8001a06:	4823      	ldr	r0, [pc, #140]	@ (8001a94 <I2C_ClearBusyFlagErratum+0x148>)
 8001a08:	f7ff ff6c 	bl	80018e4 <wait_for_gpio_state_timeout>

    // 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET);
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a12:	4820      	ldr	r0, [pc, #128]	@ (8001a94 <I2C_ClearBusyFlagErratum+0x148>)
 8001a14:	f000 ff30 	bl	8002878 <HAL_GPIO_WritePin>

    // 11. Check SDA High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET, timeout);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a20:	481c      	ldr	r0, [pc, #112]	@ (8001a94 <I2C_ClearBusyFlagErratum+0x148>)
 8001a22:	f7ff ff5f 	bl	80018e4 <wait_for_gpio_state_timeout>

    // 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
    GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8001a26:	2312      	movs	r3, #18
 8001a28:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Alternate = GPIO_AF4_I2C1;
 8001a2a:	2304      	movs	r3, #4
 8001a2c:	61fb      	str	r3, [r7, #28]

    GPIO_InitStructure.Pin = I2C1_SCL_Pin;
 8001a2e:	2340      	movs	r3, #64	@ 0x40
 8001a30:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStructure);
 8001a32:	f107 030c 	add.w	r3, r7, #12
 8001a36:	4619      	mov	r1, r3
 8001a38:	4816      	ldr	r0, [pc, #88]	@ (8001a94 <I2C_ClearBusyFlagErratum+0x148>)
 8001a3a:	f000 fc9d 	bl	8002378 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = I2C1_SDA_Pin;
 8001a3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a42:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStructure);
 8001a44:	f107 030c 	add.w	r3, r7, #12
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4812      	ldr	r0, [pc, #72]	@ (8001a94 <I2C_ClearBusyFlagErratum+0x148>)
 8001a4c:	f000 fc94 	bl	8002378 <HAL_GPIO_Init>

    // 13. Set SWRST bit in I2Cx_CR1 register.
    SET_BIT(handle->Instance->CR1, I2C_CR1_SWRST);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a5e:	601a      	str	r2, [r3, #0]
    asm("nop");
 8001a60:	bf00      	nop

    /* 14. Clear SWRST bit in I2Cx_CR1 register. */
    CLEAR_BIT(handle->Instance->CR1, I2C_CR1_SWRST);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a70:	601a      	str	r2, [r3, #0]
    asm("nop");
 8001a72:	bf00      	nop

    /* 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register */
    SET_BIT(handle->Instance->CR1, I2C_CR1_PE);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0201 	orr.w	r2, r2, #1
 8001a82:	601a      	str	r2, [r3, #0]
    asm("nop");
 8001a84:	bf00      	nop

    // Call initialization function.
    HAL_I2C_Init(handle);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 ff10 	bl	80028ac <HAL_I2C_Init>
}
 8001a8c:	bf00      	nop
 8001a8e:	3720      	adds	r7, #32
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40020400 	.word	0x40020400

08001a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a9c:	b0c6      	sub	sp, #280	@ 0x118
 8001a9e:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aa0:	f000 faee 	bl	8002080 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aa4:	f000 f8ae 	bl	8001c04 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aa8:	f7ff fe16 	bl	80016d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001aac:	f000 fa4c 	bl	8001f48 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001ab0:	f7ff fe80 	bl	80017b4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8001ab4:	f7ff fb14 	bl	80010e0 <OLED_Init>
	  }
  }*/



  MPU6050_Init();
 8001ab8:	f7ff fb7e 	bl	80011b8 <MPU6050_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_StatusTypeDef result = HAL_I2C_IsDeviceReady(&hi2c1, 68 << 1, 1, HAL_MAX_DELAY);
 8001abc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	2188      	movs	r1, #136	@ 0x88
 8001ac4:	484b      	ldr	r0, [pc, #300]	@ (8001bf4 <main+0x15c>)
 8001ac6:	f001 fb91 	bl	80031ec <HAL_I2C_IsDeviceReady>
 8001aca:	4603      	mov	r3, r0
 8001acc:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
	  if (result == HAL_BUSY) {
 8001ad0:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d10b      	bne.n	8001af0 <main+0x58>
	  	sprintf(str, "I2C Bus busy at address 0x%02X\r\n", 68);
 8001ad8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001adc:	2244      	movs	r2, #68	@ 0x44
 8001ade:	4946      	ldr	r1, [pc, #280]	@ (8001bf8 <main+0x160>)
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f003 fd61 	bl	80055a8 <siprintf>
	  	I2C_ClearBusyFlagErratum(&hi2c1, 1000);
 8001ae6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001aea:	4842      	ldr	r0, [pc, #264]	@ (8001bf4 <main+0x15c>)
 8001aec:	f7ff ff2e 	bl	800194c <I2C_ClearBusyFlagErratum>
	  }
      MPU6050_Proc();
 8001af0:	f7ff fbb2 	bl	8001258 <MPU6050_Proc>
      MPU6050_GetResult(accel, &temp, gyro, angle, p_buffer);
 8001af4:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001af8:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8001afc:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001b00:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8001b04:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	4623      	mov	r3, r4
 8001b0c:	f7ff fd90 	bl	8001630 <MPU6050_GetResult>
          }*/
      /*sprintf(str, "Raw: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
              p_buffer[0], p_buffer[1], p_buffer[2], p_buffer[3], p_buffer[4], p_buffer[5], p_buffer[6], p_buffer[7],
			  p_buffer[8], p_buffer[9], p_buffer[10], p_buffer[11], p_buffer[12], p_buffer[13]);*/
      //HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
      sprintf(str, "ax = %.3f ay = %.3f az = %.3f gx = %.3f gy = %.3f gz = %.3f yaw = %.3f roll = %.3f pitch = %.3f temp = %.3f;\r\n", accel[0], accel[1], accel[2], gyro[0], gyro[1], gyro[2], angle[0], angle[1], angle[2], temp);
 8001b10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fd20 	bl	8000558 <__aeabi_f2d>
 8001b18:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8001b1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fd1a 	bl	8000558 <__aeabi_f2d>
 8001b24:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001b28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fd14 	bl	8000558 <__aeabi_f2d>
 8001b30:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001b34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fd0e 	bl	8000558 <__aeabi_f2d>
 8001b3c:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001b40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fd08 	bl	8000558 <__aeabi_f2d>
 8001b48:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001b4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fd02 	bl	8000558 <__aeabi_f2d>
 8001b54:	e9c7 0100 	strd	r0, r1, [r7]
 8001b58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe fcfc 	bl	8000558 <__aeabi_f2d>
 8001b60:	4682      	mov	sl, r0
 8001b62:	468b      	mov	fp, r1
 8001b64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fcf6 	bl	8000558 <__aeabi_f2d>
 8001b6c:	4680      	mov	r8, r0
 8001b6e:	4689      	mov	r9, r1
 8001b70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fcf0 	bl	8000558 <__aeabi_f2d>
 8001b78:	4604      	mov	r4, r0
 8001b7a:	460d      	mov	r5, r1
 8001b7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fcea 	bl	8000558 <__aeabi_f2d>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8001b8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8001b90:	e9cd 450e 	strd	r4, r5, [sp, #56]	@ 0x38
 8001b94:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 8001b98:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 8001b9c:	ed97 7b00 	vldr	d7, [r7]
 8001ba0:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001ba4:	ed97 7b02 	vldr	d7, [r7, #8]
 8001ba8:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001bac:	ed97 7b04 	vldr	d7, [r7, #16]
 8001bb0:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001bb4:	ed97 7b06 	vldr	d7, [r7, #24]
 8001bb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001bbc:	ed97 7b08 	vldr	d7, [r7, #32]
 8001bc0:	ed8d 7b00 	vstr	d7, [sp]
 8001bc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001bc8:	490c      	ldr	r1, [pc, #48]	@ (8001bfc <main+0x164>)
 8001bca:	f003 fced 	bl	80055a8 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8001bce:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7fe fb54 	bl	8000280 <strlen>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8001be0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001be4:	4806      	ldr	r0, [pc, #24]	@ (8001c00 <main+0x168>)
 8001be6:	f002 fccb 	bl	8004580 <HAL_UART_Transmit>

//    //读取MPU6050一个原始数据
//    HAL_I2C_Master_Transmit(&hi2c1, MPU6050, 0x3C, 1, HAL_MAX_DELAY);
//    uint8_t dat;
//    HAL_I2C_Master_Receive(&hi2c1, MPU6050, &dat, 1, HAL_MAX_DELAY);
    HAL_Delay(1);
 8001bea:	2001      	movs	r0, #1
 8001bec:	f000 faba 	bl	8002164 <HAL_Delay>
  {
 8001bf0:	e764      	b.n	8001abc <main+0x24>
 8001bf2:	bf00      	nop
 8001bf4:	20000228 	.word	0x20000228
 8001bf8:	08007e70 	.word	0x08007e70
 8001bfc:	08007e94 	.word	0x08007e94
 8001c00:	20000280 	.word	0x20000280

08001c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b094      	sub	sp, #80	@ 0x50
 8001c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c0a:	f107 0320 	add.w	r3, r7, #32
 8001c0e:	2230      	movs	r2, #48	@ 0x30
 8001c10:	2100      	movs	r1, #0
 8001c12:	4618      	mov	r0, r3
 8001c14:	f003 fdaa 	bl	800576c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c18:	f107 030c 	add.w	r3, r7, #12
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	4b29      	ldr	r3, [pc, #164]	@ (8001cd4 <SystemClock_Config+0xd0>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c30:	4a28      	ldr	r2, [pc, #160]	@ (8001cd4 <SystemClock_Config+0xd0>)
 8001c32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c36:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c38:	4b26      	ldr	r3, [pc, #152]	@ (8001cd4 <SystemClock_Config+0xd0>)
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c44:	2300      	movs	r3, #0
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	4b23      	ldr	r3, [pc, #140]	@ (8001cd8 <SystemClock_Config+0xd4>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001c50:	4a21      	ldr	r2, [pc, #132]	@ (8001cd8 <SystemClock_Config+0xd4>)
 8001c52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd8 <SystemClock_Config+0xd4>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c64:	2302      	movs	r3, #2
 8001c66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c6c:	2310      	movs	r3, #16
 8001c6e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c70:	2302      	movs	r3, #2
 8001c72:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c74:	2300      	movs	r3, #0
 8001c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001c78:	2310      	movs	r3, #16
 8001c7a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001c7c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001c80:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c82:	2304      	movs	r3, #4
 8001c84:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c86:	2307      	movs	r3, #7
 8001c88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c8a:	f107 0320 	add.w	r3, r7, #32
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f001 ff8e 	bl	8003bb0 <HAL_RCC_OscConfig>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001c9a:	f000 f81f 	bl	8001cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c9e:	230f      	movs	r3, #15
 8001ca0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001caa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cb4:	f107 030c 	add.w	r3, r7, #12
 8001cb8:	2102      	movs	r1, #2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f002 f9f0 	bl	80040a0 <HAL_RCC_ClockConfig>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001cc6:	f000 f809 	bl	8001cdc <Error_Handler>
  }
}
 8001cca:	bf00      	nop
 8001ccc:	3750      	adds	r7, #80	@ 0x50
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40007000 	.word	0x40007000

08001cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce0:	b672      	cpsid	i
}
 8001ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce4:	bf00      	nop
 8001ce6:	e7fd      	b.n	8001ce4 <Error_Handler+0x8>

08001ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	4b10      	ldr	r3, [pc, #64]	@ (8001d34 <HAL_MspInit+0x4c>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf6:	4a0f      	ldr	r2, [pc, #60]	@ (8001d34 <HAL_MspInit+0x4c>)
 8001cf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001d34 <HAL_MspInit+0x4c>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	603b      	str	r3, [r7, #0]
 8001d0e:	4b09      	ldr	r3, [pc, #36]	@ (8001d34 <HAL_MspInit+0x4c>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d12:	4a08      	ldr	r2, [pc, #32]	@ (8001d34 <HAL_MspInit+0x4c>)
 8001d14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d1a:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <HAL_MspInit+0x4c>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d26:	2007      	movs	r0, #7
 8001d28:	f000 faf2 	bl	8002310 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40023800 	.word	0x40023800

08001d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d3c:	bf00      	nop
 8001d3e:	e7fd      	b.n	8001d3c <NMI_Handler+0x4>

08001d40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <HardFault_Handler+0x4>

08001d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d4c:	bf00      	nop
 8001d4e:	e7fd      	b.n	8001d4c <MemManage_Handler+0x4>

08001d50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <BusFault_Handler+0x4>

08001d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d5c:	bf00      	nop
 8001d5e:	e7fd      	b.n	8001d5c <UsageFault_Handler+0x4>

08001d60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d8e:	f000 f9c9 	bl	8002124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0
  return 1;
 8001d9a:	2301      	movs	r3, #1
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <_kill>:

int _kill(int pid, int sig)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001db0:	f003 fce8 	bl	8005784 <__errno>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2216      	movs	r2, #22
 8001db8:	601a      	str	r2, [r3, #0]
  return -1;
 8001dba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <_exit>:

void _exit (int status)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dce:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff ffe7 	bl	8001da6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <_exit+0x12>

08001ddc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	e00a      	b.n	8001e04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dee:	f3af 8000 	nop.w
 8001df2:	4601      	mov	r1, r0
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	1c5a      	adds	r2, r3, #1
 8001df8:	60ba      	str	r2, [r7, #8]
 8001dfa:	b2ca      	uxtb	r2, r1
 8001dfc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	3301      	adds	r3, #1
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	dbf0      	blt.n	8001dee <_read+0x12>
  }

  return len;
 8001e0c:	687b      	ldr	r3, [r7, #4]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b086      	sub	sp, #24
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	60f8      	str	r0, [r7, #12]
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	e009      	b.n	8001e3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	1c5a      	adds	r2, r3, #1
 8001e2c:	60ba      	str	r2, [r7, #8]
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	dbf1      	blt.n	8001e28 <_write+0x12>
  }
  return len;
 8001e44:	687b      	ldr	r3, [r7, #4]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <_close>:

int _close(int file)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e76:	605a      	str	r2, [r3, #4]
  return 0;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <_isatty>:

int _isatty(int file)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e8e:	2301      	movs	r3, #1
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
	...

08001eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ec0:	4a14      	ldr	r2, [pc, #80]	@ (8001f14 <_sbrk+0x5c>)
 8001ec2:	4b15      	ldr	r3, [pc, #84]	@ (8001f18 <_sbrk+0x60>)
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ecc:	4b13      	ldr	r3, [pc, #76]	@ (8001f1c <_sbrk+0x64>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d102      	bne.n	8001eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ed4:	4b11      	ldr	r3, [pc, #68]	@ (8001f1c <_sbrk+0x64>)
 8001ed6:	4a12      	ldr	r2, [pc, #72]	@ (8001f20 <_sbrk+0x68>)
 8001ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eda:	4b10      	ldr	r3, [pc, #64]	@ (8001f1c <_sbrk+0x64>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d207      	bcs.n	8001ef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ee8:	f003 fc4c 	bl	8005784 <__errno>
 8001eec:	4603      	mov	r3, r0
 8001eee:	220c      	movs	r2, #12
 8001ef0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ef2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ef6:	e009      	b.n	8001f0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ef8:	4b08      	ldr	r3, [pc, #32]	@ (8001f1c <_sbrk+0x64>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001efe:	4b07      	ldr	r3, [pc, #28]	@ (8001f1c <_sbrk+0x64>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	4a05      	ldr	r2, [pc, #20]	@ (8001f1c <_sbrk+0x64>)
 8001f08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20018000 	.word	0x20018000
 8001f18:	00000400 	.word	0x00000400
 8001f1c:	2000027c 	.word	0x2000027c
 8001f20:	20000418 	.word	0x20000418

08001f24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f28:	4b06      	ldr	r3, [pc, #24]	@ (8001f44 <SystemInit+0x20>)
 8001f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f2e:	4a05      	ldr	r2, [pc, #20]	@ (8001f44 <SystemInit+0x20>)
 8001f30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f4c:	4b11      	ldr	r3, [pc, #68]	@ (8001f94 <MX_USART2_UART_Init+0x4c>)
 8001f4e:	4a12      	ldr	r2, [pc, #72]	@ (8001f98 <MX_USART2_UART_Init+0x50>)
 8001f50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f52:	4b10      	ldr	r3, [pc, #64]	@ (8001f94 <MX_USART2_UART_Init+0x4c>)
 8001f54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f94 <MX_USART2_UART_Init+0x4c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f60:	4b0c      	ldr	r3, [pc, #48]	@ (8001f94 <MX_USART2_UART_Init+0x4c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f66:	4b0b      	ldr	r3, [pc, #44]	@ (8001f94 <MX_USART2_UART_Init+0x4c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	@ (8001f94 <MX_USART2_UART_Init+0x4c>)
 8001f6e:	220c      	movs	r2, #12
 8001f70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f72:	4b08      	ldr	r3, [pc, #32]	@ (8001f94 <MX_USART2_UART_Init+0x4c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f78:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <MX_USART2_UART_Init+0x4c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f7e:	4805      	ldr	r0, [pc, #20]	@ (8001f94 <MX_USART2_UART_Init+0x4c>)
 8001f80:	f002 faae 	bl	80044e0 <HAL_UART_Init>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f8a:	f7ff fea7 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000280 	.word	0x20000280
 8001f98:	40004400 	.word	0x40004400

08001f9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08a      	sub	sp, #40	@ 0x28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a19      	ldr	r2, [pc, #100]	@ (8002020 <HAL_UART_MspInit+0x84>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d12b      	bne.n	8002016 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	4b18      	ldr	r3, [pc, #96]	@ (8002024 <HAL_UART_MspInit+0x88>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc6:	4a17      	ldr	r2, [pc, #92]	@ (8002024 <HAL_UART_MspInit+0x88>)
 8001fc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fce:	4b15      	ldr	r3, [pc, #84]	@ (8002024 <HAL_UART_MspInit+0x88>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	4b11      	ldr	r3, [pc, #68]	@ (8002024 <HAL_UART_MspInit+0x88>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	4a10      	ldr	r2, [pc, #64]	@ (8002024 <HAL_UART_MspInit+0x88>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fea:	4b0e      	ldr	r3, [pc, #56]	@ (8002024 <HAL_UART_MspInit+0x88>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ff6:	230c      	movs	r3, #12
 8001ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002002:	2300      	movs	r3, #0
 8002004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002006:	2307      	movs	r3, #7
 8002008:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200a:	f107 0314 	add.w	r3, r7, #20
 800200e:	4619      	mov	r1, r3
 8002010:	4805      	ldr	r0, [pc, #20]	@ (8002028 <HAL_UART_MspInit+0x8c>)
 8002012:	f000 f9b1 	bl	8002378 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002016:	bf00      	nop
 8002018:	3728      	adds	r7, #40	@ 0x28
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40004400 	.word	0x40004400
 8002024:	40023800 	.word	0x40023800
 8002028:	40020000 	.word	0x40020000

0800202c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800202c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002064 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002030:	f7ff ff78 	bl	8001f24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002034:	480c      	ldr	r0, [pc, #48]	@ (8002068 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002036:	490d      	ldr	r1, [pc, #52]	@ (800206c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002038:	4a0d      	ldr	r2, [pc, #52]	@ (8002070 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800203a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800203c:	e002      	b.n	8002044 <LoopCopyDataInit>

0800203e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800203e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002042:	3304      	adds	r3, #4

08002044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002048:	d3f9      	bcc.n	800203e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800204a:	4a0a      	ldr	r2, [pc, #40]	@ (8002074 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800204c:	4c0a      	ldr	r4, [pc, #40]	@ (8002078 <LoopFillZerobss+0x22>)
  movs r3, #0
 800204e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002050:	e001      	b.n	8002056 <LoopFillZerobss>

08002052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002054:	3204      	adds	r2, #4

08002056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002058:	d3fb      	bcc.n	8002052 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800205a:	f003 fb99 	bl	8005790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800205e:	f7ff fd1b 	bl	8001a98 <main>
  bx  lr    
 8002062:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002064:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800206c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002070:	08008310 	.word	0x08008310
  ldr r2, =_sbss
 8002074:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002078:	20000418 	.word	0x20000418

0800207c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800207c:	e7fe      	b.n	800207c <ADC_IRQHandler>
	...

08002080 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002084:	4b0e      	ldr	r3, [pc, #56]	@ (80020c0 <HAL_Init+0x40>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a0d      	ldr	r2, [pc, #52]	@ (80020c0 <HAL_Init+0x40>)
 800208a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800208e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002090:	4b0b      	ldr	r3, [pc, #44]	@ (80020c0 <HAL_Init+0x40>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0a      	ldr	r2, [pc, #40]	@ (80020c0 <HAL_Init+0x40>)
 8002096:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800209a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800209c:	4b08      	ldr	r3, [pc, #32]	@ (80020c0 <HAL_Init+0x40>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a07      	ldr	r2, [pc, #28]	@ (80020c0 <HAL_Init+0x40>)
 80020a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020a8:	2003      	movs	r0, #3
 80020aa:	f000 f931 	bl	8002310 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ae:	2000      	movs	r0, #0
 80020b0:	f000 f808 	bl	80020c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020b4:	f7ff fe18 	bl	8001ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40023c00 	.word	0x40023c00

080020c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020cc:	4b12      	ldr	r3, [pc, #72]	@ (8002118 <HAL_InitTick+0x54>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4b12      	ldr	r3, [pc, #72]	@ (800211c <HAL_InitTick+0x58>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	4619      	mov	r1, r3
 80020d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020da:	fbb3 f3f1 	udiv	r3, r3, r1
 80020de:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 f93b 	bl	800235e <HAL_SYSTICK_Config>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e00e      	b.n	8002110 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b0f      	cmp	r3, #15
 80020f6:	d80a      	bhi.n	800210e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020f8:	2200      	movs	r2, #0
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002100:	f000 f911 	bl	8002326 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002104:	4a06      	ldr	r2, [pc, #24]	@ (8002120 <HAL_InitTick+0x5c>)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	e000      	b.n	8002110 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
}
 8002110:	4618      	mov	r0, r3
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000000 	.word	0x20000000
 800211c:	20000008 	.word	0x20000008
 8002120:	20000004 	.word	0x20000004

08002124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002128:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <HAL_IncTick+0x20>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	461a      	mov	r2, r3
 800212e:	4b06      	ldr	r3, [pc, #24]	@ (8002148 <HAL_IncTick+0x24>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4413      	add	r3, r2
 8002134:	4a04      	ldr	r2, [pc, #16]	@ (8002148 <HAL_IncTick+0x24>)
 8002136:	6013      	str	r3, [r2, #0]
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	20000008 	.word	0x20000008
 8002148:	200002c8 	.word	0x200002c8

0800214c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return uwTick;
 8002150:	4b03      	ldr	r3, [pc, #12]	@ (8002160 <HAL_GetTick+0x14>)
 8002152:	681b      	ldr	r3, [r3, #0]
}
 8002154:	4618      	mov	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	200002c8 	.word	0x200002c8

08002164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800216c:	f7ff ffee 	bl	800214c <HAL_GetTick>
 8002170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800217c:	d005      	beq.n	800218a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800217e:	4b0a      	ldr	r3, [pc, #40]	@ (80021a8 <HAL_Delay+0x44>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4413      	add	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800218a:	bf00      	nop
 800218c:	f7ff ffde 	bl	800214c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	429a      	cmp	r2, r3
 800219a:	d8f7      	bhi.n	800218c <HAL_Delay+0x28>
  {
  }
}
 800219c:	bf00      	nop
 800219e:	bf00      	nop
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000008 	.word	0x20000008

080021ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021bc:	4b0c      	ldr	r3, [pc, #48]	@ (80021f0 <__NVIC_SetPriorityGrouping+0x44>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021c8:	4013      	ands	r3, r2
 80021ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021de:	4a04      	ldr	r2, [pc, #16]	@ (80021f0 <__NVIC_SetPriorityGrouping+0x44>)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	60d3      	str	r3, [r2, #12]
}
 80021e4:	bf00      	nop
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021f8:	4b04      	ldr	r3, [pc, #16]	@ (800220c <__NVIC_GetPriorityGrouping+0x18>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	0a1b      	lsrs	r3, r3, #8
 80021fe:	f003 0307 	and.w	r3, r3, #7
}
 8002202:	4618      	mov	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	6039      	str	r1, [r7, #0]
 800221a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002220:	2b00      	cmp	r3, #0
 8002222:	db0a      	blt.n	800223a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	b2da      	uxtb	r2, r3
 8002228:	490c      	ldr	r1, [pc, #48]	@ (800225c <__NVIC_SetPriority+0x4c>)
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	0112      	lsls	r2, r2, #4
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	440b      	add	r3, r1
 8002234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002238:	e00a      	b.n	8002250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	b2da      	uxtb	r2, r3
 800223e:	4908      	ldr	r1, [pc, #32]	@ (8002260 <__NVIC_SetPriority+0x50>)
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	3b04      	subs	r3, #4
 8002248:	0112      	lsls	r2, r2, #4
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	440b      	add	r3, r1
 800224e:	761a      	strb	r2, [r3, #24]
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	e000e100 	.word	0xe000e100
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002264:	b480      	push	{r7}
 8002266:	b089      	sub	sp, #36	@ 0x24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f1c3 0307 	rsb	r3, r3, #7
 800227e:	2b04      	cmp	r3, #4
 8002280:	bf28      	it	cs
 8002282:	2304      	movcs	r3, #4
 8002284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3304      	adds	r3, #4
 800228a:	2b06      	cmp	r3, #6
 800228c:	d902      	bls.n	8002294 <NVIC_EncodePriority+0x30>
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3b03      	subs	r3, #3
 8002292:	e000      	b.n	8002296 <NVIC_EncodePriority+0x32>
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002298:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43da      	mvns	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	401a      	ands	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	fa01 f303 	lsl.w	r3, r1, r3
 80022b6:	43d9      	mvns	r1, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	4313      	orrs	r3, r2
         );
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3724      	adds	r7, #36	@ 0x24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
	...

080022cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022dc:	d301      	bcc.n	80022e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022de:	2301      	movs	r3, #1
 80022e0:	e00f      	b.n	8002302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022e2:	4a0a      	ldr	r2, [pc, #40]	@ (800230c <SysTick_Config+0x40>)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ea:	210f      	movs	r1, #15
 80022ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80022f0:	f7ff ff8e 	bl	8002210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022f4:	4b05      	ldr	r3, [pc, #20]	@ (800230c <SysTick_Config+0x40>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022fa:	4b04      	ldr	r3, [pc, #16]	@ (800230c <SysTick_Config+0x40>)
 80022fc:	2207      	movs	r2, #7
 80022fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	e000e010 	.word	0xe000e010

08002310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff ff47 	bl	80021ac <__NVIC_SetPriorityGrouping>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002326:	b580      	push	{r7, lr}
 8002328:	b086      	sub	sp, #24
 800232a:	af00      	add	r7, sp, #0
 800232c:	4603      	mov	r3, r0
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
 8002332:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002338:	f7ff ff5c 	bl	80021f4 <__NVIC_GetPriorityGrouping>
 800233c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	68b9      	ldr	r1, [r7, #8]
 8002342:	6978      	ldr	r0, [r7, #20]
 8002344:	f7ff ff8e 	bl	8002264 <NVIC_EncodePriority>
 8002348:	4602      	mov	r2, r0
 800234a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800234e:	4611      	mov	r1, r2
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff5d 	bl	8002210 <__NVIC_SetPriority>
}
 8002356:	bf00      	nop
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff ffb0 	bl	80022cc <SysTick_Config>
 800236c:	4603      	mov	r3, r0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002378:	b480      	push	{r7}
 800237a:	b089      	sub	sp, #36	@ 0x24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002386:	2300      	movs	r3, #0
 8002388:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800238a:	2300      	movs	r3, #0
 800238c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
 8002392:	e159      	b.n	8002648 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002394:	2201      	movs	r2, #1
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	f040 8148 	bne.w	8002642 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d005      	beq.n	80023ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d130      	bne.n	800242c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	2203      	movs	r2, #3
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43db      	mvns	r3, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4013      	ands	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002400:	2201      	movs	r2, #1
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	091b      	lsrs	r3, r3, #4
 8002416:	f003 0201 	and.w	r2, r3, #1
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 0303 	and.w	r3, r3, #3
 8002434:	2b03      	cmp	r3, #3
 8002436:	d017      	beq.n	8002468 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	2203      	movs	r2, #3
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 0303 	and.w	r3, r3, #3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d123      	bne.n	80024bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	08da      	lsrs	r2, r3, #3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3208      	adds	r2, #8
 800247c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002480:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	220f      	movs	r2, #15
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	08da      	lsrs	r2, r3, #3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3208      	adds	r2, #8
 80024b6:	69b9      	ldr	r1, [r7, #24]
 80024b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	2203      	movs	r2, #3
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 0203 	and.w	r2, r3, #3
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 80a2 	beq.w	8002642 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	4b57      	ldr	r3, [pc, #348]	@ (8002660 <HAL_GPIO_Init+0x2e8>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002506:	4a56      	ldr	r2, [pc, #344]	@ (8002660 <HAL_GPIO_Init+0x2e8>)
 8002508:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800250c:	6453      	str	r3, [r2, #68]	@ 0x44
 800250e:	4b54      	ldr	r3, [pc, #336]	@ (8002660 <HAL_GPIO_Init+0x2e8>)
 8002510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002512:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800251a:	4a52      	ldr	r2, [pc, #328]	@ (8002664 <HAL_GPIO_Init+0x2ec>)
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	089b      	lsrs	r3, r3, #2
 8002520:	3302      	adds	r3, #2
 8002522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	220f      	movs	r2, #15
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a49      	ldr	r2, [pc, #292]	@ (8002668 <HAL_GPIO_Init+0x2f0>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d019      	beq.n	800257a <HAL_GPIO_Init+0x202>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a48      	ldr	r2, [pc, #288]	@ (800266c <HAL_GPIO_Init+0x2f4>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d013      	beq.n	8002576 <HAL_GPIO_Init+0x1fe>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a47      	ldr	r2, [pc, #284]	@ (8002670 <HAL_GPIO_Init+0x2f8>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d00d      	beq.n	8002572 <HAL_GPIO_Init+0x1fa>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a46      	ldr	r2, [pc, #280]	@ (8002674 <HAL_GPIO_Init+0x2fc>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d007      	beq.n	800256e <HAL_GPIO_Init+0x1f6>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a45      	ldr	r2, [pc, #276]	@ (8002678 <HAL_GPIO_Init+0x300>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d101      	bne.n	800256a <HAL_GPIO_Init+0x1f2>
 8002566:	2304      	movs	r3, #4
 8002568:	e008      	b.n	800257c <HAL_GPIO_Init+0x204>
 800256a:	2307      	movs	r3, #7
 800256c:	e006      	b.n	800257c <HAL_GPIO_Init+0x204>
 800256e:	2303      	movs	r3, #3
 8002570:	e004      	b.n	800257c <HAL_GPIO_Init+0x204>
 8002572:	2302      	movs	r3, #2
 8002574:	e002      	b.n	800257c <HAL_GPIO_Init+0x204>
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <HAL_GPIO_Init+0x204>
 800257a:	2300      	movs	r3, #0
 800257c:	69fa      	ldr	r2, [r7, #28]
 800257e:	f002 0203 	and.w	r2, r2, #3
 8002582:	0092      	lsls	r2, r2, #2
 8002584:	4093      	lsls	r3, r2
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800258c:	4935      	ldr	r1, [pc, #212]	@ (8002664 <HAL_GPIO_Init+0x2ec>)
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	089b      	lsrs	r3, r3, #2
 8002592:	3302      	adds	r3, #2
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800259a:	4b38      	ldr	r3, [pc, #224]	@ (800267c <HAL_GPIO_Init+0x304>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025be:	4a2f      	ldr	r2, [pc, #188]	@ (800267c <HAL_GPIO_Init+0x304>)
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025c4:	4b2d      	ldr	r3, [pc, #180]	@ (800267c <HAL_GPIO_Init+0x304>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025e8:	4a24      	ldr	r2, [pc, #144]	@ (800267c <HAL_GPIO_Init+0x304>)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025ee:	4b23      	ldr	r3, [pc, #140]	@ (800267c <HAL_GPIO_Init+0x304>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	43db      	mvns	r3, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4013      	ands	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002612:	4a1a      	ldr	r2, [pc, #104]	@ (800267c <HAL_GPIO_Init+0x304>)
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002618:	4b18      	ldr	r3, [pc, #96]	@ (800267c <HAL_GPIO_Init+0x304>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800263c:	4a0f      	ldr	r2, [pc, #60]	@ (800267c <HAL_GPIO_Init+0x304>)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3301      	adds	r3, #1
 8002646:	61fb      	str	r3, [r7, #28]
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	2b0f      	cmp	r3, #15
 800264c:	f67f aea2 	bls.w	8002394 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002650:	bf00      	nop
 8002652:	bf00      	nop
 8002654:	3724      	adds	r7, #36	@ 0x24
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40023800 	.word	0x40023800
 8002664:	40013800 	.word	0x40013800
 8002668:	40020000 	.word	0x40020000
 800266c:	40020400 	.word	0x40020400
 8002670:	40020800 	.word	0x40020800
 8002674:	40020c00 	.word	0x40020c00
 8002678:	40021000 	.word	0x40021000
 800267c:	40013c00 	.word	0x40013c00

08002680 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002680:	b480      	push	{r7}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800268a:	2300      	movs	r3, #0
 800268c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	e0bb      	b.n	8002814 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800269c:	2201      	movs	r2, #1
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4013      	ands	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	f040 80ab 	bne.w	800280e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80026b8:	4a5c      	ldr	r2, [pc, #368]	@ (800282c <HAL_GPIO_DeInit+0x1ac>)
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	089b      	lsrs	r3, r3, #2
 80026be:	3302      	adds	r3, #2
 80026c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	220f      	movs	r2, #15
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	4013      	ands	r3, r2
 80026d8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a54      	ldr	r2, [pc, #336]	@ (8002830 <HAL_GPIO_DeInit+0x1b0>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d019      	beq.n	8002716 <HAL_GPIO_DeInit+0x96>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a53      	ldr	r2, [pc, #332]	@ (8002834 <HAL_GPIO_DeInit+0x1b4>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d013      	beq.n	8002712 <HAL_GPIO_DeInit+0x92>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a52      	ldr	r2, [pc, #328]	@ (8002838 <HAL_GPIO_DeInit+0x1b8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00d      	beq.n	800270e <HAL_GPIO_DeInit+0x8e>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a51      	ldr	r2, [pc, #324]	@ (800283c <HAL_GPIO_DeInit+0x1bc>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d007      	beq.n	800270a <HAL_GPIO_DeInit+0x8a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a50      	ldr	r2, [pc, #320]	@ (8002840 <HAL_GPIO_DeInit+0x1c0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d101      	bne.n	8002706 <HAL_GPIO_DeInit+0x86>
 8002702:	2304      	movs	r3, #4
 8002704:	e008      	b.n	8002718 <HAL_GPIO_DeInit+0x98>
 8002706:	2307      	movs	r3, #7
 8002708:	e006      	b.n	8002718 <HAL_GPIO_DeInit+0x98>
 800270a:	2303      	movs	r3, #3
 800270c:	e004      	b.n	8002718 <HAL_GPIO_DeInit+0x98>
 800270e:	2302      	movs	r3, #2
 8002710:	e002      	b.n	8002718 <HAL_GPIO_DeInit+0x98>
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <HAL_GPIO_DeInit+0x98>
 8002716:	2300      	movs	r3, #0
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	f002 0203 	and.w	r2, r2, #3
 800271e:	0092      	lsls	r2, r2, #2
 8002720:	4093      	lsls	r3, r2
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	429a      	cmp	r2, r3
 8002726:	d132      	bne.n	800278e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002728:	4b46      	ldr	r3, [pc, #280]	@ (8002844 <HAL_GPIO_DeInit+0x1c4>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	43db      	mvns	r3, r3
 8002730:	4944      	ldr	r1, [pc, #272]	@ (8002844 <HAL_GPIO_DeInit+0x1c4>)
 8002732:	4013      	ands	r3, r2
 8002734:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002736:	4b43      	ldr	r3, [pc, #268]	@ (8002844 <HAL_GPIO_DeInit+0x1c4>)
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	43db      	mvns	r3, r3
 800273e:	4941      	ldr	r1, [pc, #260]	@ (8002844 <HAL_GPIO_DeInit+0x1c4>)
 8002740:	4013      	ands	r3, r2
 8002742:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002744:	4b3f      	ldr	r3, [pc, #252]	@ (8002844 <HAL_GPIO_DeInit+0x1c4>)
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	43db      	mvns	r3, r3
 800274c:	493d      	ldr	r1, [pc, #244]	@ (8002844 <HAL_GPIO_DeInit+0x1c4>)
 800274e:	4013      	ands	r3, r2
 8002750:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002752:	4b3c      	ldr	r3, [pc, #240]	@ (8002844 <HAL_GPIO_DeInit+0x1c4>)
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	43db      	mvns	r3, r3
 800275a:	493a      	ldr	r1, [pc, #232]	@ (8002844 <HAL_GPIO_DeInit+0x1c4>)
 800275c:	4013      	ands	r3, r2
 800275e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	220f      	movs	r2, #15
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002770:	4a2e      	ldr	r2, [pc, #184]	@ (800282c <HAL_GPIO_DeInit+0x1ac>)
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	089b      	lsrs	r3, r3, #2
 8002776:	3302      	adds	r3, #2
 8002778:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	43da      	mvns	r2, r3
 8002780:	482a      	ldr	r0, [pc, #168]	@ (800282c <HAL_GPIO_DeInit+0x1ac>)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	089b      	lsrs	r3, r3, #2
 8002786:	400a      	ands	r2, r1
 8002788:	3302      	adds	r3, #2
 800278a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	2103      	movs	r1, #3
 8002798:	fa01 f303 	lsl.w	r3, r1, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	401a      	ands	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	08da      	lsrs	r2, r3, #3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3208      	adds	r2, #8
 80027ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	220f      	movs	r2, #15
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	08d2      	lsrs	r2, r2, #3
 80027c4:	4019      	ands	r1, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3208      	adds	r2, #8
 80027ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	2103      	movs	r1, #3
 80027d8:	fa01 f303 	lsl.w	r3, r1, r3
 80027dc:	43db      	mvns	r3, r3
 80027de:	401a      	ands	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	2101      	movs	r1, #1
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	fa01 f303 	lsl.w	r3, r1, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	401a      	ands	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	2103      	movs	r1, #3
 8002802:	fa01 f303 	lsl.w	r3, r1, r3
 8002806:	43db      	mvns	r3, r3
 8002808:	401a      	ands	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	3301      	adds	r3, #1
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	2b0f      	cmp	r3, #15
 8002818:	f67f af40 	bls.w	800269c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800281c:	bf00      	nop
 800281e:	bf00      	nop
 8002820:	371c      	adds	r7, #28
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40013800 	.word	0x40013800
 8002830:	40020000 	.word	0x40020000
 8002834:	40020400 	.word	0x40020400
 8002838:	40020800 	.word	0x40020800
 800283c:	40020c00 	.word	0x40020c00
 8002840:	40021000 	.word	0x40021000
 8002844:	40013c00 	.word	0x40013c00

08002848 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691a      	ldr	r2, [r3, #16]
 8002858:	887b      	ldrh	r3, [r7, #2]
 800285a:	4013      	ands	r3, r2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d002      	beq.n	8002866 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002860:	2301      	movs	r3, #1
 8002862:	73fb      	strb	r3, [r7, #15]
 8002864:	e001      	b.n	800286a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002866:	2300      	movs	r3, #0
 8002868:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800286a:	7bfb      	ldrb	r3, [r7, #15]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	807b      	strh	r3, [r7, #2]
 8002884:	4613      	mov	r3, r2
 8002886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002888:	787b      	ldrb	r3, [r7, #1]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800288e:	887a      	ldrh	r2, [r7, #2]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002894:	e003      	b.n	800289e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002896:	887b      	ldrh	r3, [r7, #2]
 8002898:	041a      	lsls	r2, r3, #16
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	619a      	str	r2, [r3, #24]
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
	...

080028ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e12b      	b.n	8002b16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d106      	bne.n	80028d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7fe ff9c 	bl	8001810 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2224      	movs	r2, #36	@ 0x24
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0201 	bic.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800290e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002910:	f001 fdbe 	bl	8004490 <HAL_RCC_GetPCLK1Freq>
 8002914:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	4a81      	ldr	r2, [pc, #516]	@ (8002b20 <HAL_I2C_Init+0x274>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d807      	bhi.n	8002930 <HAL_I2C_Init+0x84>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4a80      	ldr	r2, [pc, #512]	@ (8002b24 <HAL_I2C_Init+0x278>)
 8002924:	4293      	cmp	r3, r2
 8002926:	bf94      	ite	ls
 8002928:	2301      	movls	r3, #1
 800292a:	2300      	movhi	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	e006      	b.n	800293e <HAL_I2C_Init+0x92>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4a7d      	ldr	r2, [pc, #500]	@ (8002b28 <HAL_I2C_Init+0x27c>)
 8002934:	4293      	cmp	r3, r2
 8002936:	bf94      	ite	ls
 8002938:	2301      	movls	r3, #1
 800293a:	2300      	movhi	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e0e7      	b.n	8002b16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4a78      	ldr	r2, [pc, #480]	@ (8002b2c <HAL_I2C_Init+0x280>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	0c9b      	lsrs	r3, r3, #18
 8002950:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	430a      	orrs	r2, r1
 8002964:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	4a6a      	ldr	r2, [pc, #424]	@ (8002b20 <HAL_I2C_Init+0x274>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d802      	bhi.n	8002980 <HAL_I2C_Init+0xd4>
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	3301      	adds	r3, #1
 800297e:	e009      	b.n	8002994 <HAL_I2C_Init+0xe8>
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002986:	fb02 f303 	mul.w	r3, r2, r3
 800298a:	4a69      	ldr	r2, [pc, #420]	@ (8002b30 <HAL_I2C_Init+0x284>)
 800298c:	fba2 2303 	umull	r2, r3, r2, r3
 8002990:	099b      	lsrs	r3, r3, #6
 8002992:	3301      	adds	r3, #1
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	430b      	orrs	r3, r1
 800299a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80029a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	495c      	ldr	r1, [pc, #368]	@ (8002b20 <HAL_I2C_Init+0x274>)
 80029b0:	428b      	cmp	r3, r1
 80029b2:	d819      	bhi.n	80029e8 <HAL_I2C_Init+0x13c>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	1e59      	subs	r1, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	fbb1 f3f3 	udiv	r3, r1, r3
 80029c2:	1c59      	adds	r1, r3, #1
 80029c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80029c8:	400b      	ands	r3, r1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HAL_I2C_Init+0x138>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1e59      	subs	r1, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80029dc:	3301      	adds	r3, #1
 80029de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e2:	e051      	b.n	8002a88 <HAL_I2C_Init+0x1dc>
 80029e4:	2304      	movs	r3, #4
 80029e6:	e04f      	b.n	8002a88 <HAL_I2C_Init+0x1dc>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d111      	bne.n	8002a14 <HAL_I2C_Init+0x168>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	1e58      	subs	r0, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6859      	ldr	r1, [r3, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	440b      	add	r3, r1
 80029fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a02:	3301      	adds	r3, #1
 8002a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	bf0c      	ite	eq
 8002a0c:	2301      	moveq	r3, #1
 8002a0e:	2300      	movne	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	e012      	b.n	8002a3a <HAL_I2C_Init+0x18e>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	1e58      	subs	r0, r3, #1
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6859      	ldr	r1, [r3, #4]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	0099      	lsls	r1, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	bf0c      	ite	eq
 8002a34:	2301      	moveq	r3, #1
 8002a36:	2300      	movne	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_I2C_Init+0x196>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e022      	b.n	8002a88 <HAL_I2C_Init+0x1dc>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10e      	bne.n	8002a68 <HAL_I2C_Init+0x1bc>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	1e58      	subs	r0, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6859      	ldr	r1, [r3, #4]
 8002a52:	460b      	mov	r3, r1
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	440b      	add	r3, r1
 8002a58:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a66:	e00f      	b.n	8002a88 <HAL_I2C_Init+0x1dc>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	1e58      	subs	r0, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6859      	ldr	r1, [r3, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	0099      	lsls	r1, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a7e:	3301      	adds	r3, #1
 8002a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	6809      	ldr	r1, [r1, #0]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69da      	ldr	r2, [r3, #28]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002ab6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6911      	ldr	r1, [r2, #16]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	68d2      	ldr	r2, [r2, #12]
 8002ac2:	4311      	orrs	r1, r2
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6812      	ldr	r2, [r2, #0]
 8002ac8:	430b      	orrs	r3, r1
 8002aca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	695a      	ldr	r2, [r3, #20]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0201 	orr.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2220      	movs	r2, #32
 8002b02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	000186a0 	.word	0x000186a0
 8002b24:	001e847f 	.word	0x001e847f
 8002b28:	003d08ff 	.word	0x003d08ff
 8002b2c:	431bde83 	.word	0x431bde83
 8002b30:	10624dd3 	.word	0x10624dd3

08002b34 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e021      	b.n	8002b8a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2224      	movs	r2, #36	@ 0x24
 8002b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0201 	bic.w	r2, r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7fe fe9e 	bl	80018a0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	4608      	mov	r0, r1
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	817b      	strh	r3, [r7, #10]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	813b      	strh	r3, [r7, #8]
 8002baa:	4613      	mov	r3, r2
 8002bac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bae:	f7ff facd 	bl	800214c <HAL_GetTick>
 8002bb2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	f040 80d9 	bne.w	8002d74 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	2319      	movs	r3, #25
 8002bc8:	2201      	movs	r2, #1
 8002bca:	496d      	ldr	r1, [pc, #436]	@ (8002d80 <HAL_I2C_Mem_Write+0x1ec>)
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 fdb9 	bl	8003744 <I2C_WaitOnFlagUntilTimeout>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e0cc      	b.n	8002d76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <HAL_I2C_Mem_Write+0x56>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e0c5      	b.n	8002d76 <HAL_I2C_Mem_Write+0x1e2>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d007      	beq.n	8002c10 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2221      	movs	r2, #33	@ 0x21
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2240      	movs	r2, #64	@ 0x40
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a3a      	ldr	r2, [r7, #32]
 8002c3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4a4d      	ldr	r2, [pc, #308]	@ (8002d84 <HAL_I2C_Mem_Write+0x1f0>)
 8002c50:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c52:	88f8      	ldrh	r0, [r7, #6]
 8002c54:	893a      	ldrh	r2, [r7, #8]
 8002c56:	8979      	ldrh	r1, [r7, #10]
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	9301      	str	r3, [sp, #4]
 8002c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	4603      	mov	r3, r0
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 fbf0 	bl	8003448 <I2C_RequestMemoryWrite>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d052      	beq.n	8002d14 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e081      	b.n	8002d76 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 fe7e 	bl	8003978 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00d      	beq.n	8002c9e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d107      	bne.n	8002c9a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e06b      	b.n	8002d76 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca2:	781a      	ldrb	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d11b      	bne.n	8002d14 <HAL_I2C_Mem_Write+0x180>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d017      	beq.n	8002d14 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce8:	781a      	ldrb	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1aa      	bne.n	8002c72 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 fe71 	bl	8003a08 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00d      	beq.n	8002d48 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d107      	bne.n	8002d44 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d42:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e016      	b.n	8002d76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	e000      	b.n	8002d76 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d74:	2302      	movs	r3, #2
  }
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	00100002 	.word	0x00100002
 8002d84:	ffff0000 	.word	0xffff0000

08002d88 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08c      	sub	sp, #48	@ 0x30
 8002d8c:	af02      	add	r7, sp, #8
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	4608      	mov	r0, r1
 8002d92:	4611      	mov	r1, r2
 8002d94:	461a      	mov	r2, r3
 8002d96:	4603      	mov	r3, r0
 8002d98:	817b      	strh	r3, [r7, #10]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	813b      	strh	r3, [r7, #8]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002da2:	f7ff f9d3 	bl	800214c <HAL_GetTick>
 8002da6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b20      	cmp	r3, #32
 8002db2:	f040 8214 	bne.w	80031de <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	2319      	movs	r3, #25
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	497b      	ldr	r1, [pc, #492]	@ (8002fac <HAL_I2C_Mem_Read+0x224>)
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 fcbf 	bl	8003744 <I2C_WaitOnFlagUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e207      	b.n	80031e0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d101      	bne.n	8002dde <HAL_I2C_Mem_Read+0x56>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	e200      	b.n	80031e0 <HAL_I2C_Mem_Read+0x458>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d007      	beq.n	8002e04 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0201 	orr.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2222      	movs	r2, #34	@ 0x22
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2240      	movs	r2, #64	@ 0x40
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002e34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4a5b      	ldr	r2, [pc, #364]	@ (8002fb0 <HAL_I2C_Mem_Read+0x228>)
 8002e44:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e46:	88f8      	ldrh	r0, [r7, #6]
 8002e48:	893a      	ldrh	r2, [r7, #8]
 8002e4a:	8979      	ldrh	r1, [r7, #10]
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4e:	9301      	str	r3, [sp, #4]
 8002e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	4603      	mov	r3, r0
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 fb8c 	bl	8003574 <I2C_RequestMemoryRead>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e1bc      	b.n	80031e0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d113      	bne.n	8002e96 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e6e:	2300      	movs	r3, #0
 8002e70:	623b      	str	r3, [r7, #32]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	623b      	str	r3, [r7, #32]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	623b      	str	r3, [r7, #32]
 8002e82:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	e190      	b.n	80031b8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d11b      	bne.n	8002ed6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61fb      	str	r3, [r7, #28]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	61fb      	str	r3, [r7, #28]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	61fb      	str	r3, [r7, #28]
 8002ec2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	e170      	b.n	80031b8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d11b      	bne.n	8002f16 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002efc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002efe:	2300      	movs	r3, #0
 8002f00:	61bb      	str	r3, [r7, #24]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	61bb      	str	r3, [r7, #24]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	61bb      	str	r3, [r7, #24]
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	e150      	b.n	80031b8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f16:	2300      	movs	r3, #0
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f2c:	e144      	b.n	80031b8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f32:	2b03      	cmp	r3, #3
 8002f34:	f200 80f1 	bhi.w	800311a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d123      	bne.n	8002f88 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f42:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 fda7 	bl	8003a98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e145      	b.n	80031e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691a      	ldr	r2, [r3, #16]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f66:	1c5a      	adds	r2, r3, #1
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f86:	e117      	b.n	80031b8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d14e      	bne.n	800302e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f96:	2200      	movs	r2, #0
 8002f98:	4906      	ldr	r1, [pc, #24]	@ (8002fb4 <HAL_I2C_Mem_Read+0x22c>)
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 fbd2 	bl	8003744 <I2C_WaitOnFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d008      	beq.n	8002fb8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e11a      	b.n	80031e0 <HAL_I2C_Mem_Read+0x458>
 8002faa:	bf00      	nop
 8002fac:	00100002 	.word	0x00100002
 8002fb0:	ffff0000 	.word	0xffff0000
 8002fb4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691a      	ldr	r2, [r3, #16]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003022:	b29b      	uxth	r3, r3
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800302c:	e0c4      	b.n	80031b8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003034:	2200      	movs	r2, #0
 8003036:	496c      	ldr	r1, [pc, #432]	@ (80031e8 <HAL_I2C_Mem_Read+0x460>)
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 fb83 	bl	8003744 <I2C_WaitOnFlagUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e0cb      	b.n	80031e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003056:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003080:	b29b      	uxth	r3, r3
 8003082:	3b01      	subs	r3, #1
 8003084:	b29a      	uxth	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800308a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003090:	2200      	movs	r2, #0
 8003092:	4955      	ldr	r1, [pc, #340]	@ (80031e8 <HAL_I2C_Mem_Read+0x460>)
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 fb55 	bl	8003744 <I2C_WaitOnFlagUntilTimeout>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e09d      	b.n	80031e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691a      	ldr	r2, [r3, #16]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030dc:	b29b      	uxth	r3, r3
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800310e:	b29b      	uxth	r3, r3
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003118:	e04e      	b.n	80031b8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800311a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800311c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 fcba 	bl	8003a98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e058      	b.n	80031e0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	691a      	ldr	r2, [r3, #16]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003138:	b2d2      	uxtb	r2, r2
 800313a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800314a:	3b01      	subs	r3, #1
 800314c:	b29a      	uxth	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003156:	b29b      	uxth	r3, r3
 8003158:	3b01      	subs	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	f003 0304 	and.w	r3, r3, #4
 800316a:	2b04      	cmp	r3, #4
 800316c:	d124      	bne.n	80031b8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003172:	2b03      	cmp	r3, #3
 8003174:	d107      	bne.n	8003186 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003184:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f47f aeb6 	bne.w	8002f2e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	e000      	b.n	80031e0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80031de:	2302      	movs	r3, #2
  }
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3728      	adds	r7, #40	@ 0x28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	00010004 	.word	0x00010004

080031ec <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08a      	sub	sp, #40	@ 0x28
 80031f0:	af02      	add	r7, sp, #8
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	607a      	str	r2, [r7, #4]
 80031f6:	603b      	str	r3, [r7, #0]
 80031f8:	460b      	mov	r3, r1
 80031fa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80031fc:	f7fe ffa6 	bl	800214c <HAL_GetTick>
 8003200:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003202:	2300      	movs	r3, #0
 8003204:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b20      	cmp	r3, #32
 8003210:	f040 8111 	bne.w	8003436 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	2319      	movs	r3, #25
 800321a:	2201      	movs	r2, #1
 800321c:	4988      	ldr	r1, [pc, #544]	@ (8003440 <HAL_I2C_IsDeviceReady+0x254>)
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 fa90 	bl	8003744 <I2C_WaitOnFlagUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800322a:	2302      	movs	r3, #2
 800322c:	e104      	b.n	8003438 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_I2C_IsDeviceReady+0x50>
 8003238:	2302      	movs	r3, #2
 800323a:	e0fd      	b.n	8003438 <HAL_I2C_IsDeviceReady+0x24c>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b01      	cmp	r3, #1
 8003250:	d007      	beq.n	8003262 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f042 0201 	orr.w	r2, r2, #1
 8003260:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003270:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2224      	movs	r2, #36	@ 0x24
 8003276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4a70      	ldr	r2, [pc, #448]	@ (8003444 <HAL_I2C_IsDeviceReady+0x258>)
 8003284:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003294:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2200      	movs	r2, #0
 800329e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 fa4e 	bl	8003744 <I2C_WaitOnFlagUntilTimeout>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00d      	beq.n	80032ca <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032bc:	d103      	bne.n	80032c6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032c4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e0b6      	b.n	8003438 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032ca:	897b      	ldrh	r3, [r7, #10]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	461a      	mov	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032d8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80032da:	f7fe ff37 	bl	800214c <HAL_GetTick>
 80032de:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	bf0c      	ite	eq
 80032ee:	2301      	moveq	r3, #1
 80032f0:	2300      	movne	r3, #0
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003300:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003304:	bf0c      	ite	eq
 8003306:	2301      	moveq	r3, #1
 8003308:	2300      	movne	r3, #0
 800330a:	b2db      	uxtb	r3, r3
 800330c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800330e:	e025      	b.n	800335c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003310:	f7fe ff1c 	bl	800214c <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d302      	bcc.n	8003326 <HAL_I2C_IsDeviceReady+0x13a>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d103      	bne.n	800332e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	22a0      	movs	r2, #160	@ 0xa0
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b02      	cmp	r3, #2
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2300      	movne	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800334e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003352:	bf0c      	ite	eq
 8003354:	2301      	moveq	r3, #1
 8003356:	2300      	movne	r3, #0
 8003358:	b2db      	uxtb	r3, r3
 800335a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2ba0      	cmp	r3, #160	@ 0xa0
 8003366:	d005      	beq.n	8003374 <HAL_I2C_IsDeviceReady+0x188>
 8003368:	7dfb      	ldrb	r3, [r7, #23]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d102      	bne.n	8003374 <HAL_I2C_IsDeviceReady+0x188>
 800336e:	7dbb      	ldrb	r3, [r7, #22]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0cd      	beq.n	8003310 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b02      	cmp	r3, #2
 8003388:	d129      	bne.n	80033de <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003398:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800339a:	2300      	movs	r3, #0
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	613b      	str	r3, [r7, #16]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	2319      	movs	r3, #25
 80033b6:	2201      	movs	r2, #1
 80033b8:	4921      	ldr	r1, [pc, #132]	@ (8003440 <HAL_I2C_IsDeviceReady+0x254>)
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 f9c2 	bl	8003744 <I2C_WaitOnFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e036      	b.n	8003438 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2220      	movs	r2, #32
 80033ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	e02c      	b.n	8003438 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ec:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80033f6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	2319      	movs	r3, #25
 80033fe:	2201      	movs	r2, #1
 8003400:	490f      	ldr	r1, [pc, #60]	@ (8003440 <HAL_I2C_IsDeviceReady+0x254>)
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 f99e 	bl	8003744 <I2C_WaitOnFlagUntilTimeout>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e012      	b.n	8003438 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	3301      	adds	r3, #1
 8003416:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	429a      	cmp	r2, r3
 800341e:	f4ff af32 	bcc.w	8003286 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2220      	movs	r2, #32
 8003426:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003436:	2302      	movs	r3, #2
  }
}
 8003438:	4618      	mov	r0, r3
 800343a:	3720      	adds	r7, #32
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	00100002 	.word	0x00100002
 8003444:	ffff0000 	.word	0xffff0000

08003448 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b088      	sub	sp, #32
 800344c:	af02      	add	r7, sp, #8
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	4608      	mov	r0, r1
 8003452:	4611      	mov	r1, r2
 8003454:	461a      	mov	r2, r3
 8003456:	4603      	mov	r3, r0
 8003458:	817b      	strh	r3, [r7, #10]
 800345a:	460b      	mov	r3, r1
 800345c:	813b      	strh	r3, [r7, #8]
 800345e:	4613      	mov	r3, r2
 8003460:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003470:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	2200      	movs	r2, #0
 800347a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 f960 	bl	8003744 <I2C_WaitOnFlagUntilTimeout>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00d      	beq.n	80034a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003494:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003498:	d103      	bne.n	80034a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e05f      	b.n	8003566 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034a6:	897b      	ldrh	r3, [r7, #10]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	461a      	mov	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80034b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b8:	6a3a      	ldr	r2, [r7, #32]
 80034ba:	492d      	ldr	r1, [pc, #180]	@ (8003570 <I2C_RequestMemoryWrite+0x128>)
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f000 f9bb 	bl	8003838 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e04c      	b.n	8003566 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034cc:	2300      	movs	r3, #0
 80034ce:	617b      	str	r3, [r7, #20]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034e4:	6a39      	ldr	r1, [r7, #32]
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 fa46 	bl	8003978 <I2C_WaitOnTXEFlagUntilTimeout>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00d      	beq.n	800350e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d107      	bne.n	800350a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003508:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e02b      	b.n	8003566 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800350e:	88fb      	ldrh	r3, [r7, #6]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d105      	bne.n	8003520 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003514:	893b      	ldrh	r3, [r7, #8]
 8003516:	b2da      	uxtb	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	611a      	str	r2, [r3, #16]
 800351e:	e021      	b.n	8003564 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003520:	893b      	ldrh	r3, [r7, #8]
 8003522:	0a1b      	lsrs	r3, r3, #8
 8003524:	b29b      	uxth	r3, r3
 8003526:	b2da      	uxtb	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800352e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003530:	6a39      	ldr	r1, [r7, #32]
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 fa20 	bl	8003978 <I2C_WaitOnTXEFlagUntilTimeout>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00d      	beq.n	800355a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003542:	2b04      	cmp	r3, #4
 8003544:	d107      	bne.n	8003556 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003554:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e005      	b.n	8003566 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800355a:	893b      	ldrh	r3, [r7, #8]
 800355c:	b2da      	uxtb	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	00010002 	.word	0x00010002

08003574 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af02      	add	r7, sp, #8
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	4608      	mov	r0, r1
 800357e:	4611      	mov	r1, r2
 8003580:	461a      	mov	r2, r3
 8003582:	4603      	mov	r3, r0
 8003584:	817b      	strh	r3, [r7, #10]
 8003586:	460b      	mov	r3, r1
 8003588:	813b      	strh	r3, [r7, #8]
 800358a:	4613      	mov	r3, r2
 800358c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800359c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 f8c2 	bl	8003744 <I2C_WaitOnFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00d      	beq.n	80035e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035d4:	d103      	bne.n	80035de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e0aa      	b.n	8003738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035e2:	897b      	ldrh	r3, [r7, #10]
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	461a      	mov	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80035f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f4:	6a3a      	ldr	r2, [r7, #32]
 80035f6:	4952      	ldr	r1, [pc, #328]	@ (8003740 <I2C_RequestMemoryRead+0x1cc>)
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 f91d 	bl	8003838 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e097      	b.n	8003738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800361e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003620:	6a39      	ldr	r1, [r7, #32]
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 f9a8 	bl	8003978 <I2C_WaitOnTXEFlagUntilTimeout>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00d      	beq.n	800364a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003632:	2b04      	cmp	r3, #4
 8003634:	d107      	bne.n	8003646 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003644:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e076      	b.n	8003738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800364a:	88fb      	ldrh	r3, [r7, #6]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d105      	bne.n	800365c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003650:	893b      	ldrh	r3, [r7, #8]
 8003652:	b2da      	uxtb	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	611a      	str	r2, [r3, #16]
 800365a:	e021      	b.n	80036a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800365c:	893b      	ldrh	r3, [r7, #8]
 800365e:	0a1b      	lsrs	r3, r3, #8
 8003660:	b29b      	uxth	r3, r3
 8003662:	b2da      	uxtb	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800366a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800366c:	6a39      	ldr	r1, [r7, #32]
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 f982 	bl	8003978 <I2C_WaitOnTXEFlagUntilTimeout>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00d      	beq.n	8003696 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367e:	2b04      	cmp	r3, #4
 8003680:	d107      	bne.n	8003692 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003690:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e050      	b.n	8003738 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003696:	893b      	ldrh	r3, [r7, #8]
 8003698:	b2da      	uxtb	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036a2:	6a39      	ldr	r1, [r7, #32]
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 f967 	bl	8003978 <I2C_WaitOnTXEFlagUntilTimeout>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00d      	beq.n	80036cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d107      	bne.n	80036c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e035      	b.n	8003738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 f82b 	bl	8003744 <I2C_WaitOnFlagUntilTimeout>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00d      	beq.n	8003710 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003702:	d103      	bne.n	800370c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800370a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e013      	b.n	8003738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003710:	897b      	ldrh	r3, [r7, #10]
 8003712:	b2db      	uxtb	r3, r3
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	b2da      	uxtb	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003722:	6a3a      	ldr	r2, [r7, #32]
 8003724:	4906      	ldr	r1, [pc, #24]	@ (8003740 <I2C_RequestMemoryRead+0x1cc>)
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 f886 	bl	8003838 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3718      	adds	r7, #24
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	00010002 	.word	0x00010002

08003744 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	603b      	str	r3, [r7, #0]
 8003750:	4613      	mov	r3, r2
 8003752:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003754:	e048      	b.n	80037e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800375c:	d044      	beq.n	80037e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800375e:	f7fe fcf5 	bl	800214c <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	d302      	bcc.n	8003774 <I2C_WaitOnFlagUntilTimeout+0x30>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d139      	bne.n	80037e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	0c1b      	lsrs	r3, r3, #16
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b01      	cmp	r3, #1
 800377c:	d10d      	bne.n	800379a <I2C_WaitOnFlagUntilTimeout+0x56>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	43da      	mvns	r2, r3
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	4013      	ands	r3, r2
 800378a:	b29b      	uxth	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	bf0c      	ite	eq
 8003790:	2301      	moveq	r3, #1
 8003792:	2300      	movne	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	461a      	mov	r2, r3
 8003798:	e00c      	b.n	80037b4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	43da      	mvns	r2, r3
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	4013      	ands	r3, r2
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	bf0c      	ite	eq
 80037ac:	2301      	moveq	r3, #1
 80037ae:	2300      	movne	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	461a      	mov	r2, r3
 80037b4:	79fb      	ldrb	r3, [r7, #7]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d116      	bne.n	80037e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d4:	f043 0220 	orr.w	r2, r3, #32
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e023      	b.n	8003830 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	0c1b      	lsrs	r3, r3, #16
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d10d      	bne.n	800380e <I2C_WaitOnFlagUntilTimeout+0xca>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	43da      	mvns	r2, r3
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	4013      	ands	r3, r2
 80037fe:	b29b      	uxth	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	bf0c      	ite	eq
 8003804:	2301      	moveq	r3, #1
 8003806:	2300      	movne	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	461a      	mov	r2, r3
 800380c:	e00c      	b.n	8003828 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	43da      	mvns	r2, r3
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	4013      	ands	r3, r2
 800381a:	b29b      	uxth	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	bf0c      	ite	eq
 8003820:	2301      	moveq	r3, #1
 8003822:	2300      	movne	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	461a      	mov	r2, r3
 8003828:	79fb      	ldrb	r3, [r7, #7]
 800382a:	429a      	cmp	r2, r3
 800382c:	d093      	beq.n	8003756 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003846:	e071      	b.n	800392c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003852:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003856:	d123      	bne.n	80038a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003866:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003870:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388c:	f043 0204 	orr.w	r2, r3, #4
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e067      	b.n	8003970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038a6:	d041      	beq.n	800392c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a8:	f7fe fc50 	bl	800214c <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d302      	bcc.n	80038be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d136      	bne.n	800392c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	0c1b      	lsrs	r3, r3, #16
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d10c      	bne.n	80038e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	43da      	mvns	r2, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	4013      	ands	r3, r2
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	bf14      	ite	ne
 80038da:	2301      	movne	r3, #1
 80038dc:	2300      	moveq	r3, #0
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	e00b      	b.n	80038fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	43da      	mvns	r2, r3
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	4013      	ands	r3, r2
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	bf14      	ite	ne
 80038f4:	2301      	movne	r3, #1
 80038f6:	2300      	moveq	r3, #0
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d016      	beq.n	800392c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003918:	f043 0220 	orr.w	r2, r3, #32
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e021      	b.n	8003970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	0c1b      	lsrs	r3, r3, #16
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b01      	cmp	r3, #1
 8003934:	d10c      	bne.n	8003950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	43da      	mvns	r2, r3
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	4013      	ands	r3, r2
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	bf14      	ite	ne
 8003948:	2301      	movne	r3, #1
 800394a:	2300      	moveq	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	e00b      	b.n	8003968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	43da      	mvns	r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	4013      	ands	r3, r2
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	bf14      	ite	ne
 8003962:	2301      	movne	r3, #1
 8003964:	2300      	moveq	r3, #0
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	f47f af6d 	bne.w	8003848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003984:	e034      	b.n	80039f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 f8e3 	bl	8003b52 <I2C_IsAcknowledgeFailed>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e034      	b.n	8003a00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800399c:	d028      	beq.n	80039f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800399e:	f7fe fbd5 	bl	800214c <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d302      	bcc.n	80039b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d11d      	bne.n	80039f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039be:	2b80      	cmp	r3, #128	@ 0x80
 80039c0:	d016      	beq.n	80039f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039dc:	f043 0220 	orr.w	r2, r3, #32
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e007      	b.n	8003a00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039fa:	2b80      	cmp	r3, #128	@ 0x80
 80039fc:	d1c3      	bne.n	8003986 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a14:	e034      	b.n	8003a80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 f89b 	bl	8003b52 <I2C_IsAcknowledgeFailed>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e034      	b.n	8003a90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a2c:	d028      	beq.n	8003a80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a2e:	f7fe fb8d 	bl	800214c <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d302      	bcc.n	8003a44 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d11d      	bne.n	8003a80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	f003 0304 	and.w	r3, r3, #4
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d016      	beq.n	8003a80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6c:	f043 0220 	orr.w	r2, r3, #32
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e007      	b.n	8003a90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	f003 0304 	and.w	r3, r3, #4
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d1c3      	bne.n	8003a16 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003aa4:	e049      	b.n	8003b3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	f003 0310 	and.w	r3, r3, #16
 8003ab0:	2b10      	cmp	r3, #16
 8003ab2:	d119      	bne.n	8003ae8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f06f 0210 	mvn.w	r2, #16
 8003abc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e030      	b.n	8003b4a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae8:	f7fe fb30 	bl	800214c <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d302      	bcc.n	8003afe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d11d      	bne.n	8003b3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b08:	2b40      	cmp	r3, #64	@ 0x40
 8003b0a:	d016      	beq.n	8003b3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b26:	f043 0220 	orr.w	r2, r3, #32
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e007      	b.n	8003b4a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b44:	2b40      	cmp	r3, #64	@ 0x40
 8003b46:	d1ae      	bne.n	8003aa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b68:	d11b      	bne.n	8003ba2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b72:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8e:	f043 0204 	orr.w	r2, r3, #4
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e267      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d075      	beq.n	8003cba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003bce:	4b88      	ldr	r3, [pc, #544]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 030c 	and.w	r3, r3, #12
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d00c      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bda:	4b85      	ldr	r3, [pc, #532]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d112      	bne.n	8003c0c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003be6:	4b82      	ldr	r3, [pc, #520]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bf2:	d10b      	bne.n	8003c0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf4:	4b7e      	ldr	r3, [pc, #504]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d05b      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x108>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d157      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e242      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c14:	d106      	bne.n	8003c24 <HAL_RCC_OscConfig+0x74>
 8003c16:	4b76      	ldr	r3, [pc, #472]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a75      	ldr	r2, [pc, #468]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	e01d      	b.n	8003c60 <HAL_RCC_OscConfig+0xb0>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c2c:	d10c      	bne.n	8003c48 <HAL_RCC_OscConfig+0x98>
 8003c2e:	4b70      	ldr	r3, [pc, #448]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a6f      	ldr	r2, [pc, #444]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	4b6d      	ldr	r3, [pc, #436]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a6c      	ldr	r2, [pc, #432]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	e00b      	b.n	8003c60 <HAL_RCC_OscConfig+0xb0>
 8003c48:	4b69      	ldr	r3, [pc, #420]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a68      	ldr	r2, [pc, #416]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c52:	6013      	str	r3, [r2, #0]
 8003c54:	4b66      	ldr	r3, [pc, #408]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a65      	ldr	r2, [pc, #404]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d013      	beq.n	8003c90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c68:	f7fe fa70 	bl	800214c <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c70:	f7fe fa6c 	bl	800214c <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b64      	cmp	r3, #100	@ 0x64
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e207      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c82:	4b5b      	ldr	r3, [pc, #364]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0f0      	beq.n	8003c70 <HAL_RCC_OscConfig+0xc0>
 8003c8e:	e014      	b.n	8003cba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c90:	f7fe fa5c 	bl	800214c <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c98:	f7fe fa58 	bl	800214c <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b64      	cmp	r3, #100	@ 0x64
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e1f3      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003caa:	4b51      	ldr	r3, [pc, #324]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f0      	bne.n	8003c98 <HAL_RCC_OscConfig+0xe8>
 8003cb6:	e000      	b.n	8003cba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d063      	beq.n	8003d8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003cc6:	4b4a      	ldr	r3, [pc, #296]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 030c 	and.w	r3, r3, #12
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00b      	beq.n	8003cea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cd2:	4b47      	ldr	r3, [pc, #284]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003cda:	2b08      	cmp	r3, #8
 8003cdc:	d11c      	bne.n	8003d18 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cde:	4b44      	ldr	r3, [pc, #272]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d116      	bne.n	8003d18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cea:	4b41      	ldr	r3, [pc, #260]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d005      	beq.n	8003d02 <HAL_RCC_OscConfig+0x152>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d001      	beq.n	8003d02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e1c7      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d02:	4b3b      	ldr	r3, [pc, #236]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	4937      	ldr	r1, [pc, #220]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d16:	e03a      	b.n	8003d8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d020      	beq.n	8003d62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d20:	4b34      	ldr	r3, [pc, #208]	@ (8003df4 <HAL_RCC_OscConfig+0x244>)
 8003d22:	2201      	movs	r2, #1
 8003d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d26:	f7fe fa11 	bl	800214c <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d2e:	f7fe fa0d 	bl	800214c <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e1a8      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d40:	4b2b      	ldr	r3, [pc, #172]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0f0      	beq.n	8003d2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d4c:	4b28      	ldr	r3, [pc, #160]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	4925      	ldr	r1, [pc, #148]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	600b      	str	r3, [r1, #0]
 8003d60:	e015      	b.n	8003d8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d62:	4b24      	ldr	r3, [pc, #144]	@ (8003df4 <HAL_RCC_OscConfig+0x244>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d68:	f7fe f9f0 	bl	800214c <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d70:	f7fe f9ec 	bl	800214c <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e187      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d82:	4b1b      	ldr	r3, [pc, #108]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f0      	bne.n	8003d70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d036      	beq.n	8003e08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d016      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003da2:	4b15      	ldr	r3, [pc, #84]	@ (8003df8 <HAL_RCC_OscConfig+0x248>)
 8003da4:	2201      	movs	r2, #1
 8003da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da8:	f7fe f9d0 	bl	800214c <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003db0:	f7fe f9cc 	bl	800214c <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e167      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8003df0 <HAL_RCC_OscConfig+0x240>)
 8003dc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0f0      	beq.n	8003db0 <HAL_RCC_OscConfig+0x200>
 8003dce:	e01b      	b.n	8003e08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dd0:	4b09      	ldr	r3, [pc, #36]	@ (8003df8 <HAL_RCC_OscConfig+0x248>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd6:	f7fe f9b9 	bl	800214c <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ddc:	e00e      	b.n	8003dfc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dde:	f7fe f9b5 	bl	800214c <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d907      	bls.n	8003dfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e150      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
 8003df0:	40023800 	.word	0x40023800
 8003df4:	42470000 	.word	0x42470000
 8003df8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dfc:	4b88      	ldr	r3, [pc, #544]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003dfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1ea      	bne.n	8003dde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 8097 	beq.w	8003f44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e16:	2300      	movs	r3, #0
 8003e18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e1a:	4b81      	ldr	r3, [pc, #516]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10f      	bne.n	8003e46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e26:	2300      	movs	r3, #0
 8003e28:	60bb      	str	r3, [r7, #8]
 8003e2a:	4b7d      	ldr	r3, [pc, #500]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2e:	4a7c      	ldr	r2, [pc, #496]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e34:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e36:	4b7a      	ldr	r3, [pc, #488]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e3e:	60bb      	str	r3, [r7, #8]
 8003e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e42:	2301      	movs	r3, #1
 8003e44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e46:	4b77      	ldr	r3, [pc, #476]	@ (8004024 <HAL_RCC_OscConfig+0x474>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d118      	bne.n	8003e84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e52:	4b74      	ldr	r3, [pc, #464]	@ (8004024 <HAL_RCC_OscConfig+0x474>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a73      	ldr	r2, [pc, #460]	@ (8004024 <HAL_RCC_OscConfig+0x474>)
 8003e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e5e:	f7fe f975 	bl	800214c <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e66:	f7fe f971 	bl	800214c <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e10c      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e78:	4b6a      	ldr	r3, [pc, #424]	@ (8004024 <HAL_RCC_OscConfig+0x474>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0f0      	beq.n	8003e66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d106      	bne.n	8003e9a <HAL_RCC_OscConfig+0x2ea>
 8003e8c:	4b64      	ldr	r3, [pc, #400]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e90:	4a63      	ldr	r2, [pc, #396]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003e92:	f043 0301 	orr.w	r3, r3, #1
 8003e96:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e98:	e01c      	b.n	8003ed4 <HAL_RCC_OscConfig+0x324>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b05      	cmp	r3, #5
 8003ea0:	d10c      	bne.n	8003ebc <HAL_RCC_OscConfig+0x30c>
 8003ea2:	4b5f      	ldr	r3, [pc, #380]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea6:	4a5e      	ldr	r2, [pc, #376]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003ea8:	f043 0304 	orr.w	r3, r3, #4
 8003eac:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eae:	4b5c      	ldr	r3, [pc, #368]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb2:	4a5b      	ldr	r2, [pc, #364]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003eb4:	f043 0301 	orr.w	r3, r3, #1
 8003eb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eba:	e00b      	b.n	8003ed4 <HAL_RCC_OscConfig+0x324>
 8003ebc:	4b58      	ldr	r3, [pc, #352]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec0:	4a57      	ldr	r2, [pc, #348]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003ec2:	f023 0301 	bic.w	r3, r3, #1
 8003ec6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ec8:	4b55      	ldr	r3, [pc, #340]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003eca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ecc:	4a54      	ldr	r2, [pc, #336]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003ece:	f023 0304 	bic.w	r3, r3, #4
 8003ed2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d015      	beq.n	8003f08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003edc:	f7fe f936 	bl	800214c <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee2:	e00a      	b.n	8003efa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee4:	f7fe f932 	bl	800214c <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e0cb      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efa:	4b49      	ldr	r3, [pc, #292]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0ee      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x334>
 8003f06:	e014      	b.n	8003f32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f08:	f7fe f920 	bl	800214c <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f0e:	e00a      	b.n	8003f26 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f10:	f7fe f91c 	bl	800214c <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e0b5      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f26:	4b3e      	ldr	r3, [pc, #248]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1ee      	bne.n	8003f10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f32:	7dfb      	ldrb	r3, [r7, #23]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d105      	bne.n	8003f44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f38:	4b39      	ldr	r3, [pc, #228]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3c:	4a38      	ldr	r2, [pc, #224]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003f3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f42:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 80a1 	beq.w	8004090 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f4e:	4b34      	ldr	r3, [pc, #208]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 030c 	and.w	r3, r3, #12
 8003f56:	2b08      	cmp	r3, #8
 8003f58:	d05c      	beq.n	8004014 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d141      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f62:	4b31      	ldr	r3, [pc, #196]	@ (8004028 <HAL_RCC_OscConfig+0x478>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f68:	f7fe f8f0 	bl	800214c <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f70:	f7fe f8ec 	bl	800214c <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e087      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f82:	4b27      	ldr	r3, [pc, #156]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69da      	ldr	r2, [r3, #28]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	019b      	lsls	r3, r3, #6
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa4:	085b      	lsrs	r3, r3, #1
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	041b      	lsls	r3, r3, #16
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb0:	061b      	lsls	r3, r3, #24
 8003fb2:	491b      	ldr	r1, [pc, #108]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8004028 <HAL_RCC_OscConfig+0x478>)
 8003fba:	2201      	movs	r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fbe:	f7fe f8c5 	bl	800214c <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc6:	f7fe f8c1 	bl	800214c <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e05c      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd8:	4b11      	ldr	r3, [pc, #68]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0f0      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x416>
 8003fe4:	e054      	b.n	8004090 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe6:	4b10      	ldr	r3, [pc, #64]	@ (8004028 <HAL_RCC_OscConfig+0x478>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fec:	f7fe f8ae 	bl	800214c <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff4:	f7fe f8aa 	bl	800214c <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e045      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004006:	4b06      	ldr	r3, [pc, #24]	@ (8004020 <HAL_RCC_OscConfig+0x470>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f0      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x444>
 8004012:	e03d      	b.n	8004090 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d107      	bne.n	800402c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e038      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
 8004020:	40023800 	.word	0x40023800
 8004024:	40007000 	.word	0x40007000
 8004028:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800402c:	4b1b      	ldr	r3, [pc, #108]	@ (800409c <HAL_RCC_OscConfig+0x4ec>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d028      	beq.n	800408c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004044:	429a      	cmp	r2, r3
 8004046:	d121      	bne.n	800408c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004052:	429a      	cmp	r2, r3
 8004054:	d11a      	bne.n	800408c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800405c:	4013      	ands	r3, r2
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004062:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004064:	4293      	cmp	r3, r2
 8004066:	d111      	bne.n	800408c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004072:	085b      	lsrs	r3, r3, #1
 8004074:	3b01      	subs	r3, #1
 8004076:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004078:	429a      	cmp	r2, r3
 800407a:	d107      	bne.n	800408c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004086:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004088:	429a      	cmp	r2, r3
 800408a:	d001      	beq.n	8004090 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e000      	b.n	8004092 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	40023800 	.word	0x40023800

080040a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e0cc      	b.n	800424e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040b4:	4b68      	ldr	r3, [pc, #416]	@ (8004258 <HAL_RCC_ClockConfig+0x1b8>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d90c      	bls.n	80040dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c2:	4b65      	ldr	r3, [pc, #404]	@ (8004258 <HAL_RCC_ClockConfig+0x1b8>)
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ca:	4b63      	ldr	r3, [pc, #396]	@ (8004258 <HAL_RCC_ClockConfig+0x1b8>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d001      	beq.n	80040dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e0b8      	b.n	800424e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d020      	beq.n	800412a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d005      	beq.n	8004100 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040f4:	4b59      	ldr	r3, [pc, #356]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	4a58      	ldr	r2, [pc, #352]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80040fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800410c:	4b53      	ldr	r3, [pc, #332]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	4a52      	ldr	r2, [pc, #328]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004112:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004116:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004118:	4b50      	ldr	r3, [pc, #320]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	494d      	ldr	r1, [pc, #308]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	4313      	orrs	r3, r2
 8004128:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d044      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d107      	bne.n	800414e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413e:	4b47      	ldr	r3, [pc, #284]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d119      	bne.n	800417e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e07f      	b.n	800424e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b02      	cmp	r3, #2
 8004154:	d003      	beq.n	800415e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800415a:	2b03      	cmp	r3, #3
 800415c:	d107      	bne.n	800416e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800415e:	4b3f      	ldr	r3, [pc, #252]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d109      	bne.n	800417e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e06f      	b.n	800424e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800416e:	4b3b      	ldr	r3, [pc, #236]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e067      	b.n	800424e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800417e:	4b37      	ldr	r3, [pc, #220]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f023 0203 	bic.w	r2, r3, #3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	4934      	ldr	r1, [pc, #208]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 800418c:	4313      	orrs	r3, r2
 800418e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004190:	f7fd ffdc 	bl	800214c <HAL_GetTick>
 8004194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004196:	e00a      	b.n	80041ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004198:	f7fd ffd8 	bl	800214c <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e04f      	b.n	800424e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ae:	4b2b      	ldr	r3, [pc, #172]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 020c 	and.w	r2, r3, #12
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	429a      	cmp	r2, r3
 80041be:	d1eb      	bne.n	8004198 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041c0:	4b25      	ldr	r3, [pc, #148]	@ (8004258 <HAL_RCC_ClockConfig+0x1b8>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0307 	and.w	r3, r3, #7
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d20c      	bcs.n	80041e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ce:	4b22      	ldr	r3, [pc, #136]	@ (8004258 <HAL_RCC_ClockConfig+0x1b8>)
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	b2d2      	uxtb	r2, r2
 80041d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d6:	4b20      	ldr	r3, [pc, #128]	@ (8004258 <HAL_RCC_ClockConfig+0x1b8>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d001      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e032      	b.n	800424e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d008      	beq.n	8004206 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041f4:	4b19      	ldr	r3, [pc, #100]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	4916      	ldr	r1, [pc, #88]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	4313      	orrs	r3, r2
 8004204:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b00      	cmp	r3, #0
 8004210:	d009      	beq.n	8004226 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004212:	4b12      	ldr	r3, [pc, #72]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	490e      	ldr	r1, [pc, #56]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	4313      	orrs	r3, r2
 8004224:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004226:	f000 f821 	bl	800426c <HAL_RCC_GetSysClockFreq>
 800422a:	4602      	mov	r2, r0
 800422c:	4b0b      	ldr	r3, [pc, #44]	@ (800425c <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	091b      	lsrs	r3, r3, #4
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	490a      	ldr	r1, [pc, #40]	@ (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 8004238:	5ccb      	ldrb	r3, [r1, r3]
 800423a:	fa22 f303 	lsr.w	r3, r2, r3
 800423e:	4a09      	ldr	r2, [pc, #36]	@ (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004242:	4b09      	ldr	r3, [pc, #36]	@ (8004268 <HAL_RCC_ClockConfig+0x1c8>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4618      	mov	r0, r3
 8004248:	f7fd ff3c 	bl	80020c4 <HAL_InitTick>

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	40023c00 	.word	0x40023c00
 800425c:	40023800 	.word	0x40023800
 8004260:	08007f04 	.word	0x08007f04
 8004264:	20000000 	.word	0x20000000
 8004268:	20000004 	.word	0x20000004

0800426c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800426c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004270:	b094      	sub	sp, #80	@ 0x50
 8004272:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004284:	4b79      	ldr	r3, [pc, #484]	@ (800446c <HAL_RCC_GetSysClockFreq+0x200>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f003 030c 	and.w	r3, r3, #12
 800428c:	2b08      	cmp	r3, #8
 800428e:	d00d      	beq.n	80042ac <HAL_RCC_GetSysClockFreq+0x40>
 8004290:	2b08      	cmp	r3, #8
 8004292:	f200 80e1 	bhi.w	8004458 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004296:	2b00      	cmp	r3, #0
 8004298:	d002      	beq.n	80042a0 <HAL_RCC_GetSysClockFreq+0x34>
 800429a:	2b04      	cmp	r3, #4
 800429c:	d003      	beq.n	80042a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800429e:	e0db      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042a0:	4b73      	ldr	r3, [pc, #460]	@ (8004470 <HAL_RCC_GetSysClockFreq+0x204>)
 80042a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042a4:	e0db      	b.n	800445e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042a6:	4b73      	ldr	r3, [pc, #460]	@ (8004474 <HAL_RCC_GetSysClockFreq+0x208>)
 80042a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042aa:	e0d8      	b.n	800445e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042ac:	4b6f      	ldr	r3, [pc, #444]	@ (800446c <HAL_RCC_GetSysClockFreq+0x200>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042b4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042b6:	4b6d      	ldr	r3, [pc, #436]	@ (800446c <HAL_RCC_GetSysClockFreq+0x200>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d063      	beq.n	800438a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042c2:	4b6a      	ldr	r3, [pc, #424]	@ (800446c <HAL_RCC_GetSysClockFreq+0x200>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	099b      	lsrs	r3, r3, #6
 80042c8:	2200      	movs	r2, #0
 80042ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80042ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80042d6:	2300      	movs	r3, #0
 80042d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80042da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80042de:	4622      	mov	r2, r4
 80042e0:	462b      	mov	r3, r5
 80042e2:	f04f 0000 	mov.w	r0, #0
 80042e6:	f04f 0100 	mov.w	r1, #0
 80042ea:	0159      	lsls	r1, r3, #5
 80042ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042f0:	0150      	lsls	r0, r2, #5
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4621      	mov	r1, r4
 80042f8:	1a51      	subs	r1, r2, r1
 80042fa:	6139      	str	r1, [r7, #16]
 80042fc:	4629      	mov	r1, r5
 80042fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	f04f 0200 	mov.w	r2, #0
 8004308:	f04f 0300 	mov.w	r3, #0
 800430c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004310:	4659      	mov	r1, fp
 8004312:	018b      	lsls	r3, r1, #6
 8004314:	4651      	mov	r1, sl
 8004316:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800431a:	4651      	mov	r1, sl
 800431c:	018a      	lsls	r2, r1, #6
 800431e:	4651      	mov	r1, sl
 8004320:	ebb2 0801 	subs.w	r8, r2, r1
 8004324:	4659      	mov	r1, fp
 8004326:	eb63 0901 	sbc.w	r9, r3, r1
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	f04f 0300 	mov.w	r3, #0
 8004332:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004336:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800433a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800433e:	4690      	mov	r8, r2
 8004340:	4699      	mov	r9, r3
 8004342:	4623      	mov	r3, r4
 8004344:	eb18 0303 	adds.w	r3, r8, r3
 8004348:	60bb      	str	r3, [r7, #8]
 800434a:	462b      	mov	r3, r5
 800434c:	eb49 0303 	adc.w	r3, r9, r3
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800435e:	4629      	mov	r1, r5
 8004360:	024b      	lsls	r3, r1, #9
 8004362:	4621      	mov	r1, r4
 8004364:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004368:	4621      	mov	r1, r4
 800436a:	024a      	lsls	r2, r1, #9
 800436c:	4610      	mov	r0, r2
 800436e:	4619      	mov	r1, r3
 8004370:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004372:	2200      	movs	r2, #0
 8004374:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004376:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004378:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800437c:	f7fc fc6c 	bl	8000c58 <__aeabi_uldivmod>
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	4613      	mov	r3, r2
 8004386:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004388:	e058      	b.n	800443c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800438a:	4b38      	ldr	r3, [pc, #224]	@ (800446c <HAL_RCC_GetSysClockFreq+0x200>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	099b      	lsrs	r3, r3, #6
 8004390:	2200      	movs	r2, #0
 8004392:	4618      	mov	r0, r3
 8004394:	4611      	mov	r1, r2
 8004396:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800439a:	623b      	str	r3, [r7, #32]
 800439c:	2300      	movs	r3, #0
 800439e:	627b      	str	r3, [r7, #36]	@ 0x24
 80043a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043a4:	4642      	mov	r2, r8
 80043a6:	464b      	mov	r3, r9
 80043a8:	f04f 0000 	mov.w	r0, #0
 80043ac:	f04f 0100 	mov.w	r1, #0
 80043b0:	0159      	lsls	r1, r3, #5
 80043b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043b6:	0150      	lsls	r0, r2, #5
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4641      	mov	r1, r8
 80043be:	ebb2 0a01 	subs.w	sl, r2, r1
 80043c2:	4649      	mov	r1, r9
 80043c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	f04f 0300 	mov.w	r3, #0
 80043d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043dc:	ebb2 040a 	subs.w	r4, r2, sl
 80043e0:	eb63 050b 	sbc.w	r5, r3, fp
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	00eb      	lsls	r3, r5, #3
 80043ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043f2:	00e2      	lsls	r2, r4, #3
 80043f4:	4614      	mov	r4, r2
 80043f6:	461d      	mov	r5, r3
 80043f8:	4643      	mov	r3, r8
 80043fa:	18e3      	adds	r3, r4, r3
 80043fc:	603b      	str	r3, [r7, #0]
 80043fe:	464b      	mov	r3, r9
 8004400:	eb45 0303 	adc.w	r3, r5, r3
 8004404:	607b      	str	r3, [r7, #4]
 8004406:	f04f 0200 	mov.w	r2, #0
 800440a:	f04f 0300 	mov.w	r3, #0
 800440e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004412:	4629      	mov	r1, r5
 8004414:	028b      	lsls	r3, r1, #10
 8004416:	4621      	mov	r1, r4
 8004418:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800441c:	4621      	mov	r1, r4
 800441e:	028a      	lsls	r2, r1, #10
 8004420:	4610      	mov	r0, r2
 8004422:	4619      	mov	r1, r3
 8004424:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004426:	2200      	movs	r2, #0
 8004428:	61bb      	str	r3, [r7, #24]
 800442a:	61fa      	str	r2, [r7, #28]
 800442c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004430:	f7fc fc12 	bl	8000c58 <__aeabi_uldivmod>
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	4613      	mov	r3, r2
 800443a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800443c:	4b0b      	ldr	r3, [pc, #44]	@ (800446c <HAL_RCC_GetSysClockFreq+0x200>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	0c1b      	lsrs	r3, r3, #16
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	3301      	adds	r3, #1
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800444c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800444e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004450:	fbb2 f3f3 	udiv	r3, r2, r3
 8004454:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004456:	e002      	b.n	800445e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004458:	4b05      	ldr	r3, [pc, #20]	@ (8004470 <HAL_RCC_GetSysClockFreq+0x204>)
 800445a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800445c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800445e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004460:	4618      	mov	r0, r3
 8004462:	3750      	adds	r7, #80	@ 0x50
 8004464:	46bd      	mov	sp, r7
 8004466:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800446a:	bf00      	nop
 800446c:	40023800 	.word	0x40023800
 8004470:	00f42400 	.word	0x00f42400
 8004474:	007a1200 	.word	0x007a1200

08004478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800447c:	4b03      	ldr	r3, [pc, #12]	@ (800448c <HAL_RCC_GetHCLKFreq+0x14>)
 800447e:	681b      	ldr	r3, [r3, #0]
}
 8004480:	4618      	mov	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	20000000 	.word	0x20000000

08004490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004494:	f7ff fff0 	bl	8004478 <HAL_RCC_GetHCLKFreq>
 8004498:	4602      	mov	r2, r0
 800449a:	4b05      	ldr	r3, [pc, #20]	@ (80044b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	0a9b      	lsrs	r3, r3, #10
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	4903      	ldr	r1, [pc, #12]	@ (80044b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044a6:	5ccb      	ldrb	r3, [r1, r3]
 80044a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40023800 	.word	0x40023800
 80044b4:	08007f14 	.word	0x08007f14

080044b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044bc:	f7ff ffdc 	bl	8004478 <HAL_RCC_GetHCLKFreq>
 80044c0:	4602      	mov	r2, r0
 80044c2:	4b05      	ldr	r3, [pc, #20]	@ (80044d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	0b5b      	lsrs	r3, r3, #13
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	4903      	ldr	r1, [pc, #12]	@ (80044dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80044ce:	5ccb      	ldrb	r3, [r1, r3]
 80044d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40023800 	.word	0x40023800
 80044dc:	08007f14 	.word	0x08007f14

080044e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e042      	b.n	8004578 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d106      	bne.n	800450c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7fd fd48 	bl	8001f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2224      	movs	r2, #36	@ 0x24
 8004510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68da      	ldr	r2, [r3, #12]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004522:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f973 	bl	8004810 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	691a      	ldr	r2, [r3, #16]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004538:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695a      	ldr	r2, [r3, #20]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004548:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68da      	ldr	r2, [r3, #12]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004558:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2220      	movs	r2, #32
 8004564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2220      	movs	r2, #32
 800456c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08a      	sub	sp, #40	@ 0x28
 8004584:	af02      	add	r7, sp, #8
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	4613      	mov	r3, r2
 800458e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004590:	2300      	movs	r3, #0
 8004592:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b20      	cmp	r3, #32
 800459e:	d175      	bne.n	800468c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <HAL_UART_Transmit+0x2c>
 80045a6:	88fb      	ldrh	r3, [r7, #6]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e06e      	b.n	800468e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2221      	movs	r2, #33	@ 0x21
 80045ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045be:	f7fd fdc5 	bl	800214c <HAL_GetTick>
 80045c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	88fa      	ldrh	r2, [r7, #6]
 80045c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	88fa      	ldrh	r2, [r7, #6]
 80045ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045d8:	d108      	bne.n	80045ec <HAL_UART_Transmit+0x6c>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d104      	bne.n	80045ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80045e2:	2300      	movs	r3, #0
 80045e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	61bb      	str	r3, [r7, #24]
 80045ea:	e003      	b.n	80045f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045f0:	2300      	movs	r3, #0
 80045f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045f4:	e02e      	b.n	8004654 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2200      	movs	r2, #0
 80045fe:	2180      	movs	r1, #128	@ 0x80
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 f848 	bl	8004696 <UART_WaitOnFlagUntilTimeout>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d005      	beq.n	8004618 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e03a      	b.n	800468e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10b      	bne.n	8004636 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	881b      	ldrh	r3, [r3, #0]
 8004622:	461a      	mov	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800462c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	3302      	adds	r3, #2
 8004632:	61bb      	str	r3, [r7, #24]
 8004634:	e007      	b.n	8004646 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	781a      	ldrb	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	3301      	adds	r3, #1
 8004644:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800464a:	b29b      	uxth	r3, r3
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1cb      	bne.n	80045f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	2200      	movs	r2, #0
 8004666:	2140      	movs	r1, #64	@ 0x40
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 f814 	bl	8004696 <UART_WaitOnFlagUntilTimeout>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d005      	beq.n	8004680 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2220      	movs	r2, #32
 8004678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e006      	b.n	800468e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2220      	movs	r2, #32
 8004684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	e000      	b.n	800468e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800468c:	2302      	movs	r3, #2
  }
}
 800468e:	4618      	mov	r0, r3
 8004690:	3720      	adds	r7, #32
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b086      	sub	sp, #24
 800469a:	af00      	add	r7, sp, #0
 800469c:	60f8      	str	r0, [r7, #12]
 800469e:	60b9      	str	r1, [r7, #8]
 80046a0:	603b      	str	r3, [r7, #0]
 80046a2:	4613      	mov	r3, r2
 80046a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046a6:	e03b      	b.n	8004720 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046ae:	d037      	beq.n	8004720 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b0:	f7fd fd4c 	bl	800214c <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	6a3a      	ldr	r2, [r7, #32]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d302      	bcc.n	80046c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e03a      	b.n	8004740 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d023      	beq.n	8004720 <UART_WaitOnFlagUntilTimeout+0x8a>
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2b80      	cmp	r3, #128	@ 0x80
 80046dc:	d020      	beq.n	8004720 <UART_WaitOnFlagUntilTimeout+0x8a>
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2b40      	cmp	r3, #64	@ 0x40
 80046e2:	d01d      	beq.n	8004720 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0308 	and.w	r3, r3, #8
 80046ee:	2b08      	cmp	r3, #8
 80046f0:	d116      	bne.n	8004720 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80046f2:	2300      	movs	r3, #0
 80046f4:	617b      	str	r3, [r7, #20]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	617b      	str	r3, [r7, #20]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	617b      	str	r3, [r7, #20]
 8004706:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 f81d 	bl	8004748 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2208      	movs	r2, #8
 8004712:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e00f      	b.n	8004740 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	4013      	ands	r3, r2
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	429a      	cmp	r2, r3
 800472e:	bf0c      	ite	eq
 8004730:	2301      	moveq	r3, #1
 8004732:	2300      	movne	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	461a      	mov	r2, r3
 8004738:	79fb      	ldrb	r3, [r7, #7]
 800473a:	429a      	cmp	r2, r3
 800473c:	d0b4      	beq.n	80046a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004748:	b480      	push	{r7}
 800474a:	b095      	sub	sp, #84	@ 0x54
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	330c      	adds	r3, #12
 8004756:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800475a:	e853 3f00 	ldrex	r3, [r3]
 800475e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004762:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	330c      	adds	r3, #12
 800476e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004770:	643a      	str	r2, [r7, #64]	@ 0x40
 8004772:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004774:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004776:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004778:	e841 2300 	strex	r3, r2, [r1]
 800477c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800477e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1e5      	bne.n	8004750 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3314      	adds	r3, #20
 800478a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	e853 3f00 	ldrex	r3, [r3]
 8004792:	61fb      	str	r3, [r7, #28]
   return(result);
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	f023 0301 	bic.w	r3, r3, #1
 800479a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	3314      	adds	r3, #20
 80047a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047ac:	e841 2300 	strex	r3, r2, [r1]
 80047b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1e5      	bne.n	8004784 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d119      	bne.n	80047f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	330c      	adds	r3, #12
 80047c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	e853 3f00 	ldrex	r3, [r3]
 80047ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	f023 0310 	bic.w	r3, r3, #16
 80047d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	330c      	adds	r3, #12
 80047de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047e0:	61ba      	str	r2, [r7, #24]
 80047e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e4:	6979      	ldr	r1, [r7, #20]
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	e841 2300 	strex	r3, r2, [r1]
 80047ec:	613b      	str	r3, [r7, #16]
   return(result);
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1e5      	bne.n	80047c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004802:	bf00      	nop
 8004804:	3754      	adds	r7, #84	@ 0x54
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
	...

08004810 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004814:	b0c0      	sub	sp, #256	@ 0x100
 8004816:	af00      	add	r7, sp, #0
 8004818:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800481c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800482c:	68d9      	ldr	r1, [r3, #12]
 800482e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	ea40 0301 	orr.w	r3, r0, r1
 8004838:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800483a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	431a      	orrs	r2, r3
 8004848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	431a      	orrs	r2, r3
 8004850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	4313      	orrs	r3, r2
 8004858:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800485c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004868:	f021 010c 	bic.w	r1, r1, #12
 800486c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004876:	430b      	orrs	r3, r1
 8004878:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800487a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800488a:	6999      	ldr	r1, [r3, #24]
 800488c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	ea40 0301 	orr.w	r3, r0, r1
 8004896:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	4b8f      	ldr	r3, [pc, #572]	@ (8004adc <UART_SetConfig+0x2cc>)
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d005      	beq.n	80048b0 <UART_SetConfig+0xa0>
 80048a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	4b8d      	ldr	r3, [pc, #564]	@ (8004ae0 <UART_SetConfig+0x2d0>)
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d104      	bne.n	80048ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048b0:	f7ff fe02 	bl	80044b8 <HAL_RCC_GetPCLK2Freq>
 80048b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80048b8:	e003      	b.n	80048c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048ba:	f7ff fde9 	bl	8004490 <HAL_RCC_GetPCLK1Freq>
 80048be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c6:	69db      	ldr	r3, [r3, #28]
 80048c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048cc:	f040 810c 	bne.w	8004ae8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048d4:	2200      	movs	r2, #0
 80048d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80048da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80048de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80048e2:	4622      	mov	r2, r4
 80048e4:	462b      	mov	r3, r5
 80048e6:	1891      	adds	r1, r2, r2
 80048e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80048ea:	415b      	adcs	r3, r3
 80048ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80048f2:	4621      	mov	r1, r4
 80048f4:	eb12 0801 	adds.w	r8, r2, r1
 80048f8:	4629      	mov	r1, r5
 80048fa:	eb43 0901 	adc.w	r9, r3, r1
 80048fe:	f04f 0200 	mov.w	r2, #0
 8004902:	f04f 0300 	mov.w	r3, #0
 8004906:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800490a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800490e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004912:	4690      	mov	r8, r2
 8004914:	4699      	mov	r9, r3
 8004916:	4623      	mov	r3, r4
 8004918:	eb18 0303 	adds.w	r3, r8, r3
 800491c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004920:	462b      	mov	r3, r5
 8004922:	eb49 0303 	adc.w	r3, r9, r3
 8004926:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800492a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004936:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800493a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800493e:	460b      	mov	r3, r1
 8004940:	18db      	adds	r3, r3, r3
 8004942:	653b      	str	r3, [r7, #80]	@ 0x50
 8004944:	4613      	mov	r3, r2
 8004946:	eb42 0303 	adc.w	r3, r2, r3
 800494a:	657b      	str	r3, [r7, #84]	@ 0x54
 800494c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004950:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004954:	f7fc f980 	bl	8000c58 <__aeabi_uldivmod>
 8004958:	4602      	mov	r2, r0
 800495a:	460b      	mov	r3, r1
 800495c:	4b61      	ldr	r3, [pc, #388]	@ (8004ae4 <UART_SetConfig+0x2d4>)
 800495e:	fba3 2302 	umull	r2, r3, r3, r2
 8004962:	095b      	lsrs	r3, r3, #5
 8004964:	011c      	lsls	r4, r3, #4
 8004966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800496a:	2200      	movs	r2, #0
 800496c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004970:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004974:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004978:	4642      	mov	r2, r8
 800497a:	464b      	mov	r3, r9
 800497c:	1891      	adds	r1, r2, r2
 800497e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004980:	415b      	adcs	r3, r3
 8004982:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004984:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004988:	4641      	mov	r1, r8
 800498a:	eb12 0a01 	adds.w	sl, r2, r1
 800498e:	4649      	mov	r1, r9
 8004990:	eb43 0b01 	adc.w	fp, r3, r1
 8004994:	f04f 0200 	mov.w	r2, #0
 8004998:	f04f 0300 	mov.w	r3, #0
 800499c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049a8:	4692      	mov	sl, r2
 80049aa:	469b      	mov	fp, r3
 80049ac:	4643      	mov	r3, r8
 80049ae:	eb1a 0303 	adds.w	r3, sl, r3
 80049b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049b6:	464b      	mov	r3, r9
 80049b8:	eb4b 0303 	adc.w	r3, fp, r3
 80049bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80049c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80049d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80049d4:	460b      	mov	r3, r1
 80049d6:	18db      	adds	r3, r3, r3
 80049d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80049da:	4613      	mov	r3, r2
 80049dc:	eb42 0303 	adc.w	r3, r2, r3
 80049e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80049e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80049e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80049ea:	f7fc f935 	bl	8000c58 <__aeabi_uldivmod>
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	4611      	mov	r1, r2
 80049f4:	4b3b      	ldr	r3, [pc, #236]	@ (8004ae4 <UART_SetConfig+0x2d4>)
 80049f6:	fba3 2301 	umull	r2, r3, r3, r1
 80049fa:	095b      	lsrs	r3, r3, #5
 80049fc:	2264      	movs	r2, #100	@ 0x64
 80049fe:	fb02 f303 	mul.w	r3, r2, r3
 8004a02:	1acb      	subs	r3, r1, r3
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004a0a:	4b36      	ldr	r3, [pc, #216]	@ (8004ae4 <UART_SetConfig+0x2d4>)
 8004a0c:	fba3 2302 	umull	r2, r3, r3, r2
 8004a10:	095b      	lsrs	r3, r3, #5
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004a18:	441c      	add	r4, r3
 8004a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004a28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004a2c:	4642      	mov	r2, r8
 8004a2e:	464b      	mov	r3, r9
 8004a30:	1891      	adds	r1, r2, r2
 8004a32:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004a34:	415b      	adcs	r3, r3
 8004a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004a3c:	4641      	mov	r1, r8
 8004a3e:	1851      	adds	r1, r2, r1
 8004a40:	6339      	str	r1, [r7, #48]	@ 0x30
 8004a42:	4649      	mov	r1, r9
 8004a44:	414b      	adcs	r3, r1
 8004a46:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	f04f 0300 	mov.w	r3, #0
 8004a50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004a54:	4659      	mov	r1, fp
 8004a56:	00cb      	lsls	r3, r1, #3
 8004a58:	4651      	mov	r1, sl
 8004a5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a5e:	4651      	mov	r1, sl
 8004a60:	00ca      	lsls	r2, r1, #3
 8004a62:	4610      	mov	r0, r2
 8004a64:	4619      	mov	r1, r3
 8004a66:	4603      	mov	r3, r0
 8004a68:	4642      	mov	r2, r8
 8004a6a:	189b      	adds	r3, r3, r2
 8004a6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a70:	464b      	mov	r3, r9
 8004a72:	460a      	mov	r2, r1
 8004a74:	eb42 0303 	adc.w	r3, r2, r3
 8004a78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a88:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a90:	460b      	mov	r3, r1
 8004a92:	18db      	adds	r3, r3, r3
 8004a94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a96:	4613      	mov	r3, r2
 8004a98:	eb42 0303 	adc.w	r3, r2, r3
 8004a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004aa2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004aa6:	f7fc f8d7 	bl	8000c58 <__aeabi_uldivmod>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae4 <UART_SetConfig+0x2d4>)
 8004ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	2164      	movs	r1, #100	@ 0x64
 8004ab8:	fb01 f303 	mul.w	r3, r1, r3
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	3332      	adds	r3, #50	@ 0x32
 8004ac2:	4a08      	ldr	r2, [pc, #32]	@ (8004ae4 <UART_SetConfig+0x2d4>)
 8004ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac8:	095b      	lsrs	r3, r3, #5
 8004aca:	f003 0207 	and.w	r2, r3, #7
 8004ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4422      	add	r2, r4
 8004ad6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ad8:	e106      	b.n	8004ce8 <UART_SetConfig+0x4d8>
 8004ada:	bf00      	nop
 8004adc:	40011000 	.word	0x40011000
 8004ae0:	40011400 	.word	0x40011400
 8004ae4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aec:	2200      	movs	r2, #0
 8004aee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004af2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004af6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004afa:	4642      	mov	r2, r8
 8004afc:	464b      	mov	r3, r9
 8004afe:	1891      	adds	r1, r2, r2
 8004b00:	6239      	str	r1, [r7, #32]
 8004b02:	415b      	adcs	r3, r3
 8004b04:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b0a:	4641      	mov	r1, r8
 8004b0c:	1854      	adds	r4, r2, r1
 8004b0e:	4649      	mov	r1, r9
 8004b10:	eb43 0501 	adc.w	r5, r3, r1
 8004b14:	f04f 0200 	mov.w	r2, #0
 8004b18:	f04f 0300 	mov.w	r3, #0
 8004b1c:	00eb      	lsls	r3, r5, #3
 8004b1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b22:	00e2      	lsls	r2, r4, #3
 8004b24:	4614      	mov	r4, r2
 8004b26:	461d      	mov	r5, r3
 8004b28:	4643      	mov	r3, r8
 8004b2a:	18e3      	adds	r3, r4, r3
 8004b2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004b30:	464b      	mov	r3, r9
 8004b32:	eb45 0303 	adc.w	r3, r5, r3
 8004b36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b4a:	f04f 0200 	mov.w	r2, #0
 8004b4e:	f04f 0300 	mov.w	r3, #0
 8004b52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b56:	4629      	mov	r1, r5
 8004b58:	008b      	lsls	r3, r1, #2
 8004b5a:	4621      	mov	r1, r4
 8004b5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b60:	4621      	mov	r1, r4
 8004b62:	008a      	lsls	r2, r1, #2
 8004b64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004b68:	f7fc f876 	bl	8000c58 <__aeabi_uldivmod>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4b60      	ldr	r3, [pc, #384]	@ (8004cf4 <UART_SetConfig+0x4e4>)
 8004b72:	fba3 2302 	umull	r2, r3, r3, r2
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	011c      	lsls	r4, r3, #4
 8004b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b8c:	4642      	mov	r2, r8
 8004b8e:	464b      	mov	r3, r9
 8004b90:	1891      	adds	r1, r2, r2
 8004b92:	61b9      	str	r1, [r7, #24]
 8004b94:	415b      	adcs	r3, r3
 8004b96:	61fb      	str	r3, [r7, #28]
 8004b98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b9c:	4641      	mov	r1, r8
 8004b9e:	1851      	adds	r1, r2, r1
 8004ba0:	6139      	str	r1, [r7, #16]
 8004ba2:	4649      	mov	r1, r9
 8004ba4:	414b      	adcs	r3, r1
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bb4:	4659      	mov	r1, fp
 8004bb6:	00cb      	lsls	r3, r1, #3
 8004bb8:	4651      	mov	r1, sl
 8004bba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bbe:	4651      	mov	r1, sl
 8004bc0:	00ca      	lsls	r2, r1, #3
 8004bc2:	4610      	mov	r0, r2
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	4642      	mov	r2, r8
 8004bca:	189b      	adds	r3, r3, r2
 8004bcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004bd0:	464b      	mov	r3, r9
 8004bd2:	460a      	mov	r2, r1
 8004bd4:	eb42 0303 	adc.w	r3, r2, r3
 8004bd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004be6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004be8:	f04f 0200 	mov.w	r2, #0
 8004bec:	f04f 0300 	mov.w	r3, #0
 8004bf0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004bf4:	4649      	mov	r1, r9
 8004bf6:	008b      	lsls	r3, r1, #2
 8004bf8:	4641      	mov	r1, r8
 8004bfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bfe:	4641      	mov	r1, r8
 8004c00:	008a      	lsls	r2, r1, #2
 8004c02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004c06:	f7fc f827 	bl	8000c58 <__aeabi_uldivmod>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4611      	mov	r1, r2
 8004c10:	4b38      	ldr	r3, [pc, #224]	@ (8004cf4 <UART_SetConfig+0x4e4>)
 8004c12:	fba3 2301 	umull	r2, r3, r3, r1
 8004c16:	095b      	lsrs	r3, r3, #5
 8004c18:	2264      	movs	r2, #100	@ 0x64
 8004c1a:	fb02 f303 	mul.w	r3, r2, r3
 8004c1e:	1acb      	subs	r3, r1, r3
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	3332      	adds	r3, #50	@ 0x32
 8004c24:	4a33      	ldr	r2, [pc, #204]	@ (8004cf4 <UART_SetConfig+0x4e4>)
 8004c26:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c30:	441c      	add	r4, r3
 8004c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c36:	2200      	movs	r2, #0
 8004c38:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c3a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004c40:	4642      	mov	r2, r8
 8004c42:	464b      	mov	r3, r9
 8004c44:	1891      	adds	r1, r2, r2
 8004c46:	60b9      	str	r1, [r7, #8]
 8004c48:	415b      	adcs	r3, r3
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c50:	4641      	mov	r1, r8
 8004c52:	1851      	adds	r1, r2, r1
 8004c54:	6039      	str	r1, [r7, #0]
 8004c56:	4649      	mov	r1, r9
 8004c58:	414b      	adcs	r3, r1
 8004c5a:	607b      	str	r3, [r7, #4]
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c68:	4659      	mov	r1, fp
 8004c6a:	00cb      	lsls	r3, r1, #3
 8004c6c:	4651      	mov	r1, sl
 8004c6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c72:	4651      	mov	r1, sl
 8004c74:	00ca      	lsls	r2, r1, #3
 8004c76:	4610      	mov	r0, r2
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	4642      	mov	r2, r8
 8004c7e:	189b      	adds	r3, r3, r2
 8004c80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c82:	464b      	mov	r3, r9
 8004c84:	460a      	mov	r2, r1
 8004c86:	eb42 0303 	adc.w	r3, r2, r3
 8004c8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c96:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c98:	f04f 0200 	mov.w	r2, #0
 8004c9c:	f04f 0300 	mov.w	r3, #0
 8004ca0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004ca4:	4649      	mov	r1, r9
 8004ca6:	008b      	lsls	r3, r1, #2
 8004ca8:	4641      	mov	r1, r8
 8004caa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cae:	4641      	mov	r1, r8
 8004cb0:	008a      	lsls	r2, r1, #2
 8004cb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004cb6:	f7fb ffcf 	bl	8000c58 <__aeabi_uldivmod>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004cf4 <UART_SetConfig+0x4e4>)
 8004cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8004cc4:	095b      	lsrs	r3, r3, #5
 8004cc6:	2164      	movs	r1, #100	@ 0x64
 8004cc8:	fb01 f303 	mul.w	r3, r1, r3
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	3332      	adds	r3, #50	@ 0x32
 8004cd2:	4a08      	ldr	r2, [pc, #32]	@ (8004cf4 <UART_SetConfig+0x4e4>)
 8004cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd8:	095b      	lsrs	r3, r3, #5
 8004cda:	f003 020f 	and.w	r2, r3, #15
 8004cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4422      	add	r2, r4
 8004ce6:	609a      	str	r2, [r3, #8]
}
 8004ce8:	bf00      	nop
 8004cea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cf4:	51eb851f 	.word	0x51eb851f

08004cf8 <__cvt>:
 8004cf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cfc:	ec57 6b10 	vmov	r6, r7, d0
 8004d00:	2f00      	cmp	r7, #0
 8004d02:	460c      	mov	r4, r1
 8004d04:	4619      	mov	r1, r3
 8004d06:	463b      	mov	r3, r7
 8004d08:	bfbb      	ittet	lt
 8004d0a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004d0e:	461f      	movlt	r7, r3
 8004d10:	2300      	movge	r3, #0
 8004d12:	232d      	movlt	r3, #45	@ 0x2d
 8004d14:	700b      	strb	r3, [r1, #0]
 8004d16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d18:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004d1c:	4691      	mov	r9, r2
 8004d1e:	f023 0820 	bic.w	r8, r3, #32
 8004d22:	bfbc      	itt	lt
 8004d24:	4632      	movlt	r2, r6
 8004d26:	4616      	movlt	r6, r2
 8004d28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004d2c:	d005      	beq.n	8004d3a <__cvt+0x42>
 8004d2e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004d32:	d100      	bne.n	8004d36 <__cvt+0x3e>
 8004d34:	3401      	adds	r4, #1
 8004d36:	2102      	movs	r1, #2
 8004d38:	e000      	b.n	8004d3c <__cvt+0x44>
 8004d3a:	2103      	movs	r1, #3
 8004d3c:	ab03      	add	r3, sp, #12
 8004d3e:	9301      	str	r3, [sp, #4]
 8004d40:	ab02      	add	r3, sp, #8
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	ec47 6b10 	vmov	d0, r6, r7
 8004d48:	4653      	mov	r3, sl
 8004d4a:	4622      	mov	r2, r4
 8004d4c:	f000 fdd0 	bl	80058f0 <_dtoa_r>
 8004d50:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004d54:	4605      	mov	r5, r0
 8004d56:	d119      	bne.n	8004d8c <__cvt+0x94>
 8004d58:	f019 0f01 	tst.w	r9, #1
 8004d5c:	d00e      	beq.n	8004d7c <__cvt+0x84>
 8004d5e:	eb00 0904 	add.w	r9, r0, r4
 8004d62:	2200      	movs	r2, #0
 8004d64:	2300      	movs	r3, #0
 8004d66:	4630      	mov	r0, r6
 8004d68:	4639      	mov	r1, r7
 8004d6a:	f7fb feb5 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d6e:	b108      	cbz	r0, 8004d74 <__cvt+0x7c>
 8004d70:	f8cd 900c 	str.w	r9, [sp, #12]
 8004d74:	2230      	movs	r2, #48	@ 0x30
 8004d76:	9b03      	ldr	r3, [sp, #12]
 8004d78:	454b      	cmp	r3, r9
 8004d7a:	d31e      	bcc.n	8004dba <__cvt+0xc2>
 8004d7c:	9b03      	ldr	r3, [sp, #12]
 8004d7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004d80:	1b5b      	subs	r3, r3, r5
 8004d82:	4628      	mov	r0, r5
 8004d84:	6013      	str	r3, [r2, #0]
 8004d86:	b004      	add	sp, #16
 8004d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004d90:	eb00 0904 	add.w	r9, r0, r4
 8004d94:	d1e5      	bne.n	8004d62 <__cvt+0x6a>
 8004d96:	7803      	ldrb	r3, [r0, #0]
 8004d98:	2b30      	cmp	r3, #48	@ 0x30
 8004d9a:	d10a      	bne.n	8004db2 <__cvt+0xba>
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2300      	movs	r3, #0
 8004da0:	4630      	mov	r0, r6
 8004da2:	4639      	mov	r1, r7
 8004da4:	f7fb fe98 	bl	8000ad8 <__aeabi_dcmpeq>
 8004da8:	b918      	cbnz	r0, 8004db2 <__cvt+0xba>
 8004daa:	f1c4 0401 	rsb	r4, r4, #1
 8004dae:	f8ca 4000 	str.w	r4, [sl]
 8004db2:	f8da 3000 	ldr.w	r3, [sl]
 8004db6:	4499      	add	r9, r3
 8004db8:	e7d3      	b.n	8004d62 <__cvt+0x6a>
 8004dba:	1c59      	adds	r1, r3, #1
 8004dbc:	9103      	str	r1, [sp, #12]
 8004dbe:	701a      	strb	r2, [r3, #0]
 8004dc0:	e7d9      	b.n	8004d76 <__cvt+0x7e>

08004dc2 <__exponent>:
 8004dc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dc4:	2900      	cmp	r1, #0
 8004dc6:	bfba      	itte	lt
 8004dc8:	4249      	neglt	r1, r1
 8004dca:	232d      	movlt	r3, #45	@ 0x2d
 8004dcc:	232b      	movge	r3, #43	@ 0x2b
 8004dce:	2909      	cmp	r1, #9
 8004dd0:	7002      	strb	r2, [r0, #0]
 8004dd2:	7043      	strb	r3, [r0, #1]
 8004dd4:	dd29      	ble.n	8004e2a <__exponent+0x68>
 8004dd6:	f10d 0307 	add.w	r3, sp, #7
 8004dda:	461d      	mov	r5, r3
 8004ddc:	270a      	movs	r7, #10
 8004dde:	461a      	mov	r2, r3
 8004de0:	fbb1 f6f7 	udiv	r6, r1, r7
 8004de4:	fb07 1416 	mls	r4, r7, r6, r1
 8004de8:	3430      	adds	r4, #48	@ 0x30
 8004dea:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004dee:	460c      	mov	r4, r1
 8004df0:	2c63      	cmp	r4, #99	@ 0x63
 8004df2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004df6:	4631      	mov	r1, r6
 8004df8:	dcf1      	bgt.n	8004dde <__exponent+0x1c>
 8004dfa:	3130      	adds	r1, #48	@ 0x30
 8004dfc:	1e94      	subs	r4, r2, #2
 8004dfe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004e02:	1c41      	adds	r1, r0, #1
 8004e04:	4623      	mov	r3, r4
 8004e06:	42ab      	cmp	r3, r5
 8004e08:	d30a      	bcc.n	8004e20 <__exponent+0x5e>
 8004e0a:	f10d 0309 	add.w	r3, sp, #9
 8004e0e:	1a9b      	subs	r3, r3, r2
 8004e10:	42ac      	cmp	r4, r5
 8004e12:	bf88      	it	hi
 8004e14:	2300      	movhi	r3, #0
 8004e16:	3302      	adds	r3, #2
 8004e18:	4403      	add	r3, r0
 8004e1a:	1a18      	subs	r0, r3, r0
 8004e1c:	b003      	add	sp, #12
 8004e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e20:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004e24:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004e28:	e7ed      	b.n	8004e06 <__exponent+0x44>
 8004e2a:	2330      	movs	r3, #48	@ 0x30
 8004e2c:	3130      	adds	r1, #48	@ 0x30
 8004e2e:	7083      	strb	r3, [r0, #2]
 8004e30:	70c1      	strb	r1, [r0, #3]
 8004e32:	1d03      	adds	r3, r0, #4
 8004e34:	e7f1      	b.n	8004e1a <__exponent+0x58>
	...

08004e38 <_printf_float>:
 8004e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e3c:	b08d      	sub	sp, #52	@ 0x34
 8004e3e:	460c      	mov	r4, r1
 8004e40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004e44:	4616      	mov	r6, r2
 8004e46:	461f      	mov	r7, r3
 8004e48:	4605      	mov	r5, r0
 8004e4a:	f000 fc97 	bl	800577c <_localeconv_r>
 8004e4e:	6803      	ldr	r3, [r0, #0]
 8004e50:	9304      	str	r3, [sp, #16]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fb fa14 	bl	8000280 <strlen>
 8004e58:	2300      	movs	r3, #0
 8004e5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8004e60:	9005      	str	r0, [sp, #20]
 8004e62:	3307      	adds	r3, #7
 8004e64:	f023 0307 	bic.w	r3, r3, #7
 8004e68:	f103 0208 	add.w	r2, r3, #8
 8004e6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004e70:	f8d4 b000 	ldr.w	fp, [r4]
 8004e74:	f8c8 2000 	str.w	r2, [r8]
 8004e78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004e7c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004e80:	9307      	str	r3, [sp, #28]
 8004e82:	f8cd 8018 	str.w	r8, [sp, #24]
 8004e86:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004e8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e8e:	4b9c      	ldr	r3, [pc, #624]	@ (8005100 <_printf_float+0x2c8>)
 8004e90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e94:	f7fb fe52 	bl	8000b3c <__aeabi_dcmpun>
 8004e98:	bb70      	cbnz	r0, 8004ef8 <_printf_float+0xc0>
 8004e9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e9e:	4b98      	ldr	r3, [pc, #608]	@ (8005100 <_printf_float+0x2c8>)
 8004ea0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004ea4:	f7fb fe2c 	bl	8000b00 <__aeabi_dcmple>
 8004ea8:	bb30      	cbnz	r0, 8004ef8 <_printf_float+0xc0>
 8004eaa:	2200      	movs	r2, #0
 8004eac:	2300      	movs	r3, #0
 8004eae:	4640      	mov	r0, r8
 8004eb0:	4649      	mov	r1, r9
 8004eb2:	f7fb fe1b 	bl	8000aec <__aeabi_dcmplt>
 8004eb6:	b110      	cbz	r0, 8004ebe <_printf_float+0x86>
 8004eb8:	232d      	movs	r3, #45	@ 0x2d
 8004eba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ebe:	4a91      	ldr	r2, [pc, #580]	@ (8005104 <_printf_float+0x2cc>)
 8004ec0:	4b91      	ldr	r3, [pc, #580]	@ (8005108 <_printf_float+0x2d0>)
 8004ec2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004ec6:	bf94      	ite	ls
 8004ec8:	4690      	movls	r8, r2
 8004eca:	4698      	movhi	r8, r3
 8004ecc:	2303      	movs	r3, #3
 8004ece:	6123      	str	r3, [r4, #16]
 8004ed0:	f02b 0304 	bic.w	r3, fp, #4
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	f04f 0900 	mov.w	r9, #0
 8004eda:	9700      	str	r7, [sp, #0]
 8004edc:	4633      	mov	r3, r6
 8004ede:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004ee0:	4621      	mov	r1, r4
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	f000 f9d2 	bl	800528c <_printf_common>
 8004ee8:	3001      	adds	r0, #1
 8004eea:	f040 808d 	bne.w	8005008 <_printf_float+0x1d0>
 8004eee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ef2:	b00d      	add	sp, #52	@ 0x34
 8004ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ef8:	4642      	mov	r2, r8
 8004efa:	464b      	mov	r3, r9
 8004efc:	4640      	mov	r0, r8
 8004efe:	4649      	mov	r1, r9
 8004f00:	f7fb fe1c 	bl	8000b3c <__aeabi_dcmpun>
 8004f04:	b140      	cbz	r0, 8004f18 <_printf_float+0xe0>
 8004f06:	464b      	mov	r3, r9
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	bfbc      	itt	lt
 8004f0c:	232d      	movlt	r3, #45	@ 0x2d
 8004f0e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004f12:	4a7e      	ldr	r2, [pc, #504]	@ (800510c <_printf_float+0x2d4>)
 8004f14:	4b7e      	ldr	r3, [pc, #504]	@ (8005110 <_printf_float+0x2d8>)
 8004f16:	e7d4      	b.n	8004ec2 <_printf_float+0x8a>
 8004f18:	6863      	ldr	r3, [r4, #4]
 8004f1a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004f1e:	9206      	str	r2, [sp, #24]
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	d13b      	bne.n	8004f9c <_printf_float+0x164>
 8004f24:	2306      	movs	r3, #6
 8004f26:	6063      	str	r3, [r4, #4]
 8004f28:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	6022      	str	r2, [r4, #0]
 8004f30:	9303      	str	r3, [sp, #12]
 8004f32:	ab0a      	add	r3, sp, #40	@ 0x28
 8004f34:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004f38:	ab09      	add	r3, sp, #36	@ 0x24
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	6861      	ldr	r1, [r4, #4]
 8004f3e:	ec49 8b10 	vmov	d0, r8, r9
 8004f42:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004f46:	4628      	mov	r0, r5
 8004f48:	f7ff fed6 	bl	8004cf8 <__cvt>
 8004f4c:	9b06      	ldr	r3, [sp, #24]
 8004f4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004f50:	2b47      	cmp	r3, #71	@ 0x47
 8004f52:	4680      	mov	r8, r0
 8004f54:	d129      	bne.n	8004faa <_printf_float+0x172>
 8004f56:	1cc8      	adds	r0, r1, #3
 8004f58:	db02      	blt.n	8004f60 <_printf_float+0x128>
 8004f5a:	6863      	ldr	r3, [r4, #4]
 8004f5c:	4299      	cmp	r1, r3
 8004f5e:	dd41      	ble.n	8004fe4 <_printf_float+0x1ac>
 8004f60:	f1aa 0a02 	sub.w	sl, sl, #2
 8004f64:	fa5f fa8a 	uxtb.w	sl, sl
 8004f68:	3901      	subs	r1, #1
 8004f6a:	4652      	mov	r2, sl
 8004f6c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004f70:	9109      	str	r1, [sp, #36]	@ 0x24
 8004f72:	f7ff ff26 	bl	8004dc2 <__exponent>
 8004f76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004f78:	1813      	adds	r3, r2, r0
 8004f7a:	2a01      	cmp	r2, #1
 8004f7c:	4681      	mov	r9, r0
 8004f7e:	6123      	str	r3, [r4, #16]
 8004f80:	dc02      	bgt.n	8004f88 <_printf_float+0x150>
 8004f82:	6822      	ldr	r2, [r4, #0]
 8004f84:	07d2      	lsls	r2, r2, #31
 8004f86:	d501      	bpl.n	8004f8c <_printf_float+0x154>
 8004f88:	3301      	adds	r3, #1
 8004f8a:	6123      	str	r3, [r4, #16]
 8004f8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0a2      	beq.n	8004eda <_printf_float+0xa2>
 8004f94:	232d      	movs	r3, #45	@ 0x2d
 8004f96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f9a:	e79e      	b.n	8004eda <_printf_float+0xa2>
 8004f9c:	9a06      	ldr	r2, [sp, #24]
 8004f9e:	2a47      	cmp	r2, #71	@ 0x47
 8004fa0:	d1c2      	bne.n	8004f28 <_printf_float+0xf0>
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1c0      	bne.n	8004f28 <_printf_float+0xf0>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e7bd      	b.n	8004f26 <_printf_float+0xee>
 8004faa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004fae:	d9db      	bls.n	8004f68 <_printf_float+0x130>
 8004fb0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004fb4:	d118      	bne.n	8004fe8 <_printf_float+0x1b0>
 8004fb6:	2900      	cmp	r1, #0
 8004fb8:	6863      	ldr	r3, [r4, #4]
 8004fba:	dd0b      	ble.n	8004fd4 <_printf_float+0x19c>
 8004fbc:	6121      	str	r1, [r4, #16]
 8004fbe:	b913      	cbnz	r3, 8004fc6 <_printf_float+0x18e>
 8004fc0:	6822      	ldr	r2, [r4, #0]
 8004fc2:	07d0      	lsls	r0, r2, #31
 8004fc4:	d502      	bpl.n	8004fcc <_printf_float+0x194>
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	440b      	add	r3, r1
 8004fca:	6123      	str	r3, [r4, #16]
 8004fcc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004fce:	f04f 0900 	mov.w	r9, #0
 8004fd2:	e7db      	b.n	8004f8c <_printf_float+0x154>
 8004fd4:	b913      	cbnz	r3, 8004fdc <_printf_float+0x1a4>
 8004fd6:	6822      	ldr	r2, [r4, #0]
 8004fd8:	07d2      	lsls	r2, r2, #31
 8004fda:	d501      	bpl.n	8004fe0 <_printf_float+0x1a8>
 8004fdc:	3302      	adds	r3, #2
 8004fde:	e7f4      	b.n	8004fca <_printf_float+0x192>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e7f2      	b.n	8004fca <_printf_float+0x192>
 8004fe4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004fe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004fea:	4299      	cmp	r1, r3
 8004fec:	db05      	blt.n	8004ffa <_printf_float+0x1c2>
 8004fee:	6823      	ldr	r3, [r4, #0]
 8004ff0:	6121      	str	r1, [r4, #16]
 8004ff2:	07d8      	lsls	r0, r3, #31
 8004ff4:	d5ea      	bpl.n	8004fcc <_printf_float+0x194>
 8004ff6:	1c4b      	adds	r3, r1, #1
 8004ff8:	e7e7      	b.n	8004fca <_printf_float+0x192>
 8004ffa:	2900      	cmp	r1, #0
 8004ffc:	bfd4      	ite	le
 8004ffe:	f1c1 0202 	rsble	r2, r1, #2
 8005002:	2201      	movgt	r2, #1
 8005004:	4413      	add	r3, r2
 8005006:	e7e0      	b.n	8004fca <_printf_float+0x192>
 8005008:	6823      	ldr	r3, [r4, #0]
 800500a:	055a      	lsls	r2, r3, #21
 800500c:	d407      	bmi.n	800501e <_printf_float+0x1e6>
 800500e:	6923      	ldr	r3, [r4, #16]
 8005010:	4642      	mov	r2, r8
 8005012:	4631      	mov	r1, r6
 8005014:	4628      	mov	r0, r5
 8005016:	47b8      	blx	r7
 8005018:	3001      	adds	r0, #1
 800501a:	d12b      	bne.n	8005074 <_printf_float+0x23c>
 800501c:	e767      	b.n	8004eee <_printf_float+0xb6>
 800501e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005022:	f240 80dd 	bls.w	80051e0 <_printf_float+0x3a8>
 8005026:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800502a:	2200      	movs	r2, #0
 800502c:	2300      	movs	r3, #0
 800502e:	f7fb fd53 	bl	8000ad8 <__aeabi_dcmpeq>
 8005032:	2800      	cmp	r0, #0
 8005034:	d033      	beq.n	800509e <_printf_float+0x266>
 8005036:	4a37      	ldr	r2, [pc, #220]	@ (8005114 <_printf_float+0x2dc>)
 8005038:	2301      	movs	r3, #1
 800503a:	4631      	mov	r1, r6
 800503c:	4628      	mov	r0, r5
 800503e:	47b8      	blx	r7
 8005040:	3001      	adds	r0, #1
 8005042:	f43f af54 	beq.w	8004eee <_printf_float+0xb6>
 8005046:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800504a:	4543      	cmp	r3, r8
 800504c:	db02      	blt.n	8005054 <_printf_float+0x21c>
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	07d8      	lsls	r0, r3, #31
 8005052:	d50f      	bpl.n	8005074 <_printf_float+0x23c>
 8005054:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005058:	4631      	mov	r1, r6
 800505a:	4628      	mov	r0, r5
 800505c:	47b8      	blx	r7
 800505e:	3001      	adds	r0, #1
 8005060:	f43f af45 	beq.w	8004eee <_printf_float+0xb6>
 8005064:	f04f 0900 	mov.w	r9, #0
 8005068:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800506c:	f104 0a1a 	add.w	sl, r4, #26
 8005070:	45c8      	cmp	r8, r9
 8005072:	dc09      	bgt.n	8005088 <_printf_float+0x250>
 8005074:	6823      	ldr	r3, [r4, #0]
 8005076:	079b      	lsls	r3, r3, #30
 8005078:	f100 8103 	bmi.w	8005282 <_printf_float+0x44a>
 800507c:	68e0      	ldr	r0, [r4, #12]
 800507e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005080:	4298      	cmp	r0, r3
 8005082:	bfb8      	it	lt
 8005084:	4618      	movlt	r0, r3
 8005086:	e734      	b.n	8004ef2 <_printf_float+0xba>
 8005088:	2301      	movs	r3, #1
 800508a:	4652      	mov	r2, sl
 800508c:	4631      	mov	r1, r6
 800508e:	4628      	mov	r0, r5
 8005090:	47b8      	blx	r7
 8005092:	3001      	adds	r0, #1
 8005094:	f43f af2b 	beq.w	8004eee <_printf_float+0xb6>
 8005098:	f109 0901 	add.w	r9, r9, #1
 800509c:	e7e8      	b.n	8005070 <_printf_float+0x238>
 800509e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	dc39      	bgt.n	8005118 <_printf_float+0x2e0>
 80050a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005114 <_printf_float+0x2dc>)
 80050a6:	2301      	movs	r3, #1
 80050a8:	4631      	mov	r1, r6
 80050aa:	4628      	mov	r0, r5
 80050ac:	47b8      	blx	r7
 80050ae:	3001      	adds	r0, #1
 80050b0:	f43f af1d 	beq.w	8004eee <_printf_float+0xb6>
 80050b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80050b8:	ea59 0303 	orrs.w	r3, r9, r3
 80050bc:	d102      	bne.n	80050c4 <_printf_float+0x28c>
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	07d9      	lsls	r1, r3, #31
 80050c2:	d5d7      	bpl.n	8005074 <_printf_float+0x23c>
 80050c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050c8:	4631      	mov	r1, r6
 80050ca:	4628      	mov	r0, r5
 80050cc:	47b8      	blx	r7
 80050ce:	3001      	adds	r0, #1
 80050d0:	f43f af0d 	beq.w	8004eee <_printf_float+0xb6>
 80050d4:	f04f 0a00 	mov.w	sl, #0
 80050d8:	f104 0b1a 	add.w	fp, r4, #26
 80050dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050de:	425b      	negs	r3, r3
 80050e0:	4553      	cmp	r3, sl
 80050e2:	dc01      	bgt.n	80050e8 <_printf_float+0x2b0>
 80050e4:	464b      	mov	r3, r9
 80050e6:	e793      	b.n	8005010 <_printf_float+0x1d8>
 80050e8:	2301      	movs	r3, #1
 80050ea:	465a      	mov	r2, fp
 80050ec:	4631      	mov	r1, r6
 80050ee:	4628      	mov	r0, r5
 80050f0:	47b8      	blx	r7
 80050f2:	3001      	adds	r0, #1
 80050f4:	f43f aefb 	beq.w	8004eee <_printf_float+0xb6>
 80050f8:	f10a 0a01 	add.w	sl, sl, #1
 80050fc:	e7ee      	b.n	80050dc <_printf_float+0x2a4>
 80050fe:	bf00      	nop
 8005100:	7fefffff 	.word	0x7fefffff
 8005104:	08007f1c 	.word	0x08007f1c
 8005108:	08007f20 	.word	0x08007f20
 800510c:	08007f24 	.word	0x08007f24
 8005110:	08007f28 	.word	0x08007f28
 8005114:	08007f2c 	.word	0x08007f2c
 8005118:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800511a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800511e:	4553      	cmp	r3, sl
 8005120:	bfa8      	it	ge
 8005122:	4653      	movge	r3, sl
 8005124:	2b00      	cmp	r3, #0
 8005126:	4699      	mov	r9, r3
 8005128:	dc36      	bgt.n	8005198 <_printf_float+0x360>
 800512a:	f04f 0b00 	mov.w	fp, #0
 800512e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005132:	f104 021a 	add.w	r2, r4, #26
 8005136:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005138:	9306      	str	r3, [sp, #24]
 800513a:	eba3 0309 	sub.w	r3, r3, r9
 800513e:	455b      	cmp	r3, fp
 8005140:	dc31      	bgt.n	80051a6 <_printf_float+0x36e>
 8005142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005144:	459a      	cmp	sl, r3
 8005146:	dc3a      	bgt.n	80051be <_printf_float+0x386>
 8005148:	6823      	ldr	r3, [r4, #0]
 800514a:	07da      	lsls	r2, r3, #31
 800514c:	d437      	bmi.n	80051be <_printf_float+0x386>
 800514e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005150:	ebaa 0903 	sub.w	r9, sl, r3
 8005154:	9b06      	ldr	r3, [sp, #24]
 8005156:	ebaa 0303 	sub.w	r3, sl, r3
 800515a:	4599      	cmp	r9, r3
 800515c:	bfa8      	it	ge
 800515e:	4699      	movge	r9, r3
 8005160:	f1b9 0f00 	cmp.w	r9, #0
 8005164:	dc33      	bgt.n	80051ce <_printf_float+0x396>
 8005166:	f04f 0800 	mov.w	r8, #0
 800516a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800516e:	f104 0b1a 	add.w	fp, r4, #26
 8005172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005174:	ebaa 0303 	sub.w	r3, sl, r3
 8005178:	eba3 0309 	sub.w	r3, r3, r9
 800517c:	4543      	cmp	r3, r8
 800517e:	f77f af79 	ble.w	8005074 <_printf_float+0x23c>
 8005182:	2301      	movs	r3, #1
 8005184:	465a      	mov	r2, fp
 8005186:	4631      	mov	r1, r6
 8005188:	4628      	mov	r0, r5
 800518a:	47b8      	blx	r7
 800518c:	3001      	adds	r0, #1
 800518e:	f43f aeae 	beq.w	8004eee <_printf_float+0xb6>
 8005192:	f108 0801 	add.w	r8, r8, #1
 8005196:	e7ec      	b.n	8005172 <_printf_float+0x33a>
 8005198:	4642      	mov	r2, r8
 800519a:	4631      	mov	r1, r6
 800519c:	4628      	mov	r0, r5
 800519e:	47b8      	blx	r7
 80051a0:	3001      	adds	r0, #1
 80051a2:	d1c2      	bne.n	800512a <_printf_float+0x2f2>
 80051a4:	e6a3      	b.n	8004eee <_printf_float+0xb6>
 80051a6:	2301      	movs	r3, #1
 80051a8:	4631      	mov	r1, r6
 80051aa:	4628      	mov	r0, r5
 80051ac:	9206      	str	r2, [sp, #24]
 80051ae:	47b8      	blx	r7
 80051b0:	3001      	adds	r0, #1
 80051b2:	f43f ae9c 	beq.w	8004eee <_printf_float+0xb6>
 80051b6:	9a06      	ldr	r2, [sp, #24]
 80051b8:	f10b 0b01 	add.w	fp, fp, #1
 80051bc:	e7bb      	b.n	8005136 <_printf_float+0x2fe>
 80051be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051c2:	4631      	mov	r1, r6
 80051c4:	4628      	mov	r0, r5
 80051c6:	47b8      	blx	r7
 80051c8:	3001      	adds	r0, #1
 80051ca:	d1c0      	bne.n	800514e <_printf_float+0x316>
 80051cc:	e68f      	b.n	8004eee <_printf_float+0xb6>
 80051ce:	9a06      	ldr	r2, [sp, #24]
 80051d0:	464b      	mov	r3, r9
 80051d2:	4442      	add	r2, r8
 80051d4:	4631      	mov	r1, r6
 80051d6:	4628      	mov	r0, r5
 80051d8:	47b8      	blx	r7
 80051da:	3001      	adds	r0, #1
 80051dc:	d1c3      	bne.n	8005166 <_printf_float+0x32e>
 80051de:	e686      	b.n	8004eee <_printf_float+0xb6>
 80051e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80051e4:	f1ba 0f01 	cmp.w	sl, #1
 80051e8:	dc01      	bgt.n	80051ee <_printf_float+0x3b6>
 80051ea:	07db      	lsls	r3, r3, #31
 80051ec:	d536      	bpl.n	800525c <_printf_float+0x424>
 80051ee:	2301      	movs	r3, #1
 80051f0:	4642      	mov	r2, r8
 80051f2:	4631      	mov	r1, r6
 80051f4:	4628      	mov	r0, r5
 80051f6:	47b8      	blx	r7
 80051f8:	3001      	adds	r0, #1
 80051fa:	f43f ae78 	beq.w	8004eee <_printf_float+0xb6>
 80051fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005202:	4631      	mov	r1, r6
 8005204:	4628      	mov	r0, r5
 8005206:	47b8      	blx	r7
 8005208:	3001      	adds	r0, #1
 800520a:	f43f ae70 	beq.w	8004eee <_printf_float+0xb6>
 800520e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005212:	2200      	movs	r2, #0
 8005214:	2300      	movs	r3, #0
 8005216:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800521a:	f7fb fc5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800521e:	b9c0      	cbnz	r0, 8005252 <_printf_float+0x41a>
 8005220:	4653      	mov	r3, sl
 8005222:	f108 0201 	add.w	r2, r8, #1
 8005226:	4631      	mov	r1, r6
 8005228:	4628      	mov	r0, r5
 800522a:	47b8      	blx	r7
 800522c:	3001      	adds	r0, #1
 800522e:	d10c      	bne.n	800524a <_printf_float+0x412>
 8005230:	e65d      	b.n	8004eee <_printf_float+0xb6>
 8005232:	2301      	movs	r3, #1
 8005234:	465a      	mov	r2, fp
 8005236:	4631      	mov	r1, r6
 8005238:	4628      	mov	r0, r5
 800523a:	47b8      	blx	r7
 800523c:	3001      	adds	r0, #1
 800523e:	f43f ae56 	beq.w	8004eee <_printf_float+0xb6>
 8005242:	f108 0801 	add.w	r8, r8, #1
 8005246:	45d0      	cmp	r8, sl
 8005248:	dbf3      	blt.n	8005232 <_printf_float+0x3fa>
 800524a:	464b      	mov	r3, r9
 800524c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005250:	e6df      	b.n	8005012 <_printf_float+0x1da>
 8005252:	f04f 0800 	mov.w	r8, #0
 8005256:	f104 0b1a 	add.w	fp, r4, #26
 800525a:	e7f4      	b.n	8005246 <_printf_float+0x40e>
 800525c:	2301      	movs	r3, #1
 800525e:	4642      	mov	r2, r8
 8005260:	e7e1      	b.n	8005226 <_printf_float+0x3ee>
 8005262:	2301      	movs	r3, #1
 8005264:	464a      	mov	r2, r9
 8005266:	4631      	mov	r1, r6
 8005268:	4628      	mov	r0, r5
 800526a:	47b8      	blx	r7
 800526c:	3001      	adds	r0, #1
 800526e:	f43f ae3e 	beq.w	8004eee <_printf_float+0xb6>
 8005272:	f108 0801 	add.w	r8, r8, #1
 8005276:	68e3      	ldr	r3, [r4, #12]
 8005278:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800527a:	1a5b      	subs	r3, r3, r1
 800527c:	4543      	cmp	r3, r8
 800527e:	dcf0      	bgt.n	8005262 <_printf_float+0x42a>
 8005280:	e6fc      	b.n	800507c <_printf_float+0x244>
 8005282:	f04f 0800 	mov.w	r8, #0
 8005286:	f104 0919 	add.w	r9, r4, #25
 800528a:	e7f4      	b.n	8005276 <_printf_float+0x43e>

0800528c <_printf_common>:
 800528c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005290:	4616      	mov	r6, r2
 8005292:	4698      	mov	r8, r3
 8005294:	688a      	ldr	r2, [r1, #8]
 8005296:	690b      	ldr	r3, [r1, #16]
 8005298:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800529c:	4293      	cmp	r3, r2
 800529e:	bfb8      	it	lt
 80052a0:	4613      	movlt	r3, r2
 80052a2:	6033      	str	r3, [r6, #0]
 80052a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80052a8:	4607      	mov	r7, r0
 80052aa:	460c      	mov	r4, r1
 80052ac:	b10a      	cbz	r2, 80052b2 <_printf_common+0x26>
 80052ae:	3301      	adds	r3, #1
 80052b0:	6033      	str	r3, [r6, #0]
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	0699      	lsls	r1, r3, #26
 80052b6:	bf42      	ittt	mi
 80052b8:	6833      	ldrmi	r3, [r6, #0]
 80052ba:	3302      	addmi	r3, #2
 80052bc:	6033      	strmi	r3, [r6, #0]
 80052be:	6825      	ldr	r5, [r4, #0]
 80052c0:	f015 0506 	ands.w	r5, r5, #6
 80052c4:	d106      	bne.n	80052d4 <_printf_common+0x48>
 80052c6:	f104 0a19 	add.w	sl, r4, #25
 80052ca:	68e3      	ldr	r3, [r4, #12]
 80052cc:	6832      	ldr	r2, [r6, #0]
 80052ce:	1a9b      	subs	r3, r3, r2
 80052d0:	42ab      	cmp	r3, r5
 80052d2:	dc26      	bgt.n	8005322 <_printf_common+0x96>
 80052d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80052d8:	6822      	ldr	r2, [r4, #0]
 80052da:	3b00      	subs	r3, #0
 80052dc:	bf18      	it	ne
 80052de:	2301      	movne	r3, #1
 80052e0:	0692      	lsls	r2, r2, #26
 80052e2:	d42b      	bmi.n	800533c <_printf_common+0xb0>
 80052e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80052e8:	4641      	mov	r1, r8
 80052ea:	4638      	mov	r0, r7
 80052ec:	47c8      	blx	r9
 80052ee:	3001      	adds	r0, #1
 80052f0:	d01e      	beq.n	8005330 <_printf_common+0xa4>
 80052f2:	6823      	ldr	r3, [r4, #0]
 80052f4:	6922      	ldr	r2, [r4, #16]
 80052f6:	f003 0306 	and.w	r3, r3, #6
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	bf02      	ittt	eq
 80052fe:	68e5      	ldreq	r5, [r4, #12]
 8005300:	6833      	ldreq	r3, [r6, #0]
 8005302:	1aed      	subeq	r5, r5, r3
 8005304:	68a3      	ldr	r3, [r4, #8]
 8005306:	bf0c      	ite	eq
 8005308:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800530c:	2500      	movne	r5, #0
 800530e:	4293      	cmp	r3, r2
 8005310:	bfc4      	itt	gt
 8005312:	1a9b      	subgt	r3, r3, r2
 8005314:	18ed      	addgt	r5, r5, r3
 8005316:	2600      	movs	r6, #0
 8005318:	341a      	adds	r4, #26
 800531a:	42b5      	cmp	r5, r6
 800531c:	d11a      	bne.n	8005354 <_printf_common+0xc8>
 800531e:	2000      	movs	r0, #0
 8005320:	e008      	b.n	8005334 <_printf_common+0xa8>
 8005322:	2301      	movs	r3, #1
 8005324:	4652      	mov	r2, sl
 8005326:	4641      	mov	r1, r8
 8005328:	4638      	mov	r0, r7
 800532a:	47c8      	blx	r9
 800532c:	3001      	adds	r0, #1
 800532e:	d103      	bne.n	8005338 <_printf_common+0xac>
 8005330:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005338:	3501      	adds	r5, #1
 800533a:	e7c6      	b.n	80052ca <_printf_common+0x3e>
 800533c:	18e1      	adds	r1, r4, r3
 800533e:	1c5a      	adds	r2, r3, #1
 8005340:	2030      	movs	r0, #48	@ 0x30
 8005342:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005346:	4422      	add	r2, r4
 8005348:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800534c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005350:	3302      	adds	r3, #2
 8005352:	e7c7      	b.n	80052e4 <_printf_common+0x58>
 8005354:	2301      	movs	r3, #1
 8005356:	4622      	mov	r2, r4
 8005358:	4641      	mov	r1, r8
 800535a:	4638      	mov	r0, r7
 800535c:	47c8      	blx	r9
 800535e:	3001      	adds	r0, #1
 8005360:	d0e6      	beq.n	8005330 <_printf_common+0xa4>
 8005362:	3601      	adds	r6, #1
 8005364:	e7d9      	b.n	800531a <_printf_common+0x8e>
	...

08005368 <_printf_i>:
 8005368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800536c:	7e0f      	ldrb	r7, [r1, #24]
 800536e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005370:	2f78      	cmp	r7, #120	@ 0x78
 8005372:	4691      	mov	r9, r2
 8005374:	4680      	mov	r8, r0
 8005376:	460c      	mov	r4, r1
 8005378:	469a      	mov	sl, r3
 800537a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800537e:	d807      	bhi.n	8005390 <_printf_i+0x28>
 8005380:	2f62      	cmp	r7, #98	@ 0x62
 8005382:	d80a      	bhi.n	800539a <_printf_i+0x32>
 8005384:	2f00      	cmp	r7, #0
 8005386:	f000 80d2 	beq.w	800552e <_printf_i+0x1c6>
 800538a:	2f58      	cmp	r7, #88	@ 0x58
 800538c:	f000 80b9 	beq.w	8005502 <_printf_i+0x19a>
 8005390:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005394:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005398:	e03a      	b.n	8005410 <_printf_i+0xa8>
 800539a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800539e:	2b15      	cmp	r3, #21
 80053a0:	d8f6      	bhi.n	8005390 <_printf_i+0x28>
 80053a2:	a101      	add	r1, pc, #4	@ (adr r1, 80053a8 <_printf_i+0x40>)
 80053a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053a8:	08005401 	.word	0x08005401
 80053ac:	08005415 	.word	0x08005415
 80053b0:	08005391 	.word	0x08005391
 80053b4:	08005391 	.word	0x08005391
 80053b8:	08005391 	.word	0x08005391
 80053bc:	08005391 	.word	0x08005391
 80053c0:	08005415 	.word	0x08005415
 80053c4:	08005391 	.word	0x08005391
 80053c8:	08005391 	.word	0x08005391
 80053cc:	08005391 	.word	0x08005391
 80053d0:	08005391 	.word	0x08005391
 80053d4:	08005515 	.word	0x08005515
 80053d8:	0800543f 	.word	0x0800543f
 80053dc:	080054cf 	.word	0x080054cf
 80053e0:	08005391 	.word	0x08005391
 80053e4:	08005391 	.word	0x08005391
 80053e8:	08005537 	.word	0x08005537
 80053ec:	08005391 	.word	0x08005391
 80053f0:	0800543f 	.word	0x0800543f
 80053f4:	08005391 	.word	0x08005391
 80053f8:	08005391 	.word	0x08005391
 80053fc:	080054d7 	.word	0x080054d7
 8005400:	6833      	ldr	r3, [r6, #0]
 8005402:	1d1a      	adds	r2, r3, #4
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6032      	str	r2, [r6, #0]
 8005408:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800540c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005410:	2301      	movs	r3, #1
 8005412:	e09d      	b.n	8005550 <_printf_i+0x1e8>
 8005414:	6833      	ldr	r3, [r6, #0]
 8005416:	6820      	ldr	r0, [r4, #0]
 8005418:	1d19      	adds	r1, r3, #4
 800541a:	6031      	str	r1, [r6, #0]
 800541c:	0606      	lsls	r6, r0, #24
 800541e:	d501      	bpl.n	8005424 <_printf_i+0xbc>
 8005420:	681d      	ldr	r5, [r3, #0]
 8005422:	e003      	b.n	800542c <_printf_i+0xc4>
 8005424:	0645      	lsls	r5, r0, #25
 8005426:	d5fb      	bpl.n	8005420 <_printf_i+0xb8>
 8005428:	f9b3 5000 	ldrsh.w	r5, [r3]
 800542c:	2d00      	cmp	r5, #0
 800542e:	da03      	bge.n	8005438 <_printf_i+0xd0>
 8005430:	232d      	movs	r3, #45	@ 0x2d
 8005432:	426d      	negs	r5, r5
 8005434:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005438:	4859      	ldr	r0, [pc, #356]	@ (80055a0 <_printf_i+0x238>)
 800543a:	230a      	movs	r3, #10
 800543c:	e011      	b.n	8005462 <_printf_i+0xfa>
 800543e:	6821      	ldr	r1, [r4, #0]
 8005440:	6833      	ldr	r3, [r6, #0]
 8005442:	0608      	lsls	r0, r1, #24
 8005444:	f853 5b04 	ldr.w	r5, [r3], #4
 8005448:	d402      	bmi.n	8005450 <_printf_i+0xe8>
 800544a:	0649      	lsls	r1, r1, #25
 800544c:	bf48      	it	mi
 800544e:	b2ad      	uxthmi	r5, r5
 8005450:	2f6f      	cmp	r7, #111	@ 0x6f
 8005452:	4853      	ldr	r0, [pc, #332]	@ (80055a0 <_printf_i+0x238>)
 8005454:	6033      	str	r3, [r6, #0]
 8005456:	bf14      	ite	ne
 8005458:	230a      	movne	r3, #10
 800545a:	2308      	moveq	r3, #8
 800545c:	2100      	movs	r1, #0
 800545e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005462:	6866      	ldr	r6, [r4, #4]
 8005464:	60a6      	str	r6, [r4, #8]
 8005466:	2e00      	cmp	r6, #0
 8005468:	bfa2      	ittt	ge
 800546a:	6821      	ldrge	r1, [r4, #0]
 800546c:	f021 0104 	bicge.w	r1, r1, #4
 8005470:	6021      	strge	r1, [r4, #0]
 8005472:	b90d      	cbnz	r5, 8005478 <_printf_i+0x110>
 8005474:	2e00      	cmp	r6, #0
 8005476:	d04b      	beq.n	8005510 <_printf_i+0x1a8>
 8005478:	4616      	mov	r6, r2
 800547a:	fbb5 f1f3 	udiv	r1, r5, r3
 800547e:	fb03 5711 	mls	r7, r3, r1, r5
 8005482:	5dc7      	ldrb	r7, [r0, r7]
 8005484:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005488:	462f      	mov	r7, r5
 800548a:	42bb      	cmp	r3, r7
 800548c:	460d      	mov	r5, r1
 800548e:	d9f4      	bls.n	800547a <_printf_i+0x112>
 8005490:	2b08      	cmp	r3, #8
 8005492:	d10b      	bne.n	80054ac <_printf_i+0x144>
 8005494:	6823      	ldr	r3, [r4, #0]
 8005496:	07df      	lsls	r7, r3, #31
 8005498:	d508      	bpl.n	80054ac <_printf_i+0x144>
 800549a:	6923      	ldr	r3, [r4, #16]
 800549c:	6861      	ldr	r1, [r4, #4]
 800549e:	4299      	cmp	r1, r3
 80054a0:	bfde      	ittt	le
 80054a2:	2330      	movle	r3, #48	@ 0x30
 80054a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054a8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80054ac:	1b92      	subs	r2, r2, r6
 80054ae:	6122      	str	r2, [r4, #16]
 80054b0:	f8cd a000 	str.w	sl, [sp]
 80054b4:	464b      	mov	r3, r9
 80054b6:	aa03      	add	r2, sp, #12
 80054b8:	4621      	mov	r1, r4
 80054ba:	4640      	mov	r0, r8
 80054bc:	f7ff fee6 	bl	800528c <_printf_common>
 80054c0:	3001      	adds	r0, #1
 80054c2:	d14a      	bne.n	800555a <_printf_i+0x1f2>
 80054c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80054c8:	b004      	add	sp, #16
 80054ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	f043 0320 	orr.w	r3, r3, #32
 80054d4:	6023      	str	r3, [r4, #0]
 80054d6:	4833      	ldr	r0, [pc, #204]	@ (80055a4 <_printf_i+0x23c>)
 80054d8:	2778      	movs	r7, #120	@ 0x78
 80054da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	6831      	ldr	r1, [r6, #0]
 80054e2:	061f      	lsls	r7, r3, #24
 80054e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80054e8:	d402      	bmi.n	80054f0 <_printf_i+0x188>
 80054ea:	065f      	lsls	r7, r3, #25
 80054ec:	bf48      	it	mi
 80054ee:	b2ad      	uxthmi	r5, r5
 80054f0:	6031      	str	r1, [r6, #0]
 80054f2:	07d9      	lsls	r1, r3, #31
 80054f4:	bf44      	itt	mi
 80054f6:	f043 0320 	orrmi.w	r3, r3, #32
 80054fa:	6023      	strmi	r3, [r4, #0]
 80054fc:	b11d      	cbz	r5, 8005506 <_printf_i+0x19e>
 80054fe:	2310      	movs	r3, #16
 8005500:	e7ac      	b.n	800545c <_printf_i+0xf4>
 8005502:	4827      	ldr	r0, [pc, #156]	@ (80055a0 <_printf_i+0x238>)
 8005504:	e7e9      	b.n	80054da <_printf_i+0x172>
 8005506:	6823      	ldr	r3, [r4, #0]
 8005508:	f023 0320 	bic.w	r3, r3, #32
 800550c:	6023      	str	r3, [r4, #0]
 800550e:	e7f6      	b.n	80054fe <_printf_i+0x196>
 8005510:	4616      	mov	r6, r2
 8005512:	e7bd      	b.n	8005490 <_printf_i+0x128>
 8005514:	6833      	ldr	r3, [r6, #0]
 8005516:	6825      	ldr	r5, [r4, #0]
 8005518:	6961      	ldr	r1, [r4, #20]
 800551a:	1d18      	adds	r0, r3, #4
 800551c:	6030      	str	r0, [r6, #0]
 800551e:	062e      	lsls	r6, r5, #24
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	d501      	bpl.n	8005528 <_printf_i+0x1c0>
 8005524:	6019      	str	r1, [r3, #0]
 8005526:	e002      	b.n	800552e <_printf_i+0x1c6>
 8005528:	0668      	lsls	r0, r5, #25
 800552a:	d5fb      	bpl.n	8005524 <_printf_i+0x1bc>
 800552c:	8019      	strh	r1, [r3, #0]
 800552e:	2300      	movs	r3, #0
 8005530:	6123      	str	r3, [r4, #16]
 8005532:	4616      	mov	r6, r2
 8005534:	e7bc      	b.n	80054b0 <_printf_i+0x148>
 8005536:	6833      	ldr	r3, [r6, #0]
 8005538:	1d1a      	adds	r2, r3, #4
 800553a:	6032      	str	r2, [r6, #0]
 800553c:	681e      	ldr	r6, [r3, #0]
 800553e:	6862      	ldr	r2, [r4, #4]
 8005540:	2100      	movs	r1, #0
 8005542:	4630      	mov	r0, r6
 8005544:	f7fa fe4c 	bl	80001e0 <memchr>
 8005548:	b108      	cbz	r0, 800554e <_printf_i+0x1e6>
 800554a:	1b80      	subs	r0, r0, r6
 800554c:	6060      	str	r0, [r4, #4]
 800554e:	6863      	ldr	r3, [r4, #4]
 8005550:	6123      	str	r3, [r4, #16]
 8005552:	2300      	movs	r3, #0
 8005554:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005558:	e7aa      	b.n	80054b0 <_printf_i+0x148>
 800555a:	6923      	ldr	r3, [r4, #16]
 800555c:	4632      	mov	r2, r6
 800555e:	4649      	mov	r1, r9
 8005560:	4640      	mov	r0, r8
 8005562:	47d0      	blx	sl
 8005564:	3001      	adds	r0, #1
 8005566:	d0ad      	beq.n	80054c4 <_printf_i+0x15c>
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	079b      	lsls	r3, r3, #30
 800556c:	d413      	bmi.n	8005596 <_printf_i+0x22e>
 800556e:	68e0      	ldr	r0, [r4, #12]
 8005570:	9b03      	ldr	r3, [sp, #12]
 8005572:	4298      	cmp	r0, r3
 8005574:	bfb8      	it	lt
 8005576:	4618      	movlt	r0, r3
 8005578:	e7a6      	b.n	80054c8 <_printf_i+0x160>
 800557a:	2301      	movs	r3, #1
 800557c:	4632      	mov	r2, r6
 800557e:	4649      	mov	r1, r9
 8005580:	4640      	mov	r0, r8
 8005582:	47d0      	blx	sl
 8005584:	3001      	adds	r0, #1
 8005586:	d09d      	beq.n	80054c4 <_printf_i+0x15c>
 8005588:	3501      	adds	r5, #1
 800558a:	68e3      	ldr	r3, [r4, #12]
 800558c:	9903      	ldr	r1, [sp, #12]
 800558e:	1a5b      	subs	r3, r3, r1
 8005590:	42ab      	cmp	r3, r5
 8005592:	dcf2      	bgt.n	800557a <_printf_i+0x212>
 8005594:	e7eb      	b.n	800556e <_printf_i+0x206>
 8005596:	2500      	movs	r5, #0
 8005598:	f104 0619 	add.w	r6, r4, #25
 800559c:	e7f5      	b.n	800558a <_printf_i+0x222>
 800559e:	bf00      	nop
 80055a0:	08007f2e 	.word	0x08007f2e
 80055a4:	08007f3f 	.word	0x08007f3f

080055a8 <siprintf>:
 80055a8:	b40e      	push	{r1, r2, r3}
 80055aa:	b500      	push	{lr}
 80055ac:	b09c      	sub	sp, #112	@ 0x70
 80055ae:	ab1d      	add	r3, sp, #116	@ 0x74
 80055b0:	9002      	str	r0, [sp, #8]
 80055b2:	9006      	str	r0, [sp, #24]
 80055b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80055b8:	4809      	ldr	r0, [pc, #36]	@ (80055e0 <siprintf+0x38>)
 80055ba:	9107      	str	r1, [sp, #28]
 80055bc:	9104      	str	r1, [sp, #16]
 80055be:	4909      	ldr	r1, [pc, #36]	@ (80055e4 <siprintf+0x3c>)
 80055c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80055c4:	9105      	str	r1, [sp, #20]
 80055c6:	6800      	ldr	r0, [r0, #0]
 80055c8:	9301      	str	r3, [sp, #4]
 80055ca:	a902      	add	r1, sp, #8
 80055cc:	f000 ffb0 	bl	8006530 <_svfiprintf_r>
 80055d0:	9b02      	ldr	r3, [sp, #8]
 80055d2:	2200      	movs	r2, #0
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	b01c      	add	sp, #112	@ 0x70
 80055d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80055dc:	b003      	add	sp, #12
 80055de:	4770      	bx	lr
 80055e0:	20000018 	.word	0x20000018
 80055e4:	ffff0208 	.word	0xffff0208

080055e8 <std>:
 80055e8:	2300      	movs	r3, #0
 80055ea:	b510      	push	{r4, lr}
 80055ec:	4604      	mov	r4, r0
 80055ee:	e9c0 3300 	strd	r3, r3, [r0]
 80055f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055f6:	6083      	str	r3, [r0, #8]
 80055f8:	8181      	strh	r1, [r0, #12]
 80055fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80055fc:	81c2      	strh	r2, [r0, #14]
 80055fe:	6183      	str	r3, [r0, #24]
 8005600:	4619      	mov	r1, r3
 8005602:	2208      	movs	r2, #8
 8005604:	305c      	adds	r0, #92	@ 0x5c
 8005606:	f000 f8b1 	bl	800576c <memset>
 800560a:	4b0d      	ldr	r3, [pc, #52]	@ (8005640 <std+0x58>)
 800560c:	6263      	str	r3, [r4, #36]	@ 0x24
 800560e:	4b0d      	ldr	r3, [pc, #52]	@ (8005644 <std+0x5c>)
 8005610:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005612:	4b0d      	ldr	r3, [pc, #52]	@ (8005648 <std+0x60>)
 8005614:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005616:	4b0d      	ldr	r3, [pc, #52]	@ (800564c <std+0x64>)
 8005618:	6323      	str	r3, [r4, #48]	@ 0x30
 800561a:	4b0d      	ldr	r3, [pc, #52]	@ (8005650 <std+0x68>)
 800561c:	6224      	str	r4, [r4, #32]
 800561e:	429c      	cmp	r4, r3
 8005620:	d006      	beq.n	8005630 <std+0x48>
 8005622:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005626:	4294      	cmp	r4, r2
 8005628:	d002      	beq.n	8005630 <std+0x48>
 800562a:	33d0      	adds	r3, #208	@ 0xd0
 800562c:	429c      	cmp	r4, r3
 800562e:	d105      	bne.n	800563c <std+0x54>
 8005630:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005638:	f000 b8ce 	b.w	80057d8 <__retarget_lock_init_recursive>
 800563c:	bd10      	pop	{r4, pc}
 800563e:	bf00      	nop
 8005640:	080070f1 	.word	0x080070f1
 8005644:	08007113 	.word	0x08007113
 8005648:	0800714b 	.word	0x0800714b
 800564c:	0800716f 	.word	0x0800716f
 8005650:	200002cc 	.word	0x200002cc

08005654 <stdio_exit_handler>:
 8005654:	4a02      	ldr	r2, [pc, #8]	@ (8005660 <stdio_exit_handler+0xc>)
 8005656:	4903      	ldr	r1, [pc, #12]	@ (8005664 <stdio_exit_handler+0x10>)
 8005658:	4803      	ldr	r0, [pc, #12]	@ (8005668 <stdio_exit_handler+0x14>)
 800565a:	f000 b869 	b.w	8005730 <_fwalk_sglue>
 800565e:	bf00      	nop
 8005660:	2000000c 	.word	0x2000000c
 8005664:	08006985 	.word	0x08006985
 8005668:	2000001c 	.word	0x2000001c

0800566c <cleanup_stdio>:
 800566c:	6841      	ldr	r1, [r0, #4]
 800566e:	4b0c      	ldr	r3, [pc, #48]	@ (80056a0 <cleanup_stdio+0x34>)
 8005670:	4299      	cmp	r1, r3
 8005672:	b510      	push	{r4, lr}
 8005674:	4604      	mov	r4, r0
 8005676:	d001      	beq.n	800567c <cleanup_stdio+0x10>
 8005678:	f001 f984 	bl	8006984 <_fflush_r>
 800567c:	68a1      	ldr	r1, [r4, #8]
 800567e:	4b09      	ldr	r3, [pc, #36]	@ (80056a4 <cleanup_stdio+0x38>)
 8005680:	4299      	cmp	r1, r3
 8005682:	d002      	beq.n	800568a <cleanup_stdio+0x1e>
 8005684:	4620      	mov	r0, r4
 8005686:	f001 f97d 	bl	8006984 <_fflush_r>
 800568a:	68e1      	ldr	r1, [r4, #12]
 800568c:	4b06      	ldr	r3, [pc, #24]	@ (80056a8 <cleanup_stdio+0x3c>)
 800568e:	4299      	cmp	r1, r3
 8005690:	d004      	beq.n	800569c <cleanup_stdio+0x30>
 8005692:	4620      	mov	r0, r4
 8005694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005698:	f001 b974 	b.w	8006984 <_fflush_r>
 800569c:	bd10      	pop	{r4, pc}
 800569e:	bf00      	nop
 80056a0:	200002cc 	.word	0x200002cc
 80056a4:	20000334 	.word	0x20000334
 80056a8:	2000039c 	.word	0x2000039c

080056ac <global_stdio_init.part.0>:
 80056ac:	b510      	push	{r4, lr}
 80056ae:	4b0b      	ldr	r3, [pc, #44]	@ (80056dc <global_stdio_init.part.0+0x30>)
 80056b0:	4c0b      	ldr	r4, [pc, #44]	@ (80056e0 <global_stdio_init.part.0+0x34>)
 80056b2:	4a0c      	ldr	r2, [pc, #48]	@ (80056e4 <global_stdio_init.part.0+0x38>)
 80056b4:	601a      	str	r2, [r3, #0]
 80056b6:	4620      	mov	r0, r4
 80056b8:	2200      	movs	r2, #0
 80056ba:	2104      	movs	r1, #4
 80056bc:	f7ff ff94 	bl	80055e8 <std>
 80056c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80056c4:	2201      	movs	r2, #1
 80056c6:	2109      	movs	r1, #9
 80056c8:	f7ff ff8e 	bl	80055e8 <std>
 80056cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80056d0:	2202      	movs	r2, #2
 80056d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056d6:	2112      	movs	r1, #18
 80056d8:	f7ff bf86 	b.w	80055e8 <std>
 80056dc:	20000404 	.word	0x20000404
 80056e0:	200002cc 	.word	0x200002cc
 80056e4:	08005655 	.word	0x08005655

080056e8 <__sfp_lock_acquire>:
 80056e8:	4801      	ldr	r0, [pc, #4]	@ (80056f0 <__sfp_lock_acquire+0x8>)
 80056ea:	f000 b876 	b.w	80057da <__retarget_lock_acquire_recursive>
 80056ee:	bf00      	nop
 80056f0:	20000409 	.word	0x20000409

080056f4 <__sfp_lock_release>:
 80056f4:	4801      	ldr	r0, [pc, #4]	@ (80056fc <__sfp_lock_release+0x8>)
 80056f6:	f000 b871 	b.w	80057dc <__retarget_lock_release_recursive>
 80056fa:	bf00      	nop
 80056fc:	20000409 	.word	0x20000409

08005700 <__sinit>:
 8005700:	b510      	push	{r4, lr}
 8005702:	4604      	mov	r4, r0
 8005704:	f7ff fff0 	bl	80056e8 <__sfp_lock_acquire>
 8005708:	6a23      	ldr	r3, [r4, #32]
 800570a:	b11b      	cbz	r3, 8005714 <__sinit+0x14>
 800570c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005710:	f7ff bff0 	b.w	80056f4 <__sfp_lock_release>
 8005714:	4b04      	ldr	r3, [pc, #16]	@ (8005728 <__sinit+0x28>)
 8005716:	6223      	str	r3, [r4, #32]
 8005718:	4b04      	ldr	r3, [pc, #16]	@ (800572c <__sinit+0x2c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1f5      	bne.n	800570c <__sinit+0xc>
 8005720:	f7ff ffc4 	bl	80056ac <global_stdio_init.part.0>
 8005724:	e7f2      	b.n	800570c <__sinit+0xc>
 8005726:	bf00      	nop
 8005728:	0800566d 	.word	0x0800566d
 800572c:	20000404 	.word	0x20000404

08005730 <_fwalk_sglue>:
 8005730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005734:	4607      	mov	r7, r0
 8005736:	4688      	mov	r8, r1
 8005738:	4614      	mov	r4, r2
 800573a:	2600      	movs	r6, #0
 800573c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005740:	f1b9 0901 	subs.w	r9, r9, #1
 8005744:	d505      	bpl.n	8005752 <_fwalk_sglue+0x22>
 8005746:	6824      	ldr	r4, [r4, #0]
 8005748:	2c00      	cmp	r4, #0
 800574a:	d1f7      	bne.n	800573c <_fwalk_sglue+0xc>
 800574c:	4630      	mov	r0, r6
 800574e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005752:	89ab      	ldrh	r3, [r5, #12]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d907      	bls.n	8005768 <_fwalk_sglue+0x38>
 8005758:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800575c:	3301      	adds	r3, #1
 800575e:	d003      	beq.n	8005768 <_fwalk_sglue+0x38>
 8005760:	4629      	mov	r1, r5
 8005762:	4638      	mov	r0, r7
 8005764:	47c0      	blx	r8
 8005766:	4306      	orrs	r6, r0
 8005768:	3568      	adds	r5, #104	@ 0x68
 800576a:	e7e9      	b.n	8005740 <_fwalk_sglue+0x10>

0800576c <memset>:
 800576c:	4402      	add	r2, r0
 800576e:	4603      	mov	r3, r0
 8005770:	4293      	cmp	r3, r2
 8005772:	d100      	bne.n	8005776 <memset+0xa>
 8005774:	4770      	bx	lr
 8005776:	f803 1b01 	strb.w	r1, [r3], #1
 800577a:	e7f9      	b.n	8005770 <memset+0x4>

0800577c <_localeconv_r>:
 800577c:	4800      	ldr	r0, [pc, #0]	@ (8005780 <_localeconv_r+0x4>)
 800577e:	4770      	bx	lr
 8005780:	20000158 	.word	0x20000158

08005784 <__errno>:
 8005784:	4b01      	ldr	r3, [pc, #4]	@ (800578c <__errno+0x8>)
 8005786:	6818      	ldr	r0, [r3, #0]
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	20000018 	.word	0x20000018

08005790 <__libc_init_array>:
 8005790:	b570      	push	{r4, r5, r6, lr}
 8005792:	4d0d      	ldr	r5, [pc, #52]	@ (80057c8 <__libc_init_array+0x38>)
 8005794:	4c0d      	ldr	r4, [pc, #52]	@ (80057cc <__libc_init_array+0x3c>)
 8005796:	1b64      	subs	r4, r4, r5
 8005798:	10a4      	asrs	r4, r4, #2
 800579a:	2600      	movs	r6, #0
 800579c:	42a6      	cmp	r6, r4
 800579e:	d109      	bne.n	80057b4 <__libc_init_array+0x24>
 80057a0:	4d0b      	ldr	r5, [pc, #44]	@ (80057d0 <__libc_init_array+0x40>)
 80057a2:	4c0c      	ldr	r4, [pc, #48]	@ (80057d4 <__libc_init_array+0x44>)
 80057a4:	f002 fb58 	bl	8007e58 <_init>
 80057a8:	1b64      	subs	r4, r4, r5
 80057aa:	10a4      	asrs	r4, r4, #2
 80057ac:	2600      	movs	r6, #0
 80057ae:	42a6      	cmp	r6, r4
 80057b0:	d105      	bne.n	80057be <__libc_init_array+0x2e>
 80057b2:	bd70      	pop	{r4, r5, r6, pc}
 80057b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80057b8:	4798      	blx	r3
 80057ba:	3601      	adds	r6, #1
 80057bc:	e7ee      	b.n	800579c <__libc_init_array+0xc>
 80057be:	f855 3b04 	ldr.w	r3, [r5], #4
 80057c2:	4798      	blx	r3
 80057c4:	3601      	adds	r6, #1
 80057c6:	e7f2      	b.n	80057ae <__libc_init_array+0x1e>
 80057c8:	08008308 	.word	0x08008308
 80057cc:	08008308 	.word	0x08008308
 80057d0:	08008308 	.word	0x08008308
 80057d4:	0800830c 	.word	0x0800830c

080057d8 <__retarget_lock_init_recursive>:
 80057d8:	4770      	bx	lr

080057da <__retarget_lock_acquire_recursive>:
 80057da:	4770      	bx	lr

080057dc <__retarget_lock_release_recursive>:
 80057dc:	4770      	bx	lr

080057de <quorem>:
 80057de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e2:	6903      	ldr	r3, [r0, #16]
 80057e4:	690c      	ldr	r4, [r1, #16]
 80057e6:	42a3      	cmp	r3, r4
 80057e8:	4607      	mov	r7, r0
 80057ea:	db7e      	blt.n	80058ea <quorem+0x10c>
 80057ec:	3c01      	subs	r4, #1
 80057ee:	f101 0814 	add.w	r8, r1, #20
 80057f2:	00a3      	lsls	r3, r4, #2
 80057f4:	f100 0514 	add.w	r5, r0, #20
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057fe:	9301      	str	r3, [sp, #4]
 8005800:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005804:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005808:	3301      	adds	r3, #1
 800580a:	429a      	cmp	r2, r3
 800580c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005810:	fbb2 f6f3 	udiv	r6, r2, r3
 8005814:	d32e      	bcc.n	8005874 <quorem+0x96>
 8005816:	f04f 0a00 	mov.w	sl, #0
 800581a:	46c4      	mov	ip, r8
 800581c:	46ae      	mov	lr, r5
 800581e:	46d3      	mov	fp, sl
 8005820:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005824:	b298      	uxth	r0, r3
 8005826:	fb06 a000 	mla	r0, r6, r0, sl
 800582a:	0c02      	lsrs	r2, r0, #16
 800582c:	0c1b      	lsrs	r3, r3, #16
 800582e:	fb06 2303 	mla	r3, r6, r3, r2
 8005832:	f8de 2000 	ldr.w	r2, [lr]
 8005836:	b280      	uxth	r0, r0
 8005838:	b292      	uxth	r2, r2
 800583a:	1a12      	subs	r2, r2, r0
 800583c:	445a      	add	r2, fp
 800583e:	f8de 0000 	ldr.w	r0, [lr]
 8005842:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005846:	b29b      	uxth	r3, r3
 8005848:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800584c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005850:	b292      	uxth	r2, r2
 8005852:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005856:	45e1      	cmp	r9, ip
 8005858:	f84e 2b04 	str.w	r2, [lr], #4
 800585c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005860:	d2de      	bcs.n	8005820 <quorem+0x42>
 8005862:	9b00      	ldr	r3, [sp, #0]
 8005864:	58eb      	ldr	r3, [r5, r3]
 8005866:	b92b      	cbnz	r3, 8005874 <quorem+0x96>
 8005868:	9b01      	ldr	r3, [sp, #4]
 800586a:	3b04      	subs	r3, #4
 800586c:	429d      	cmp	r5, r3
 800586e:	461a      	mov	r2, r3
 8005870:	d32f      	bcc.n	80058d2 <quorem+0xf4>
 8005872:	613c      	str	r4, [r7, #16]
 8005874:	4638      	mov	r0, r7
 8005876:	f001 fb33 	bl	8006ee0 <__mcmp>
 800587a:	2800      	cmp	r0, #0
 800587c:	db25      	blt.n	80058ca <quorem+0xec>
 800587e:	4629      	mov	r1, r5
 8005880:	2000      	movs	r0, #0
 8005882:	f858 2b04 	ldr.w	r2, [r8], #4
 8005886:	f8d1 c000 	ldr.w	ip, [r1]
 800588a:	fa1f fe82 	uxth.w	lr, r2
 800588e:	fa1f f38c 	uxth.w	r3, ip
 8005892:	eba3 030e 	sub.w	r3, r3, lr
 8005896:	4403      	add	r3, r0
 8005898:	0c12      	lsrs	r2, r2, #16
 800589a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800589e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058a8:	45c1      	cmp	r9, r8
 80058aa:	f841 3b04 	str.w	r3, [r1], #4
 80058ae:	ea4f 4022 	mov.w	r0, r2, asr #16
 80058b2:	d2e6      	bcs.n	8005882 <quorem+0xa4>
 80058b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058bc:	b922      	cbnz	r2, 80058c8 <quorem+0xea>
 80058be:	3b04      	subs	r3, #4
 80058c0:	429d      	cmp	r5, r3
 80058c2:	461a      	mov	r2, r3
 80058c4:	d30b      	bcc.n	80058de <quorem+0x100>
 80058c6:	613c      	str	r4, [r7, #16]
 80058c8:	3601      	adds	r6, #1
 80058ca:	4630      	mov	r0, r6
 80058cc:	b003      	add	sp, #12
 80058ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058d2:	6812      	ldr	r2, [r2, #0]
 80058d4:	3b04      	subs	r3, #4
 80058d6:	2a00      	cmp	r2, #0
 80058d8:	d1cb      	bne.n	8005872 <quorem+0x94>
 80058da:	3c01      	subs	r4, #1
 80058dc:	e7c6      	b.n	800586c <quorem+0x8e>
 80058de:	6812      	ldr	r2, [r2, #0]
 80058e0:	3b04      	subs	r3, #4
 80058e2:	2a00      	cmp	r2, #0
 80058e4:	d1ef      	bne.n	80058c6 <quorem+0xe8>
 80058e6:	3c01      	subs	r4, #1
 80058e8:	e7ea      	b.n	80058c0 <quorem+0xe2>
 80058ea:	2000      	movs	r0, #0
 80058ec:	e7ee      	b.n	80058cc <quorem+0xee>
	...

080058f0 <_dtoa_r>:
 80058f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f4:	69c7      	ldr	r7, [r0, #28]
 80058f6:	b099      	sub	sp, #100	@ 0x64
 80058f8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80058fc:	ec55 4b10 	vmov	r4, r5, d0
 8005900:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005902:	9109      	str	r1, [sp, #36]	@ 0x24
 8005904:	4683      	mov	fp, r0
 8005906:	920e      	str	r2, [sp, #56]	@ 0x38
 8005908:	9313      	str	r3, [sp, #76]	@ 0x4c
 800590a:	b97f      	cbnz	r7, 800592c <_dtoa_r+0x3c>
 800590c:	2010      	movs	r0, #16
 800590e:	f000 ff0b 	bl	8006728 <malloc>
 8005912:	4602      	mov	r2, r0
 8005914:	f8cb 001c 	str.w	r0, [fp, #28]
 8005918:	b920      	cbnz	r0, 8005924 <_dtoa_r+0x34>
 800591a:	4ba7      	ldr	r3, [pc, #668]	@ (8005bb8 <_dtoa_r+0x2c8>)
 800591c:	21ef      	movs	r1, #239	@ 0xef
 800591e:	48a7      	ldr	r0, [pc, #668]	@ (8005bbc <_dtoa_r+0x2cc>)
 8005920:	f001 fcd6 	bl	80072d0 <__assert_func>
 8005924:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005928:	6007      	str	r7, [r0, #0]
 800592a:	60c7      	str	r7, [r0, #12]
 800592c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005930:	6819      	ldr	r1, [r3, #0]
 8005932:	b159      	cbz	r1, 800594c <_dtoa_r+0x5c>
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	604a      	str	r2, [r1, #4]
 8005938:	2301      	movs	r3, #1
 800593a:	4093      	lsls	r3, r2
 800593c:	608b      	str	r3, [r1, #8]
 800593e:	4658      	mov	r0, fp
 8005940:	f001 f894 	bl	8006a6c <_Bfree>
 8005944:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005948:	2200      	movs	r2, #0
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	1e2b      	subs	r3, r5, #0
 800594e:	bfb9      	ittee	lt
 8005950:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005954:	9303      	strlt	r3, [sp, #12]
 8005956:	2300      	movge	r3, #0
 8005958:	6033      	strge	r3, [r6, #0]
 800595a:	9f03      	ldr	r7, [sp, #12]
 800595c:	4b98      	ldr	r3, [pc, #608]	@ (8005bc0 <_dtoa_r+0x2d0>)
 800595e:	bfbc      	itt	lt
 8005960:	2201      	movlt	r2, #1
 8005962:	6032      	strlt	r2, [r6, #0]
 8005964:	43bb      	bics	r3, r7
 8005966:	d112      	bne.n	800598e <_dtoa_r+0x9e>
 8005968:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800596a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800596e:	6013      	str	r3, [r2, #0]
 8005970:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005974:	4323      	orrs	r3, r4
 8005976:	f000 854d 	beq.w	8006414 <_dtoa_r+0xb24>
 800597a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800597c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005bd4 <_dtoa_r+0x2e4>
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 854f 	beq.w	8006424 <_dtoa_r+0xb34>
 8005986:	f10a 0303 	add.w	r3, sl, #3
 800598a:	f000 bd49 	b.w	8006420 <_dtoa_r+0xb30>
 800598e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005992:	2200      	movs	r2, #0
 8005994:	ec51 0b17 	vmov	r0, r1, d7
 8005998:	2300      	movs	r3, #0
 800599a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800599e:	f7fb f89b 	bl	8000ad8 <__aeabi_dcmpeq>
 80059a2:	4680      	mov	r8, r0
 80059a4:	b158      	cbz	r0, 80059be <_dtoa_r+0xce>
 80059a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80059a8:	2301      	movs	r3, #1
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80059ae:	b113      	cbz	r3, 80059b6 <_dtoa_r+0xc6>
 80059b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80059b2:	4b84      	ldr	r3, [pc, #528]	@ (8005bc4 <_dtoa_r+0x2d4>)
 80059b4:	6013      	str	r3, [r2, #0]
 80059b6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005bd8 <_dtoa_r+0x2e8>
 80059ba:	f000 bd33 	b.w	8006424 <_dtoa_r+0xb34>
 80059be:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80059c2:	aa16      	add	r2, sp, #88	@ 0x58
 80059c4:	a917      	add	r1, sp, #92	@ 0x5c
 80059c6:	4658      	mov	r0, fp
 80059c8:	f001 fb3a 	bl	8007040 <__d2b>
 80059cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80059d0:	4681      	mov	r9, r0
 80059d2:	2e00      	cmp	r6, #0
 80059d4:	d077      	beq.n	8005ac6 <_dtoa_r+0x1d6>
 80059d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80059d8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80059dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80059e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80059ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80059f0:	4619      	mov	r1, r3
 80059f2:	2200      	movs	r2, #0
 80059f4:	4b74      	ldr	r3, [pc, #464]	@ (8005bc8 <_dtoa_r+0x2d8>)
 80059f6:	f7fa fc4f 	bl	8000298 <__aeabi_dsub>
 80059fa:	a369      	add	r3, pc, #420	@ (adr r3, 8005ba0 <_dtoa_r+0x2b0>)
 80059fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a00:	f7fa fe02 	bl	8000608 <__aeabi_dmul>
 8005a04:	a368      	add	r3, pc, #416	@ (adr r3, 8005ba8 <_dtoa_r+0x2b8>)
 8005a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0a:	f7fa fc47 	bl	800029c <__adddf3>
 8005a0e:	4604      	mov	r4, r0
 8005a10:	4630      	mov	r0, r6
 8005a12:	460d      	mov	r5, r1
 8005a14:	f7fa fd8e 	bl	8000534 <__aeabi_i2d>
 8005a18:	a365      	add	r3, pc, #404	@ (adr r3, 8005bb0 <_dtoa_r+0x2c0>)
 8005a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1e:	f7fa fdf3 	bl	8000608 <__aeabi_dmul>
 8005a22:	4602      	mov	r2, r0
 8005a24:	460b      	mov	r3, r1
 8005a26:	4620      	mov	r0, r4
 8005a28:	4629      	mov	r1, r5
 8005a2a:	f7fa fc37 	bl	800029c <__adddf3>
 8005a2e:	4604      	mov	r4, r0
 8005a30:	460d      	mov	r5, r1
 8005a32:	f7fb f899 	bl	8000b68 <__aeabi_d2iz>
 8005a36:	2200      	movs	r2, #0
 8005a38:	4607      	mov	r7, r0
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	4629      	mov	r1, r5
 8005a40:	f7fb f854 	bl	8000aec <__aeabi_dcmplt>
 8005a44:	b140      	cbz	r0, 8005a58 <_dtoa_r+0x168>
 8005a46:	4638      	mov	r0, r7
 8005a48:	f7fa fd74 	bl	8000534 <__aeabi_i2d>
 8005a4c:	4622      	mov	r2, r4
 8005a4e:	462b      	mov	r3, r5
 8005a50:	f7fb f842 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a54:	b900      	cbnz	r0, 8005a58 <_dtoa_r+0x168>
 8005a56:	3f01      	subs	r7, #1
 8005a58:	2f16      	cmp	r7, #22
 8005a5a:	d851      	bhi.n	8005b00 <_dtoa_r+0x210>
 8005a5c:	4b5b      	ldr	r3, [pc, #364]	@ (8005bcc <_dtoa_r+0x2dc>)
 8005a5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a6a:	f7fb f83f 	bl	8000aec <__aeabi_dcmplt>
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	d048      	beq.n	8005b04 <_dtoa_r+0x214>
 8005a72:	3f01      	subs	r7, #1
 8005a74:	2300      	movs	r3, #0
 8005a76:	9312      	str	r3, [sp, #72]	@ 0x48
 8005a78:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005a7a:	1b9b      	subs	r3, r3, r6
 8005a7c:	1e5a      	subs	r2, r3, #1
 8005a7e:	bf44      	itt	mi
 8005a80:	f1c3 0801 	rsbmi	r8, r3, #1
 8005a84:	2300      	movmi	r3, #0
 8005a86:	9208      	str	r2, [sp, #32]
 8005a88:	bf54      	ite	pl
 8005a8a:	f04f 0800 	movpl.w	r8, #0
 8005a8e:	9308      	strmi	r3, [sp, #32]
 8005a90:	2f00      	cmp	r7, #0
 8005a92:	db39      	blt.n	8005b08 <_dtoa_r+0x218>
 8005a94:	9b08      	ldr	r3, [sp, #32]
 8005a96:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005a98:	443b      	add	r3, r7
 8005a9a:	9308      	str	r3, [sp, #32]
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005aa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aa2:	2b09      	cmp	r3, #9
 8005aa4:	d864      	bhi.n	8005b70 <_dtoa_r+0x280>
 8005aa6:	2b05      	cmp	r3, #5
 8005aa8:	bfc4      	itt	gt
 8005aaa:	3b04      	subgt	r3, #4
 8005aac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005aae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ab0:	f1a3 0302 	sub.w	r3, r3, #2
 8005ab4:	bfcc      	ite	gt
 8005ab6:	2400      	movgt	r4, #0
 8005ab8:	2401      	movle	r4, #1
 8005aba:	2b03      	cmp	r3, #3
 8005abc:	d863      	bhi.n	8005b86 <_dtoa_r+0x296>
 8005abe:	e8df f003 	tbb	[pc, r3]
 8005ac2:	372a      	.short	0x372a
 8005ac4:	5535      	.short	0x5535
 8005ac6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005aca:	441e      	add	r6, r3
 8005acc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005ad0:	2b20      	cmp	r3, #32
 8005ad2:	bfc1      	itttt	gt
 8005ad4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005ad8:	409f      	lslgt	r7, r3
 8005ada:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005ade:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005ae2:	bfd6      	itet	le
 8005ae4:	f1c3 0320 	rsble	r3, r3, #32
 8005ae8:	ea47 0003 	orrgt.w	r0, r7, r3
 8005aec:	fa04 f003 	lslle.w	r0, r4, r3
 8005af0:	f7fa fd10 	bl	8000514 <__aeabi_ui2d>
 8005af4:	2201      	movs	r2, #1
 8005af6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005afa:	3e01      	subs	r6, #1
 8005afc:	9214      	str	r2, [sp, #80]	@ 0x50
 8005afe:	e777      	b.n	80059f0 <_dtoa_r+0x100>
 8005b00:	2301      	movs	r3, #1
 8005b02:	e7b8      	b.n	8005a76 <_dtoa_r+0x186>
 8005b04:	9012      	str	r0, [sp, #72]	@ 0x48
 8005b06:	e7b7      	b.n	8005a78 <_dtoa_r+0x188>
 8005b08:	427b      	negs	r3, r7
 8005b0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	eba8 0807 	sub.w	r8, r8, r7
 8005b12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005b14:	e7c4      	b.n	8005aa0 <_dtoa_r+0x1b0>
 8005b16:	2300      	movs	r3, #0
 8005b18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	dc35      	bgt.n	8005b8c <_dtoa_r+0x29c>
 8005b20:	2301      	movs	r3, #1
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	9307      	str	r3, [sp, #28]
 8005b26:	461a      	mov	r2, r3
 8005b28:	920e      	str	r2, [sp, #56]	@ 0x38
 8005b2a:	e00b      	b.n	8005b44 <_dtoa_r+0x254>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e7f3      	b.n	8005b18 <_dtoa_r+0x228>
 8005b30:	2300      	movs	r3, #0
 8005b32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b36:	18fb      	adds	r3, r7, r3
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	9307      	str	r3, [sp, #28]
 8005b40:	bfb8      	it	lt
 8005b42:	2301      	movlt	r3, #1
 8005b44:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005b48:	2100      	movs	r1, #0
 8005b4a:	2204      	movs	r2, #4
 8005b4c:	f102 0514 	add.w	r5, r2, #20
 8005b50:	429d      	cmp	r5, r3
 8005b52:	d91f      	bls.n	8005b94 <_dtoa_r+0x2a4>
 8005b54:	6041      	str	r1, [r0, #4]
 8005b56:	4658      	mov	r0, fp
 8005b58:	f000 ff48 	bl	80069ec <_Balloc>
 8005b5c:	4682      	mov	sl, r0
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	d13c      	bne.n	8005bdc <_dtoa_r+0x2ec>
 8005b62:	4b1b      	ldr	r3, [pc, #108]	@ (8005bd0 <_dtoa_r+0x2e0>)
 8005b64:	4602      	mov	r2, r0
 8005b66:	f240 11af 	movw	r1, #431	@ 0x1af
 8005b6a:	e6d8      	b.n	800591e <_dtoa_r+0x2e>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e7e0      	b.n	8005b32 <_dtoa_r+0x242>
 8005b70:	2401      	movs	r4, #1
 8005b72:	2300      	movs	r3, #0
 8005b74:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b76:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005b78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	9307      	str	r3, [sp, #28]
 8005b80:	2200      	movs	r2, #0
 8005b82:	2312      	movs	r3, #18
 8005b84:	e7d0      	b.n	8005b28 <_dtoa_r+0x238>
 8005b86:	2301      	movs	r3, #1
 8005b88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b8a:	e7f5      	b.n	8005b78 <_dtoa_r+0x288>
 8005b8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	9307      	str	r3, [sp, #28]
 8005b92:	e7d7      	b.n	8005b44 <_dtoa_r+0x254>
 8005b94:	3101      	adds	r1, #1
 8005b96:	0052      	lsls	r2, r2, #1
 8005b98:	e7d8      	b.n	8005b4c <_dtoa_r+0x25c>
 8005b9a:	bf00      	nop
 8005b9c:	f3af 8000 	nop.w
 8005ba0:	636f4361 	.word	0x636f4361
 8005ba4:	3fd287a7 	.word	0x3fd287a7
 8005ba8:	8b60c8b3 	.word	0x8b60c8b3
 8005bac:	3fc68a28 	.word	0x3fc68a28
 8005bb0:	509f79fb 	.word	0x509f79fb
 8005bb4:	3fd34413 	.word	0x3fd34413
 8005bb8:	08007f5d 	.word	0x08007f5d
 8005bbc:	08007f74 	.word	0x08007f74
 8005bc0:	7ff00000 	.word	0x7ff00000
 8005bc4:	08007f2d 	.word	0x08007f2d
 8005bc8:	3ff80000 	.word	0x3ff80000
 8005bcc:	08008080 	.word	0x08008080
 8005bd0:	08007fcc 	.word	0x08007fcc
 8005bd4:	08007f59 	.word	0x08007f59
 8005bd8:	08007f2c 	.word	0x08007f2c
 8005bdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005be0:	6018      	str	r0, [r3, #0]
 8005be2:	9b07      	ldr	r3, [sp, #28]
 8005be4:	2b0e      	cmp	r3, #14
 8005be6:	f200 80a4 	bhi.w	8005d32 <_dtoa_r+0x442>
 8005bea:	2c00      	cmp	r4, #0
 8005bec:	f000 80a1 	beq.w	8005d32 <_dtoa_r+0x442>
 8005bf0:	2f00      	cmp	r7, #0
 8005bf2:	dd33      	ble.n	8005c5c <_dtoa_r+0x36c>
 8005bf4:	4bad      	ldr	r3, [pc, #692]	@ (8005eac <_dtoa_r+0x5bc>)
 8005bf6:	f007 020f 	and.w	r2, r7, #15
 8005bfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bfe:	ed93 7b00 	vldr	d7, [r3]
 8005c02:	05f8      	lsls	r0, r7, #23
 8005c04:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005c08:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005c0c:	d516      	bpl.n	8005c3c <_dtoa_r+0x34c>
 8005c0e:	4ba8      	ldr	r3, [pc, #672]	@ (8005eb0 <_dtoa_r+0x5c0>)
 8005c10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c18:	f7fa fe20 	bl	800085c <__aeabi_ddiv>
 8005c1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c20:	f004 040f 	and.w	r4, r4, #15
 8005c24:	2603      	movs	r6, #3
 8005c26:	4da2      	ldr	r5, [pc, #648]	@ (8005eb0 <_dtoa_r+0x5c0>)
 8005c28:	b954      	cbnz	r4, 8005c40 <_dtoa_r+0x350>
 8005c2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c32:	f7fa fe13 	bl	800085c <__aeabi_ddiv>
 8005c36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c3a:	e028      	b.n	8005c8e <_dtoa_r+0x39e>
 8005c3c:	2602      	movs	r6, #2
 8005c3e:	e7f2      	b.n	8005c26 <_dtoa_r+0x336>
 8005c40:	07e1      	lsls	r1, r4, #31
 8005c42:	d508      	bpl.n	8005c56 <_dtoa_r+0x366>
 8005c44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005c4c:	f7fa fcdc 	bl	8000608 <__aeabi_dmul>
 8005c50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c54:	3601      	adds	r6, #1
 8005c56:	1064      	asrs	r4, r4, #1
 8005c58:	3508      	adds	r5, #8
 8005c5a:	e7e5      	b.n	8005c28 <_dtoa_r+0x338>
 8005c5c:	f000 80d2 	beq.w	8005e04 <_dtoa_r+0x514>
 8005c60:	427c      	negs	r4, r7
 8005c62:	4b92      	ldr	r3, [pc, #584]	@ (8005eac <_dtoa_r+0x5bc>)
 8005c64:	4d92      	ldr	r5, [pc, #584]	@ (8005eb0 <_dtoa_r+0x5c0>)
 8005c66:	f004 020f 	and.w	r2, r4, #15
 8005c6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c76:	f7fa fcc7 	bl	8000608 <__aeabi_dmul>
 8005c7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c7e:	1124      	asrs	r4, r4, #4
 8005c80:	2300      	movs	r3, #0
 8005c82:	2602      	movs	r6, #2
 8005c84:	2c00      	cmp	r4, #0
 8005c86:	f040 80b2 	bne.w	8005dee <_dtoa_r+0x4fe>
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1d3      	bne.n	8005c36 <_dtoa_r+0x346>
 8005c8e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005c90:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 80b7 	beq.w	8005e08 <_dtoa_r+0x518>
 8005c9a:	4b86      	ldr	r3, [pc, #536]	@ (8005eb4 <_dtoa_r+0x5c4>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	4629      	mov	r1, r5
 8005ca2:	f7fa ff23 	bl	8000aec <__aeabi_dcmplt>
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	f000 80ae 	beq.w	8005e08 <_dtoa_r+0x518>
 8005cac:	9b07      	ldr	r3, [sp, #28]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 80aa 	beq.w	8005e08 <_dtoa_r+0x518>
 8005cb4:	9b00      	ldr	r3, [sp, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	dd37      	ble.n	8005d2a <_dtoa_r+0x43a>
 8005cba:	1e7b      	subs	r3, r7, #1
 8005cbc:	9304      	str	r3, [sp, #16]
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	4b7d      	ldr	r3, [pc, #500]	@ (8005eb8 <_dtoa_r+0x5c8>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	4629      	mov	r1, r5
 8005cc6:	f7fa fc9f 	bl	8000608 <__aeabi_dmul>
 8005cca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cce:	9c00      	ldr	r4, [sp, #0]
 8005cd0:	3601      	adds	r6, #1
 8005cd2:	4630      	mov	r0, r6
 8005cd4:	f7fa fc2e 	bl	8000534 <__aeabi_i2d>
 8005cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cdc:	f7fa fc94 	bl	8000608 <__aeabi_dmul>
 8005ce0:	4b76      	ldr	r3, [pc, #472]	@ (8005ebc <_dtoa_r+0x5cc>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f7fa fada 	bl	800029c <__adddf3>
 8005ce8:	4605      	mov	r5, r0
 8005cea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005cee:	2c00      	cmp	r4, #0
 8005cf0:	f040 808d 	bne.w	8005e0e <_dtoa_r+0x51e>
 8005cf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cf8:	4b71      	ldr	r3, [pc, #452]	@ (8005ec0 <_dtoa_r+0x5d0>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f7fa facc 	bl	8000298 <__aeabi_dsub>
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d08:	462a      	mov	r2, r5
 8005d0a:	4633      	mov	r3, r6
 8005d0c:	f7fa ff0c 	bl	8000b28 <__aeabi_dcmpgt>
 8005d10:	2800      	cmp	r0, #0
 8005d12:	f040 828b 	bne.w	800622c <_dtoa_r+0x93c>
 8005d16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d1a:	462a      	mov	r2, r5
 8005d1c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005d20:	f7fa fee4 	bl	8000aec <__aeabi_dcmplt>
 8005d24:	2800      	cmp	r0, #0
 8005d26:	f040 8128 	bne.w	8005f7a <_dtoa_r+0x68a>
 8005d2a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005d2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005d32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f2c0 815a 	blt.w	8005fee <_dtoa_r+0x6fe>
 8005d3a:	2f0e      	cmp	r7, #14
 8005d3c:	f300 8157 	bgt.w	8005fee <_dtoa_r+0x6fe>
 8005d40:	4b5a      	ldr	r3, [pc, #360]	@ (8005eac <_dtoa_r+0x5bc>)
 8005d42:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005d46:	ed93 7b00 	vldr	d7, [r3]
 8005d4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	ed8d 7b00 	vstr	d7, [sp]
 8005d52:	da03      	bge.n	8005d5c <_dtoa_r+0x46c>
 8005d54:	9b07      	ldr	r3, [sp, #28]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f340 8101 	ble.w	8005f5e <_dtoa_r+0x66e>
 8005d5c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005d60:	4656      	mov	r6, sl
 8005d62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d66:	4620      	mov	r0, r4
 8005d68:	4629      	mov	r1, r5
 8005d6a:	f7fa fd77 	bl	800085c <__aeabi_ddiv>
 8005d6e:	f7fa fefb 	bl	8000b68 <__aeabi_d2iz>
 8005d72:	4680      	mov	r8, r0
 8005d74:	f7fa fbde 	bl	8000534 <__aeabi_i2d>
 8005d78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d7c:	f7fa fc44 	bl	8000608 <__aeabi_dmul>
 8005d80:	4602      	mov	r2, r0
 8005d82:	460b      	mov	r3, r1
 8005d84:	4620      	mov	r0, r4
 8005d86:	4629      	mov	r1, r5
 8005d88:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005d8c:	f7fa fa84 	bl	8000298 <__aeabi_dsub>
 8005d90:	f806 4b01 	strb.w	r4, [r6], #1
 8005d94:	9d07      	ldr	r5, [sp, #28]
 8005d96:	eba6 040a 	sub.w	r4, r6, sl
 8005d9a:	42a5      	cmp	r5, r4
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	460b      	mov	r3, r1
 8005da0:	f040 8117 	bne.w	8005fd2 <_dtoa_r+0x6e2>
 8005da4:	f7fa fa7a 	bl	800029c <__adddf3>
 8005da8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005dac:	4604      	mov	r4, r0
 8005dae:	460d      	mov	r5, r1
 8005db0:	f7fa feba 	bl	8000b28 <__aeabi_dcmpgt>
 8005db4:	2800      	cmp	r0, #0
 8005db6:	f040 80f9 	bne.w	8005fac <_dtoa_r+0x6bc>
 8005dba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	4629      	mov	r1, r5
 8005dc2:	f7fa fe89 	bl	8000ad8 <__aeabi_dcmpeq>
 8005dc6:	b118      	cbz	r0, 8005dd0 <_dtoa_r+0x4e0>
 8005dc8:	f018 0f01 	tst.w	r8, #1
 8005dcc:	f040 80ee 	bne.w	8005fac <_dtoa_r+0x6bc>
 8005dd0:	4649      	mov	r1, r9
 8005dd2:	4658      	mov	r0, fp
 8005dd4:	f000 fe4a 	bl	8006a6c <_Bfree>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	7033      	strb	r3, [r6, #0]
 8005ddc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005dde:	3701      	adds	r7, #1
 8005de0:	601f      	str	r7, [r3, #0]
 8005de2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 831d 	beq.w	8006424 <_dtoa_r+0xb34>
 8005dea:	601e      	str	r6, [r3, #0]
 8005dec:	e31a      	b.n	8006424 <_dtoa_r+0xb34>
 8005dee:	07e2      	lsls	r2, r4, #31
 8005df0:	d505      	bpl.n	8005dfe <_dtoa_r+0x50e>
 8005df2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005df6:	f7fa fc07 	bl	8000608 <__aeabi_dmul>
 8005dfa:	3601      	adds	r6, #1
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	1064      	asrs	r4, r4, #1
 8005e00:	3508      	adds	r5, #8
 8005e02:	e73f      	b.n	8005c84 <_dtoa_r+0x394>
 8005e04:	2602      	movs	r6, #2
 8005e06:	e742      	b.n	8005c8e <_dtoa_r+0x39e>
 8005e08:	9c07      	ldr	r4, [sp, #28]
 8005e0a:	9704      	str	r7, [sp, #16]
 8005e0c:	e761      	b.n	8005cd2 <_dtoa_r+0x3e2>
 8005e0e:	4b27      	ldr	r3, [pc, #156]	@ (8005eac <_dtoa_r+0x5bc>)
 8005e10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005e12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005e16:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005e1a:	4454      	add	r4, sl
 8005e1c:	2900      	cmp	r1, #0
 8005e1e:	d053      	beq.n	8005ec8 <_dtoa_r+0x5d8>
 8005e20:	4928      	ldr	r1, [pc, #160]	@ (8005ec4 <_dtoa_r+0x5d4>)
 8005e22:	2000      	movs	r0, #0
 8005e24:	f7fa fd1a 	bl	800085c <__aeabi_ddiv>
 8005e28:	4633      	mov	r3, r6
 8005e2a:	462a      	mov	r2, r5
 8005e2c:	f7fa fa34 	bl	8000298 <__aeabi_dsub>
 8005e30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005e34:	4656      	mov	r6, sl
 8005e36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e3a:	f7fa fe95 	bl	8000b68 <__aeabi_d2iz>
 8005e3e:	4605      	mov	r5, r0
 8005e40:	f7fa fb78 	bl	8000534 <__aeabi_i2d>
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e4c:	f7fa fa24 	bl	8000298 <__aeabi_dsub>
 8005e50:	3530      	adds	r5, #48	@ 0x30
 8005e52:	4602      	mov	r2, r0
 8005e54:	460b      	mov	r3, r1
 8005e56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e5a:	f806 5b01 	strb.w	r5, [r6], #1
 8005e5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005e62:	f7fa fe43 	bl	8000aec <__aeabi_dcmplt>
 8005e66:	2800      	cmp	r0, #0
 8005e68:	d171      	bne.n	8005f4e <_dtoa_r+0x65e>
 8005e6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e6e:	4911      	ldr	r1, [pc, #68]	@ (8005eb4 <_dtoa_r+0x5c4>)
 8005e70:	2000      	movs	r0, #0
 8005e72:	f7fa fa11 	bl	8000298 <__aeabi_dsub>
 8005e76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005e7a:	f7fa fe37 	bl	8000aec <__aeabi_dcmplt>
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	f040 8095 	bne.w	8005fae <_dtoa_r+0x6be>
 8005e84:	42a6      	cmp	r6, r4
 8005e86:	f43f af50 	beq.w	8005d2a <_dtoa_r+0x43a>
 8005e8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8005eb8 <_dtoa_r+0x5c8>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	f7fa fbb9 	bl	8000608 <__aeabi_dmul>
 8005e96:	4b08      	ldr	r3, [pc, #32]	@ (8005eb8 <_dtoa_r+0x5c8>)
 8005e98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ea2:	f7fa fbb1 	bl	8000608 <__aeabi_dmul>
 8005ea6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005eaa:	e7c4      	b.n	8005e36 <_dtoa_r+0x546>
 8005eac:	08008080 	.word	0x08008080
 8005eb0:	08008058 	.word	0x08008058
 8005eb4:	3ff00000 	.word	0x3ff00000
 8005eb8:	40240000 	.word	0x40240000
 8005ebc:	401c0000 	.word	0x401c0000
 8005ec0:	40140000 	.word	0x40140000
 8005ec4:	3fe00000 	.word	0x3fe00000
 8005ec8:	4631      	mov	r1, r6
 8005eca:	4628      	mov	r0, r5
 8005ecc:	f7fa fb9c 	bl	8000608 <__aeabi_dmul>
 8005ed0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005ed4:	9415      	str	r4, [sp, #84]	@ 0x54
 8005ed6:	4656      	mov	r6, sl
 8005ed8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005edc:	f7fa fe44 	bl	8000b68 <__aeabi_d2iz>
 8005ee0:	4605      	mov	r5, r0
 8005ee2:	f7fa fb27 	bl	8000534 <__aeabi_i2d>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	460b      	mov	r3, r1
 8005eea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005eee:	f7fa f9d3 	bl	8000298 <__aeabi_dsub>
 8005ef2:	3530      	adds	r5, #48	@ 0x30
 8005ef4:	f806 5b01 	strb.w	r5, [r6], #1
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	42a6      	cmp	r6, r4
 8005efe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f02:	f04f 0200 	mov.w	r2, #0
 8005f06:	d124      	bne.n	8005f52 <_dtoa_r+0x662>
 8005f08:	4bac      	ldr	r3, [pc, #688]	@ (80061bc <_dtoa_r+0x8cc>)
 8005f0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005f0e:	f7fa f9c5 	bl	800029c <__adddf3>
 8005f12:	4602      	mov	r2, r0
 8005f14:	460b      	mov	r3, r1
 8005f16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f1a:	f7fa fe05 	bl	8000b28 <__aeabi_dcmpgt>
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	d145      	bne.n	8005fae <_dtoa_r+0x6be>
 8005f22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005f26:	49a5      	ldr	r1, [pc, #660]	@ (80061bc <_dtoa_r+0x8cc>)
 8005f28:	2000      	movs	r0, #0
 8005f2a:	f7fa f9b5 	bl	8000298 <__aeabi_dsub>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	460b      	mov	r3, r1
 8005f32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f36:	f7fa fdd9 	bl	8000aec <__aeabi_dcmplt>
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	f43f aef5 	beq.w	8005d2a <_dtoa_r+0x43a>
 8005f40:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005f42:	1e73      	subs	r3, r6, #1
 8005f44:	9315      	str	r3, [sp, #84]	@ 0x54
 8005f46:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005f4a:	2b30      	cmp	r3, #48	@ 0x30
 8005f4c:	d0f8      	beq.n	8005f40 <_dtoa_r+0x650>
 8005f4e:	9f04      	ldr	r7, [sp, #16]
 8005f50:	e73e      	b.n	8005dd0 <_dtoa_r+0x4e0>
 8005f52:	4b9b      	ldr	r3, [pc, #620]	@ (80061c0 <_dtoa_r+0x8d0>)
 8005f54:	f7fa fb58 	bl	8000608 <__aeabi_dmul>
 8005f58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f5c:	e7bc      	b.n	8005ed8 <_dtoa_r+0x5e8>
 8005f5e:	d10c      	bne.n	8005f7a <_dtoa_r+0x68a>
 8005f60:	4b98      	ldr	r3, [pc, #608]	@ (80061c4 <_dtoa_r+0x8d4>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f68:	f7fa fb4e 	bl	8000608 <__aeabi_dmul>
 8005f6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f70:	f7fa fdd0 	bl	8000b14 <__aeabi_dcmpge>
 8005f74:	2800      	cmp	r0, #0
 8005f76:	f000 8157 	beq.w	8006228 <_dtoa_r+0x938>
 8005f7a:	2400      	movs	r4, #0
 8005f7c:	4625      	mov	r5, r4
 8005f7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f80:	43db      	mvns	r3, r3
 8005f82:	9304      	str	r3, [sp, #16]
 8005f84:	4656      	mov	r6, sl
 8005f86:	2700      	movs	r7, #0
 8005f88:	4621      	mov	r1, r4
 8005f8a:	4658      	mov	r0, fp
 8005f8c:	f000 fd6e 	bl	8006a6c <_Bfree>
 8005f90:	2d00      	cmp	r5, #0
 8005f92:	d0dc      	beq.n	8005f4e <_dtoa_r+0x65e>
 8005f94:	b12f      	cbz	r7, 8005fa2 <_dtoa_r+0x6b2>
 8005f96:	42af      	cmp	r7, r5
 8005f98:	d003      	beq.n	8005fa2 <_dtoa_r+0x6b2>
 8005f9a:	4639      	mov	r1, r7
 8005f9c:	4658      	mov	r0, fp
 8005f9e:	f000 fd65 	bl	8006a6c <_Bfree>
 8005fa2:	4629      	mov	r1, r5
 8005fa4:	4658      	mov	r0, fp
 8005fa6:	f000 fd61 	bl	8006a6c <_Bfree>
 8005faa:	e7d0      	b.n	8005f4e <_dtoa_r+0x65e>
 8005fac:	9704      	str	r7, [sp, #16]
 8005fae:	4633      	mov	r3, r6
 8005fb0:	461e      	mov	r6, r3
 8005fb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005fb6:	2a39      	cmp	r2, #57	@ 0x39
 8005fb8:	d107      	bne.n	8005fca <_dtoa_r+0x6da>
 8005fba:	459a      	cmp	sl, r3
 8005fbc:	d1f8      	bne.n	8005fb0 <_dtoa_r+0x6c0>
 8005fbe:	9a04      	ldr	r2, [sp, #16]
 8005fc0:	3201      	adds	r2, #1
 8005fc2:	9204      	str	r2, [sp, #16]
 8005fc4:	2230      	movs	r2, #48	@ 0x30
 8005fc6:	f88a 2000 	strb.w	r2, [sl]
 8005fca:	781a      	ldrb	r2, [r3, #0]
 8005fcc:	3201      	adds	r2, #1
 8005fce:	701a      	strb	r2, [r3, #0]
 8005fd0:	e7bd      	b.n	8005f4e <_dtoa_r+0x65e>
 8005fd2:	4b7b      	ldr	r3, [pc, #492]	@ (80061c0 <_dtoa_r+0x8d0>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f7fa fb17 	bl	8000608 <__aeabi_dmul>
 8005fda:	2200      	movs	r2, #0
 8005fdc:	2300      	movs	r3, #0
 8005fde:	4604      	mov	r4, r0
 8005fe0:	460d      	mov	r5, r1
 8005fe2:	f7fa fd79 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fe6:	2800      	cmp	r0, #0
 8005fe8:	f43f aebb 	beq.w	8005d62 <_dtoa_r+0x472>
 8005fec:	e6f0      	b.n	8005dd0 <_dtoa_r+0x4e0>
 8005fee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005ff0:	2a00      	cmp	r2, #0
 8005ff2:	f000 80db 	beq.w	80061ac <_dtoa_r+0x8bc>
 8005ff6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ff8:	2a01      	cmp	r2, #1
 8005ffa:	f300 80bf 	bgt.w	800617c <_dtoa_r+0x88c>
 8005ffe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006000:	2a00      	cmp	r2, #0
 8006002:	f000 80b7 	beq.w	8006174 <_dtoa_r+0x884>
 8006006:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800600a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800600c:	4646      	mov	r6, r8
 800600e:	9a08      	ldr	r2, [sp, #32]
 8006010:	2101      	movs	r1, #1
 8006012:	441a      	add	r2, r3
 8006014:	4658      	mov	r0, fp
 8006016:	4498      	add	r8, r3
 8006018:	9208      	str	r2, [sp, #32]
 800601a:	f000 fddb 	bl	8006bd4 <__i2b>
 800601e:	4605      	mov	r5, r0
 8006020:	b15e      	cbz	r6, 800603a <_dtoa_r+0x74a>
 8006022:	9b08      	ldr	r3, [sp, #32]
 8006024:	2b00      	cmp	r3, #0
 8006026:	dd08      	ble.n	800603a <_dtoa_r+0x74a>
 8006028:	42b3      	cmp	r3, r6
 800602a:	9a08      	ldr	r2, [sp, #32]
 800602c:	bfa8      	it	ge
 800602e:	4633      	movge	r3, r6
 8006030:	eba8 0803 	sub.w	r8, r8, r3
 8006034:	1af6      	subs	r6, r6, r3
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	9308      	str	r3, [sp, #32]
 800603a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800603c:	b1f3      	cbz	r3, 800607c <_dtoa_r+0x78c>
 800603e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 80b7 	beq.w	80061b4 <_dtoa_r+0x8c4>
 8006046:	b18c      	cbz	r4, 800606c <_dtoa_r+0x77c>
 8006048:	4629      	mov	r1, r5
 800604a:	4622      	mov	r2, r4
 800604c:	4658      	mov	r0, fp
 800604e:	f000 fe81 	bl	8006d54 <__pow5mult>
 8006052:	464a      	mov	r2, r9
 8006054:	4601      	mov	r1, r0
 8006056:	4605      	mov	r5, r0
 8006058:	4658      	mov	r0, fp
 800605a:	f000 fdd1 	bl	8006c00 <__multiply>
 800605e:	4649      	mov	r1, r9
 8006060:	9004      	str	r0, [sp, #16]
 8006062:	4658      	mov	r0, fp
 8006064:	f000 fd02 	bl	8006a6c <_Bfree>
 8006068:	9b04      	ldr	r3, [sp, #16]
 800606a:	4699      	mov	r9, r3
 800606c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800606e:	1b1a      	subs	r2, r3, r4
 8006070:	d004      	beq.n	800607c <_dtoa_r+0x78c>
 8006072:	4649      	mov	r1, r9
 8006074:	4658      	mov	r0, fp
 8006076:	f000 fe6d 	bl	8006d54 <__pow5mult>
 800607a:	4681      	mov	r9, r0
 800607c:	2101      	movs	r1, #1
 800607e:	4658      	mov	r0, fp
 8006080:	f000 fda8 	bl	8006bd4 <__i2b>
 8006084:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006086:	4604      	mov	r4, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 81cf 	beq.w	800642c <_dtoa_r+0xb3c>
 800608e:	461a      	mov	r2, r3
 8006090:	4601      	mov	r1, r0
 8006092:	4658      	mov	r0, fp
 8006094:	f000 fe5e 	bl	8006d54 <__pow5mult>
 8006098:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800609a:	2b01      	cmp	r3, #1
 800609c:	4604      	mov	r4, r0
 800609e:	f300 8095 	bgt.w	80061cc <_dtoa_r+0x8dc>
 80060a2:	9b02      	ldr	r3, [sp, #8]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f040 8087 	bne.w	80061b8 <_dtoa_r+0x8c8>
 80060aa:	9b03      	ldr	r3, [sp, #12]
 80060ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f040 8089 	bne.w	80061c8 <_dtoa_r+0x8d8>
 80060b6:	9b03      	ldr	r3, [sp, #12]
 80060b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80060bc:	0d1b      	lsrs	r3, r3, #20
 80060be:	051b      	lsls	r3, r3, #20
 80060c0:	b12b      	cbz	r3, 80060ce <_dtoa_r+0x7de>
 80060c2:	9b08      	ldr	r3, [sp, #32]
 80060c4:	3301      	adds	r3, #1
 80060c6:	9308      	str	r3, [sp, #32]
 80060c8:	f108 0801 	add.w	r8, r8, #1
 80060cc:	2301      	movs	r3, #1
 80060ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80060d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 81b0 	beq.w	8006438 <_dtoa_r+0xb48>
 80060d8:	6923      	ldr	r3, [r4, #16]
 80060da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80060de:	6918      	ldr	r0, [r3, #16]
 80060e0:	f000 fd2c 	bl	8006b3c <__hi0bits>
 80060e4:	f1c0 0020 	rsb	r0, r0, #32
 80060e8:	9b08      	ldr	r3, [sp, #32]
 80060ea:	4418      	add	r0, r3
 80060ec:	f010 001f 	ands.w	r0, r0, #31
 80060f0:	d077      	beq.n	80061e2 <_dtoa_r+0x8f2>
 80060f2:	f1c0 0320 	rsb	r3, r0, #32
 80060f6:	2b04      	cmp	r3, #4
 80060f8:	dd6b      	ble.n	80061d2 <_dtoa_r+0x8e2>
 80060fa:	9b08      	ldr	r3, [sp, #32]
 80060fc:	f1c0 001c 	rsb	r0, r0, #28
 8006100:	4403      	add	r3, r0
 8006102:	4480      	add	r8, r0
 8006104:	4406      	add	r6, r0
 8006106:	9308      	str	r3, [sp, #32]
 8006108:	f1b8 0f00 	cmp.w	r8, #0
 800610c:	dd05      	ble.n	800611a <_dtoa_r+0x82a>
 800610e:	4649      	mov	r1, r9
 8006110:	4642      	mov	r2, r8
 8006112:	4658      	mov	r0, fp
 8006114:	f000 fe78 	bl	8006e08 <__lshift>
 8006118:	4681      	mov	r9, r0
 800611a:	9b08      	ldr	r3, [sp, #32]
 800611c:	2b00      	cmp	r3, #0
 800611e:	dd05      	ble.n	800612c <_dtoa_r+0x83c>
 8006120:	4621      	mov	r1, r4
 8006122:	461a      	mov	r2, r3
 8006124:	4658      	mov	r0, fp
 8006126:	f000 fe6f 	bl	8006e08 <__lshift>
 800612a:	4604      	mov	r4, r0
 800612c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800612e:	2b00      	cmp	r3, #0
 8006130:	d059      	beq.n	80061e6 <_dtoa_r+0x8f6>
 8006132:	4621      	mov	r1, r4
 8006134:	4648      	mov	r0, r9
 8006136:	f000 fed3 	bl	8006ee0 <__mcmp>
 800613a:	2800      	cmp	r0, #0
 800613c:	da53      	bge.n	80061e6 <_dtoa_r+0x8f6>
 800613e:	1e7b      	subs	r3, r7, #1
 8006140:	9304      	str	r3, [sp, #16]
 8006142:	4649      	mov	r1, r9
 8006144:	2300      	movs	r3, #0
 8006146:	220a      	movs	r2, #10
 8006148:	4658      	mov	r0, fp
 800614a:	f000 fcb1 	bl	8006ab0 <__multadd>
 800614e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006150:	4681      	mov	r9, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	f000 8172 	beq.w	800643c <_dtoa_r+0xb4c>
 8006158:	2300      	movs	r3, #0
 800615a:	4629      	mov	r1, r5
 800615c:	220a      	movs	r2, #10
 800615e:	4658      	mov	r0, fp
 8006160:	f000 fca6 	bl	8006ab0 <__multadd>
 8006164:	9b00      	ldr	r3, [sp, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	4605      	mov	r5, r0
 800616a:	dc67      	bgt.n	800623c <_dtoa_r+0x94c>
 800616c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800616e:	2b02      	cmp	r3, #2
 8006170:	dc41      	bgt.n	80061f6 <_dtoa_r+0x906>
 8006172:	e063      	b.n	800623c <_dtoa_r+0x94c>
 8006174:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006176:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800617a:	e746      	b.n	800600a <_dtoa_r+0x71a>
 800617c:	9b07      	ldr	r3, [sp, #28]
 800617e:	1e5c      	subs	r4, r3, #1
 8006180:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006182:	42a3      	cmp	r3, r4
 8006184:	bfbf      	itttt	lt
 8006186:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006188:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800618a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800618c:	1ae3      	sublt	r3, r4, r3
 800618e:	bfb4      	ite	lt
 8006190:	18d2      	addlt	r2, r2, r3
 8006192:	1b1c      	subge	r4, r3, r4
 8006194:	9b07      	ldr	r3, [sp, #28]
 8006196:	bfbc      	itt	lt
 8006198:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800619a:	2400      	movlt	r4, #0
 800619c:	2b00      	cmp	r3, #0
 800619e:	bfb5      	itete	lt
 80061a0:	eba8 0603 	sublt.w	r6, r8, r3
 80061a4:	9b07      	ldrge	r3, [sp, #28]
 80061a6:	2300      	movlt	r3, #0
 80061a8:	4646      	movge	r6, r8
 80061aa:	e730      	b.n	800600e <_dtoa_r+0x71e>
 80061ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80061ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80061b0:	4646      	mov	r6, r8
 80061b2:	e735      	b.n	8006020 <_dtoa_r+0x730>
 80061b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80061b6:	e75c      	b.n	8006072 <_dtoa_r+0x782>
 80061b8:	2300      	movs	r3, #0
 80061ba:	e788      	b.n	80060ce <_dtoa_r+0x7de>
 80061bc:	3fe00000 	.word	0x3fe00000
 80061c0:	40240000 	.word	0x40240000
 80061c4:	40140000 	.word	0x40140000
 80061c8:	9b02      	ldr	r3, [sp, #8]
 80061ca:	e780      	b.n	80060ce <_dtoa_r+0x7de>
 80061cc:	2300      	movs	r3, #0
 80061ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80061d0:	e782      	b.n	80060d8 <_dtoa_r+0x7e8>
 80061d2:	d099      	beq.n	8006108 <_dtoa_r+0x818>
 80061d4:	9a08      	ldr	r2, [sp, #32]
 80061d6:	331c      	adds	r3, #28
 80061d8:	441a      	add	r2, r3
 80061da:	4498      	add	r8, r3
 80061dc:	441e      	add	r6, r3
 80061de:	9208      	str	r2, [sp, #32]
 80061e0:	e792      	b.n	8006108 <_dtoa_r+0x818>
 80061e2:	4603      	mov	r3, r0
 80061e4:	e7f6      	b.n	80061d4 <_dtoa_r+0x8e4>
 80061e6:	9b07      	ldr	r3, [sp, #28]
 80061e8:	9704      	str	r7, [sp, #16]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	dc20      	bgt.n	8006230 <_dtoa_r+0x940>
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	dd1e      	ble.n	8006234 <_dtoa_r+0x944>
 80061f6:	9b00      	ldr	r3, [sp, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f47f aec0 	bne.w	8005f7e <_dtoa_r+0x68e>
 80061fe:	4621      	mov	r1, r4
 8006200:	2205      	movs	r2, #5
 8006202:	4658      	mov	r0, fp
 8006204:	f000 fc54 	bl	8006ab0 <__multadd>
 8006208:	4601      	mov	r1, r0
 800620a:	4604      	mov	r4, r0
 800620c:	4648      	mov	r0, r9
 800620e:	f000 fe67 	bl	8006ee0 <__mcmp>
 8006212:	2800      	cmp	r0, #0
 8006214:	f77f aeb3 	ble.w	8005f7e <_dtoa_r+0x68e>
 8006218:	4656      	mov	r6, sl
 800621a:	2331      	movs	r3, #49	@ 0x31
 800621c:	f806 3b01 	strb.w	r3, [r6], #1
 8006220:	9b04      	ldr	r3, [sp, #16]
 8006222:	3301      	adds	r3, #1
 8006224:	9304      	str	r3, [sp, #16]
 8006226:	e6ae      	b.n	8005f86 <_dtoa_r+0x696>
 8006228:	9c07      	ldr	r4, [sp, #28]
 800622a:	9704      	str	r7, [sp, #16]
 800622c:	4625      	mov	r5, r4
 800622e:	e7f3      	b.n	8006218 <_dtoa_r+0x928>
 8006230:	9b07      	ldr	r3, [sp, #28]
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006236:	2b00      	cmp	r3, #0
 8006238:	f000 8104 	beq.w	8006444 <_dtoa_r+0xb54>
 800623c:	2e00      	cmp	r6, #0
 800623e:	dd05      	ble.n	800624c <_dtoa_r+0x95c>
 8006240:	4629      	mov	r1, r5
 8006242:	4632      	mov	r2, r6
 8006244:	4658      	mov	r0, fp
 8006246:	f000 fddf 	bl	8006e08 <__lshift>
 800624a:	4605      	mov	r5, r0
 800624c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800624e:	2b00      	cmp	r3, #0
 8006250:	d05a      	beq.n	8006308 <_dtoa_r+0xa18>
 8006252:	6869      	ldr	r1, [r5, #4]
 8006254:	4658      	mov	r0, fp
 8006256:	f000 fbc9 	bl	80069ec <_Balloc>
 800625a:	4606      	mov	r6, r0
 800625c:	b928      	cbnz	r0, 800626a <_dtoa_r+0x97a>
 800625e:	4b84      	ldr	r3, [pc, #528]	@ (8006470 <_dtoa_r+0xb80>)
 8006260:	4602      	mov	r2, r0
 8006262:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006266:	f7ff bb5a 	b.w	800591e <_dtoa_r+0x2e>
 800626a:	692a      	ldr	r2, [r5, #16]
 800626c:	3202      	adds	r2, #2
 800626e:	0092      	lsls	r2, r2, #2
 8006270:	f105 010c 	add.w	r1, r5, #12
 8006274:	300c      	adds	r0, #12
 8006276:	f001 f81d 	bl	80072b4 <memcpy>
 800627a:	2201      	movs	r2, #1
 800627c:	4631      	mov	r1, r6
 800627e:	4658      	mov	r0, fp
 8006280:	f000 fdc2 	bl	8006e08 <__lshift>
 8006284:	f10a 0301 	add.w	r3, sl, #1
 8006288:	9307      	str	r3, [sp, #28]
 800628a:	9b00      	ldr	r3, [sp, #0]
 800628c:	4453      	add	r3, sl
 800628e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006290:	9b02      	ldr	r3, [sp, #8]
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	462f      	mov	r7, r5
 8006298:	930a      	str	r3, [sp, #40]	@ 0x28
 800629a:	4605      	mov	r5, r0
 800629c:	9b07      	ldr	r3, [sp, #28]
 800629e:	4621      	mov	r1, r4
 80062a0:	3b01      	subs	r3, #1
 80062a2:	4648      	mov	r0, r9
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	f7ff fa9a 	bl	80057de <quorem>
 80062aa:	4639      	mov	r1, r7
 80062ac:	9002      	str	r0, [sp, #8]
 80062ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80062b2:	4648      	mov	r0, r9
 80062b4:	f000 fe14 	bl	8006ee0 <__mcmp>
 80062b8:	462a      	mov	r2, r5
 80062ba:	9008      	str	r0, [sp, #32]
 80062bc:	4621      	mov	r1, r4
 80062be:	4658      	mov	r0, fp
 80062c0:	f000 fe2a 	bl	8006f18 <__mdiff>
 80062c4:	68c2      	ldr	r2, [r0, #12]
 80062c6:	4606      	mov	r6, r0
 80062c8:	bb02      	cbnz	r2, 800630c <_dtoa_r+0xa1c>
 80062ca:	4601      	mov	r1, r0
 80062cc:	4648      	mov	r0, r9
 80062ce:	f000 fe07 	bl	8006ee0 <__mcmp>
 80062d2:	4602      	mov	r2, r0
 80062d4:	4631      	mov	r1, r6
 80062d6:	4658      	mov	r0, fp
 80062d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80062da:	f000 fbc7 	bl	8006a6c <_Bfree>
 80062de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80062e2:	9e07      	ldr	r6, [sp, #28]
 80062e4:	ea43 0102 	orr.w	r1, r3, r2
 80062e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062ea:	4319      	orrs	r1, r3
 80062ec:	d110      	bne.n	8006310 <_dtoa_r+0xa20>
 80062ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80062f2:	d029      	beq.n	8006348 <_dtoa_r+0xa58>
 80062f4:	9b08      	ldr	r3, [sp, #32]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	dd02      	ble.n	8006300 <_dtoa_r+0xa10>
 80062fa:	9b02      	ldr	r3, [sp, #8]
 80062fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006300:	9b00      	ldr	r3, [sp, #0]
 8006302:	f883 8000 	strb.w	r8, [r3]
 8006306:	e63f      	b.n	8005f88 <_dtoa_r+0x698>
 8006308:	4628      	mov	r0, r5
 800630a:	e7bb      	b.n	8006284 <_dtoa_r+0x994>
 800630c:	2201      	movs	r2, #1
 800630e:	e7e1      	b.n	80062d4 <_dtoa_r+0x9e4>
 8006310:	9b08      	ldr	r3, [sp, #32]
 8006312:	2b00      	cmp	r3, #0
 8006314:	db04      	blt.n	8006320 <_dtoa_r+0xa30>
 8006316:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006318:	430b      	orrs	r3, r1
 800631a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800631c:	430b      	orrs	r3, r1
 800631e:	d120      	bne.n	8006362 <_dtoa_r+0xa72>
 8006320:	2a00      	cmp	r2, #0
 8006322:	dded      	ble.n	8006300 <_dtoa_r+0xa10>
 8006324:	4649      	mov	r1, r9
 8006326:	2201      	movs	r2, #1
 8006328:	4658      	mov	r0, fp
 800632a:	f000 fd6d 	bl	8006e08 <__lshift>
 800632e:	4621      	mov	r1, r4
 8006330:	4681      	mov	r9, r0
 8006332:	f000 fdd5 	bl	8006ee0 <__mcmp>
 8006336:	2800      	cmp	r0, #0
 8006338:	dc03      	bgt.n	8006342 <_dtoa_r+0xa52>
 800633a:	d1e1      	bne.n	8006300 <_dtoa_r+0xa10>
 800633c:	f018 0f01 	tst.w	r8, #1
 8006340:	d0de      	beq.n	8006300 <_dtoa_r+0xa10>
 8006342:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006346:	d1d8      	bne.n	80062fa <_dtoa_r+0xa0a>
 8006348:	9a00      	ldr	r2, [sp, #0]
 800634a:	2339      	movs	r3, #57	@ 0x39
 800634c:	7013      	strb	r3, [r2, #0]
 800634e:	4633      	mov	r3, r6
 8006350:	461e      	mov	r6, r3
 8006352:	3b01      	subs	r3, #1
 8006354:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006358:	2a39      	cmp	r2, #57	@ 0x39
 800635a:	d052      	beq.n	8006402 <_dtoa_r+0xb12>
 800635c:	3201      	adds	r2, #1
 800635e:	701a      	strb	r2, [r3, #0]
 8006360:	e612      	b.n	8005f88 <_dtoa_r+0x698>
 8006362:	2a00      	cmp	r2, #0
 8006364:	dd07      	ble.n	8006376 <_dtoa_r+0xa86>
 8006366:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800636a:	d0ed      	beq.n	8006348 <_dtoa_r+0xa58>
 800636c:	9a00      	ldr	r2, [sp, #0]
 800636e:	f108 0301 	add.w	r3, r8, #1
 8006372:	7013      	strb	r3, [r2, #0]
 8006374:	e608      	b.n	8005f88 <_dtoa_r+0x698>
 8006376:	9b07      	ldr	r3, [sp, #28]
 8006378:	9a07      	ldr	r2, [sp, #28]
 800637a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800637e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006380:	4293      	cmp	r3, r2
 8006382:	d028      	beq.n	80063d6 <_dtoa_r+0xae6>
 8006384:	4649      	mov	r1, r9
 8006386:	2300      	movs	r3, #0
 8006388:	220a      	movs	r2, #10
 800638a:	4658      	mov	r0, fp
 800638c:	f000 fb90 	bl	8006ab0 <__multadd>
 8006390:	42af      	cmp	r7, r5
 8006392:	4681      	mov	r9, r0
 8006394:	f04f 0300 	mov.w	r3, #0
 8006398:	f04f 020a 	mov.w	r2, #10
 800639c:	4639      	mov	r1, r7
 800639e:	4658      	mov	r0, fp
 80063a0:	d107      	bne.n	80063b2 <_dtoa_r+0xac2>
 80063a2:	f000 fb85 	bl	8006ab0 <__multadd>
 80063a6:	4607      	mov	r7, r0
 80063a8:	4605      	mov	r5, r0
 80063aa:	9b07      	ldr	r3, [sp, #28]
 80063ac:	3301      	adds	r3, #1
 80063ae:	9307      	str	r3, [sp, #28]
 80063b0:	e774      	b.n	800629c <_dtoa_r+0x9ac>
 80063b2:	f000 fb7d 	bl	8006ab0 <__multadd>
 80063b6:	4629      	mov	r1, r5
 80063b8:	4607      	mov	r7, r0
 80063ba:	2300      	movs	r3, #0
 80063bc:	220a      	movs	r2, #10
 80063be:	4658      	mov	r0, fp
 80063c0:	f000 fb76 	bl	8006ab0 <__multadd>
 80063c4:	4605      	mov	r5, r0
 80063c6:	e7f0      	b.n	80063aa <_dtoa_r+0xaba>
 80063c8:	9b00      	ldr	r3, [sp, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	bfcc      	ite	gt
 80063ce:	461e      	movgt	r6, r3
 80063d0:	2601      	movle	r6, #1
 80063d2:	4456      	add	r6, sl
 80063d4:	2700      	movs	r7, #0
 80063d6:	4649      	mov	r1, r9
 80063d8:	2201      	movs	r2, #1
 80063da:	4658      	mov	r0, fp
 80063dc:	f000 fd14 	bl	8006e08 <__lshift>
 80063e0:	4621      	mov	r1, r4
 80063e2:	4681      	mov	r9, r0
 80063e4:	f000 fd7c 	bl	8006ee0 <__mcmp>
 80063e8:	2800      	cmp	r0, #0
 80063ea:	dcb0      	bgt.n	800634e <_dtoa_r+0xa5e>
 80063ec:	d102      	bne.n	80063f4 <_dtoa_r+0xb04>
 80063ee:	f018 0f01 	tst.w	r8, #1
 80063f2:	d1ac      	bne.n	800634e <_dtoa_r+0xa5e>
 80063f4:	4633      	mov	r3, r6
 80063f6:	461e      	mov	r6, r3
 80063f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063fc:	2a30      	cmp	r2, #48	@ 0x30
 80063fe:	d0fa      	beq.n	80063f6 <_dtoa_r+0xb06>
 8006400:	e5c2      	b.n	8005f88 <_dtoa_r+0x698>
 8006402:	459a      	cmp	sl, r3
 8006404:	d1a4      	bne.n	8006350 <_dtoa_r+0xa60>
 8006406:	9b04      	ldr	r3, [sp, #16]
 8006408:	3301      	adds	r3, #1
 800640a:	9304      	str	r3, [sp, #16]
 800640c:	2331      	movs	r3, #49	@ 0x31
 800640e:	f88a 3000 	strb.w	r3, [sl]
 8006412:	e5b9      	b.n	8005f88 <_dtoa_r+0x698>
 8006414:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006416:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006474 <_dtoa_r+0xb84>
 800641a:	b11b      	cbz	r3, 8006424 <_dtoa_r+0xb34>
 800641c:	f10a 0308 	add.w	r3, sl, #8
 8006420:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006422:	6013      	str	r3, [r2, #0]
 8006424:	4650      	mov	r0, sl
 8006426:	b019      	add	sp, #100	@ 0x64
 8006428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800642c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800642e:	2b01      	cmp	r3, #1
 8006430:	f77f ae37 	ble.w	80060a2 <_dtoa_r+0x7b2>
 8006434:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006436:	930a      	str	r3, [sp, #40]	@ 0x28
 8006438:	2001      	movs	r0, #1
 800643a:	e655      	b.n	80060e8 <_dtoa_r+0x7f8>
 800643c:	9b00      	ldr	r3, [sp, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	f77f aed6 	ble.w	80061f0 <_dtoa_r+0x900>
 8006444:	4656      	mov	r6, sl
 8006446:	4621      	mov	r1, r4
 8006448:	4648      	mov	r0, r9
 800644a:	f7ff f9c8 	bl	80057de <quorem>
 800644e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006452:	f806 8b01 	strb.w	r8, [r6], #1
 8006456:	9b00      	ldr	r3, [sp, #0]
 8006458:	eba6 020a 	sub.w	r2, r6, sl
 800645c:	4293      	cmp	r3, r2
 800645e:	ddb3      	ble.n	80063c8 <_dtoa_r+0xad8>
 8006460:	4649      	mov	r1, r9
 8006462:	2300      	movs	r3, #0
 8006464:	220a      	movs	r2, #10
 8006466:	4658      	mov	r0, fp
 8006468:	f000 fb22 	bl	8006ab0 <__multadd>
 800646c:	4681      	mov	r9, r0
 800646e:	e7ea      	b.n	8006446 <_dtoa_r+0xb56>
 8006470:	08007fcc 	.word	0x08007fcc
 8006474:	08007f50 	.word	0x08007f50

08006478 <__ssputs_r>:
 8006478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800647c:	688e      	ldr	r6, [r1, #8]
 800647e:	461f      	mov	r7, r3
 8006480:	42be      	cmp	r6, r7
 8006482:	680b      	ldr	r3, [r1, #0]
 8006484:	4682      	mov	sl, r0
 8006486:	460c      	mov	r4, r1
 8006488:	4690      	mov	r8, r2
 800648a:	d82d      	bhi.n	80064e8 <__ssputs_r+0x70>
 800648c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006490:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006494:	d026      	beq.n	80064e4 <__ssputs_r+0x6c>
 8006496:	6965      	ldr	r5, [r4, #20]
 8006498:	6909      	ldr	r1, [r1, #16]
 800649a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800649e:	eba3 0901 	sub.w	r9, r3, r1
 80064a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064a6:	1c7b      	adds	r3, r7, #1
 80064a8:	444b      	add	r3, r9
 80064aa:	106d      	asrs	r5, r5, #1
 80064ac:	429d      	cmp	r5, r3
 80064ae:	bf38      	it	cc
 80064b0:	461d      	movcc	r5, r3
 80064b2:	0553      	lsls	r3, r2, #21
 80064b4:	d527      	bpl.n	8006506 <__ssputs_r+0x8e>
 80064b6:	4629      	mov	r1, r5
 80064b8:	f000 f960 	bl	800677c <_malloc_r>
 80064bc:	4606      	mov	r6, r0
 80064be:	b360      	cbz	r0, 800651a <__ssputs_r+0xa2>
 80064c0:	6921      	ldr	r1, [r4, #16]
 80064c2:	464a      	mov	r2, r9
 80064c4:	f000 fef6 	bl	80072b4 <memcpy>
 80064c8:	89a3      	ldrh	r3, [r4, #12]
 80064ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80064ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064d2:	81a3      	strh	r3, [r4, #12]
 80064d4:	6126      	str	r6, [r4, #16]
 80064d6:	6165      	str	r5, [r4, #20]
 80064d8:	444e      	add	r6, r9
 80064da:	eba5 0509 	sub.w	r5, r5, r9
 80064de:	6026      	str	r6, [r4, #0]
 80064e0:	60a5      	str	r5, [r4, #8]
 80064e2:	463e      	mov	r6, r7
 80064e4:	42be      	cmp	r6, r7
 80064e6:	d900      	bls.n	80064ea <__ssputs_r+0x72>
 80064e8:	463e      	mov	r6, r7
 80064ea:	6820      	ldr	r0, [r4, #0]
 80064ec:	4632      	mov	r2, r6
 80064ee:	4641      	mov	r1, r8
 80064f0:	f000 fe6f 	bl	80071d2 <memmove>
 80064f4:	68a3      	ldr	r3, [r4, #8]
 80064f6:	1b9b      	subs	r3, r3, r6
 80064f8:	60a3      	str	r3, [r4, #8]
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	4433      	add	r3, r6
 80064fe:	6023      	str	r3, [r4, #0]
 8006500:	2000      	movs	r0, #0
 8006502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006506:	462a      	mov	r2, r5
 8006508:	f000 fe35 	bl	8007176 <_realloc_r>
 800650c:	4606      	mov	r6, r0
 800650e:	2800      	cmp	r0, #0
 8006510:	d1e0      	bne.n	80064d4 <__ssputs_r+0x5c>
 8006512:	6921      	ldr	r1, [r4, #16]
 8006514:	4650      	mov	r0, sl
 8006516:	f000 ff0d 	bl	8007334 <_free_r>
 800651a:	230c      	movs	r3, #12
 800651c:	f8ca 3000 	str.w	r3, [sl]
 8006520:	89a3      	ldrh	r3, [r4, #12]
 8006522:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006526:	81a3      	strh	r3, [r4, #12]
 8006528:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800652c:	e7e9      	b.n	8006502 <__ssputs_r+0x8a>
	...

08006530 <_svfiprintf_r>:
 8006530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006534:	4698      	mov	r8, r3
 8006536:	898b      	ldrh	r3, [r1, #12]
 8006538:	061b      	lsls	r3, r3, #24
 800653a:	b09d      	sub	sp, #116	@ 0x74
 800653c:	4607      	mov	r7, r0
 800653e:	460d      	mov	r5, r1
 8006540:	4614      	mov	r4, r2
 8006542:	d510      	bpl.n	8006566 <_svfiprintf_r+0x36>
 8006544:	690b      	ldr	r3, [r1, #16]
 8006546:	b973      	cbnz	r3, 8006566 <_svfiprintf_r+0x36>
 8006548:	2140      	movs	r1, #64	@ 0x40
 800654a:	f000 f917 	bl	800677c <_malloc_r>
 800654e:	6028      	str	r0, [r5, #0]
 8006550:	6128      	str	r0, [r5, #16]
 8006552:	b930      	cbnz	r0, 8006562 <_svfiprintf_r+0x32>
 8006554:	230c      	movs	r3, #12
 8006556:	603b      	str	r3, [r7, #0]
 8006558:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800655c:	b01d      	add	sp, #116	@ 0x74
 800655e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006562:	2340      	movs	r3, #64	@ 0x40
 8006564:	616b      	str	r3, [r5, #20]
 8006566:	2300      	movs	r3, #0
 8006568:	9309      	str	r3, [sp, #36]	@ 0x24
 800656a:	2320      	movs	r3, #32
 800656c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006570:	f8cd 800c 	str.w	r8, [sp, #12]
 8006574:	2330      	movs	r3, #48	@ 0x30
 8006576:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006714 <_svfiprintf_r+0x1e4>
 800657a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800657e:	f04f 0901 	mov.w	r9, #1
 8006582:	4623      	mov	r3, r4
 8006584:	469a      	mov	sl, r3
 8006586:	f813 2b01 	ldrb.w	r2, [r3], #1
 800658a:	b10a      	cbz	r2, 8006590 <_svfiprintf_r+0x60>
 800658c:	2a25      	cmp	r2, #37	@ 0x25
 800658e:	d1f9      	bne.n	8006584 <_svfiprintf_r+0x54>
 8006590:	ebba 0b04 	subs.w	fp, sl, r4
 8006594:	d00b      	beq.n	80065ae <_svfiprintf_r+0x7e>
 8006596:	465b      	mov	r3, fp
 8006598:	4622      	mov	r2, r4
 800659a:	4629      	mov	r1, r5
 800659c:	4638      	mov	r0, r7
 800659e:	f7ff ff6b 	bl	8006478 <__ssputs_r>
 80065a2:	3001      	adds	r0, #1
 80065a4:	f000 80a7 	beq.w	80066f6 <_svfiprintf_r+0x1c6>
 80065a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065aa:	445a      	add	r2, fp
 80065ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80065ae:	f89a 3000 	ldrb.w	r3, [sl]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 809f 	beq.w	80066f6 <_svfiprintf_r+0x1c6>
 80065b8:	2300      	movs	r3, #0
 80065ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80065be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065c2:	f10a 0a01 	add.w	sl, sl, #1
 80065c6:	9304      	str	r3, [sp, #16]
 80065c8:	9307      	str	r3, [sp, #28]
 80065ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80065ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80065d0:	4654      	mov	r4, sl
 80065d2:	2205      	movs	r2, #5
 80065d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065d8:	484e      	ldr	r0, [pc, #312]	@ (8006714 <_svfiprintf_r+0x1e4>)
 80065da:	f7f9 fe01 	bl	80001e0 <memchr>
 80065de:	9a04      	ldr	r2, [sp, #16]
 80065e0:	b9d8      	cbnz	r0, 800661a <_svfiprintf_r+0xea>
 80065e2:	06d0      	lsls	r0, r2, #27
 80065e4:	bf44      	itt	mi
 80065e6:	2320      	movmi	r3, #32
 80065e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065ec:	0711      	lsls	r1, r2, #28
 80065ee:	bf44      	itt	mi
 80065f0:	232b      	movmi	r3, #43	@ 0x2b
 80065f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065f6:	f89a 3000 	ldrb.w	r3, [sl]
 80065fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80065fc:	d015      	beq.n	800662a <_svfiprintf_r+0xfa>
 80065fe:	9a07      	ldr	r2, [sp, #28]
 8006600:	4654      	mov	r4, sl
 8006602:	2000      	movs	r0, #0
 8006604:	f04f 0c0a 	mov.w	ip, #10
 8006608:	4621      	mov	r1, r4
 800660a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800660e:	3b30      	subs	r3, #48	@ 0x30
 8006610:	2b09      	cmp	r3, #9
 8006612:	d94b      	bls.n	80066ac <_svfiprintf_r+0x17c>
 8006614:	b1b0      	cbz	r0, 8006644 <_svfiprintf_r+0x114>
 8006616:	9207      	str	r2, [sp, #28]
 8006618:	e014      	b.n	8006644 <_svfiprintf_r+0x114>
 800661a:	eba0 0308 	sub.w	r3, r0, r8
 800661e:	fa09 f303 	lsl.w	r3, r9, r3
 8006622:	4313      	orrs	r3, r2
 8006624:	9304      	str	r3, [sp, #16]
 8006626:	46a2      	mov	sl, r4
 8006628:	e7d2      	b.n	80065d0 <_svfiprintf_r+0xa0>
 800662a:	9b03      	ldr	r3, [sp, #12]
 800662c:	1d19      	adds	r1, r3, #4
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	9103      	str	r1, [sp, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	bfbb      	ittet	lt
 8006636:	425b      	neglt	r3, r3
 8006638:	f042 0202 	orrlt.w	r2, r2, #2
 800663c:	9307      	strge	r3, [sp, #28]
 800663e:	9307      	strlt	r3, [sp, #28]
 8006640:	bfb8      	it	lt
 8006642:	9204      	strlt	r2, [sp, #16]
 8006644:	7823      	ldrb	r3, [r4, #0]
 8006646:	2b2e      	cmp	r3, #46	@ 0x2e
 8006648:	d10a      	bne.n	8006660 <_svfiprintf_r+0x130>
 800664a:	7863      	ldrb	r3, [r4, #1]
 800664c:	2b2a      	cmp	r3, #42	@ 0x2a
 800664e:	d132      	bne.n	80066b6 <_svfiprintf_r+0x186>
 8006650:	9b03      	ldr	r3, [sp, #12]
 8006652:	1d1a      	adds	r2, r3, #4
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	9203      	str	r2, [sp, #12]
 8006658:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800665c:	3402      	adds	r4, #2
 800665e:	9305      	str	r3, [sp, #20]
 8006660:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006724 <_svfiprintf_r+0x1f4>
 8006664:	7821      	ldrb	r1, [r4, #0]
 8006666:	2203      	movs	r2, #3
 8006668:	4650      	mov	r0, sl
 800666a:	f7f9 fdb9 	bl	80001e0 <memchr>
 800666e:	b138      	cbz	r0, 8006680 <_svfiprintf_r+0x150>
 8006670:	9b04      	ldr	r3, [sp, #16]
 8006672:	eba0 000a 	sub.w	r0, r0, sl
 8006676:	2240      	movs	r2, #64	@ 0x40
 8006678:	4082      	lsls	r2, r0
 800667a:	4313      	orrs	r3, r2
 800667c:	3401      	adds	r4, #1
 800667e:	9304      	str	r3, [sp, #16]
 8006680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006684:	4824      	ldr	r0, [pc, #144]	@ (8006718 <_svfiprintf_r+0x1e8>)
 8006686:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800668a:	2206      	movs	r2, #6
 800668c:	f7f9 fda8 	bl	80001e0 <memchr>
 8006690:	2800      	cmp	r0, #0
 8006692:	d036      	beq.n	8006702 <_svfiprintf_r+0x1d2>
 8006694:	4b21      	ldr	r3, [pc, #132]	@ (800671c <_svfiprintf_r+0x1ec>)
 8006696:	bb1b      	cbnz	r3, 80066e0 <_svfiprintf_r+0x1b0>
 8006698:	9b03      	ldr	r3, [sp, #12]
 800669a:	3307      	adds	r3, #7
 800669c:	f023 0307 	bic.w	r3, r3, #7
 80066a0:	3308      	adds	r3, #8
 80066a2:	9303      	str	r3, [sp, #12]
 80066a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066a6:	4433      	add	r3, r6
 80066a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80066aa:	e76a      	b.n	8006582 <_svfiprintf_r+0x52>
 80066ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80066b0:	460c      	mov	r4, r1
 80066b2:	2001      	movs	r0, #1
 80066b4:	e7a8      	b.n	8006608 <_svfiprintf_r+0xd8>
 80066b6:	2300      	movs	r3, #0
 80066b8:	3401      	adds	r4, #1
 80066ba:	9305      	str	r3, [sp, #20]
 80066bc:	4619      	mov	r1, r3
 80066be:	f04f 0c0a 	mov.w	ip, #10
 80066c2:	4620      	mov	r0, r4
 80066c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066c8:	3a30      	subs	r2, #48	@ 0x30
 80066ca:	2a09      	cmp	r2, #9
 80066cc:	d903      	bls.n	80066d6 <_svfiprintf_r+0x1a6>
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d0c6      	beq.n	8006660 <_svfiprintf_r+0x130>
 80066d2:	9105      	str	r1, [sp, #20]
 80066d4:	e7c4      	b.n	8006660 <_svfiprintf_r+0x130>
 80066d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80066da:	4604      	mov	r4, r0
 80066dc:	2301      	movs	r3, #1
 80066de:	e7f0      	b.n	80066c2 <_svfiprintf_r+0x192>
 80066e0:	ab03      	add	r3, sp, #12
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	462a      	mov	r2, r5
 80066e6:	4b0e      	ldr	r3, [pc, #56]	@ (8006720 <_svfiprintf_r+0x1f0>)
 80066e8:	a904      	add	r1, sp, #16
 80066ea:	4638      	mov	r0, r7
 80066ec:	f7fe fba4 	bl	8004e38 <_printf_float>
 80066f0:	1c42      	adds	r2, r0, #1
 80066f2:	4606      	mov	r6, r0
 80066f4:	d1d6      	bne.n	80066a4 <_svfiprintf_r+0x174>
 80066f6:	89ab      	ldrh	r3, [r5, #12]
 80066f8:	065b      	lsls	r3, r3, #25
 80066fa:	f53f af2d 	bmi.w	8006558 <_svfiprintf_r+0x28>
 80066fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006700:	e72c      	b.n	800655c <_svfiprintf_r+0x2c>
 8006702:	ab03      	add	r3, sp, #12
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	462a      	mov	r2, r5
 8006708:	4b05      	ldr	r3, [pc, #20]	@ (8006720 <_svfiprintf_r+0x1f0>)
 800670a:	a904      	add	r1, sp, #16
 800670c:	4638      	mov	r0, r7
 800670e:	f7fe fe2b 	bl	8005368 <_printf_i>
 8006712:	e7ed      	b.n	80066f0 <_svfiprintf_r+0x1c0>
 8006714:	08007fdd 	.word	0x08007fdd
 8006718:	08007fe7 	.word	0x08007fe7
 800671c:	08004e39 	.word	0x08004e39
 8006720:	08006479 	.word	0x08006479
 8006724:	08007fe3 	.word	0x08007fe3

08006728 <malloc>:
 8006728:	4b02      	ldr	r3, [pc, #8]	@ (8006734 <malloc+0xc>)
 800672a:	4601      	mov	r1, r0
 800672c:	6818      	ldr	r0, [r3, #0]
 800672e:	f000 b825 	b.w	800677c <_malloc_r>
 8006732:	bf00      	nop
 8006734:	20000018 	.word	0x20000018

08006738 <sbrk_aligned>:
 8006738:	b570      	push	{r4, r5, r6, lr}
 800673a:	4e0f      	ldr	r6, [pc, #60]	@ (8006778 <sbrk_aligned+0x40>)
 800673c:	460c      	mov	r4, r1
 800673e:	6831      	ldr	r1, [r6, #0]
 8006740:	4605      	mov	r5, r0
 8006742:	b911      	cbnz	r1, 800674a <sbrk_aligned+0x12>
 8006744:	f000 fd94 	bl	8007270 <_sbrk_r>
 8006748:	6030      	str	r0, [r6, #0]
 800674a:	4621      	mov	r1, r4
 800674c:	4628      	mov	r0, r5
 800674e:	f000 fd8f 	bl	8007270 <_sbrk_r>
 8006752:	1c43      	adds	r3, r0, #1
 8006754:	d103      	bne.n	800675e <sbrk_aligned+0x26>
 8006756:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800675a:	4620      	mov	r0, r4
 800675c:	bd70      	pop	{r4, r5, r6, pc}
 800675e:	1cc4      	adds	r4, r0, #3
 8006760:	f024 0403 	bic.w	r4, r4, #3
 8006764:	42a0      	cmp	r0, r4
 8006766:	d0f8      	beq.n	800675a <sbrk_aligned+0x22>
 8006768:	1a21      	subs	r1, r4, r0
 800676a:	4628      	mov	r0, r5
 800676c:	f000 fd80 	bl	8007270 <_sbrk_r>
 8006770:	3001      	adds	r0, #1
 8006772:	d1f2      	bne.n	800675a <sbrk_aligned+0x22>
 8006774:	e7ef      	b.n	8006756 <sbrk_aligned+0x1e>
 8006776:	bf00      	nop
 8006778:	2000040c 	.word	0x2000040c

0800677c <_malloc_r>:
 800677c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006780:	1ccd      	adds	r5, r1, #3
 8006782:	f025 0503 	bic.w	r5, r5, #3
 8006786:	3508      	adds	r5, #8
 8006788:	2d0c      	cmp	r5, #12
 800678a:	bf38      	it	cc
 800678c:	250c      	movcc	r5, #12
 800678e:	2d00      	cmp	r5, #0
 8006790:	4606      	mov	r6, r0
 8006792:	db01      	blt.n	8006798 <_malloc_r+0x1c>
 8006794:	42a9      	cmp	r1, r5
 8006796:	d904      	bls.n	80067a2 <_malloc_r+0x26>
 8006798:	230c      	movs	r3, #12
 800679a:	6033      	str	r3, [r6, #0]
 800679c:	2000      	movs	r0, #0
 800679e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006878 <_malloc_r+0xfc>
 80067a6:	f000 f915 	bl	80069d4 <__malloc_lock>
 80067aa:	f8d8 3000 	ldr.w	r3, [r8]
 80067ae:	461c      	mov	r4, r3
 80067b0:	bb44      	cbnz	r4, 8006804 <_malloc_r+0x88>
 80067b2:	4629      	mov	r1, r5
 80067b4:	4630      	mov	r0, r6
 80067b6:	f7ff ffbf 	bl	8006738 <sbrk_aligned>
 80067ba:	1c43      	adds	r3, r0, #1
 80067bc:	4604      	mov	r4, r0
 80067be:	d158      	bne.n	8006872 <_malloc_r+0xf6>
 80067c0:	f8d8 4000 	ldr.w	r4, [r8]
 80067c4:	4627      	mov	r7, r4
 80067c6:	2f00      	cmp	r7, #0
 80067c8:	d143      	bne.n	8006852 <_malloc_r+0xd6>
 80067ca:	2c00      	cmp	r4, #0
 80067cc:	d04b      	beq.n	8006866 <_malloc_r+0xea>
 80067ce:	6823      	ldr	r3, [r4, #0]
 80067d0:	4639      	mov	r1, r7
 80067d2:	4630      	mov	r0, r6
 80067d4:	eb04 0903 	add.w	r9, r4, r3
 80067d8:	f000 fd4a 	bl	8007270 <_sbrk_r>
 80067dc:	4581      	cmp	r9, r0
 80067de:	d142      	bne.n	8006866 <_malloc_r+0xea>
 80067e0:	6821      	ldr	r1, [r4, #0]
 80067e2:	1a6d      	subs	r5, r5, r1
 80067e4:	4629      	mov	r1, r5
 80067e6:	4630      	mov	r0, r6
 80067e8:	f7ff ffa6 	bl	8006738 <sbrk_aligned>
 80067ec:	3001      	adds	r0, #1
 80067ee:	d03a      	beq.n	8006866 <_malloc_r+0xea>
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	442b      	add	r3, r5
 80067f4:	6023      	str	r3, [r4, #0]
 80067f6:	f8d8 3000 	ldr.w	r3, [r8]
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	bb62      	cbnz	r2, 8006858 <_malloc_r+0xdc>
 80067fe:	f8c8 7000 	str.w	r7, [r8]
 8006802:	e00f      	b.n	8006824 <_malloc_r+0xa8>
 8006804:	6822      	ldr	r2, [r4, #0]
 8006806:	1b52      	subs	r2, r2, r5
 8006808:	d420      	bmi.n	800684c <_malloc_r+0xd0>
 800680a:	2a0b      	cmp	r2, #11
 800680c:	d917      	bls.n	800683e <_malloc_r+0xc2>
 800680e:	1961      	adds	r1, r4, r5
 8006810:	42a3      	cmp	r3, r4
 8006812:	6025      	str	r5, [r4, #0]
 8006814:	bf18      	it	ne
 8006816:	6059      	strne	r1, [r3, #4]
 8006818:	6863      	ldr	r3, [r4, #4]
 800681a:	bf08      	it	eq
 800681c:	f8c8 1000 	streq.w	r1, [r8]
 8006820:	5162      	str	r2, [r4, r5]
 8006822:	604b      	str	r3, [r1, #4]
 8006824:	4630      	mov	r0, r6
 8006826:	f000 f8db 	bl	80069e0 <__malloc_unlock>
 800682a:	f104 000b 	add.w	r0, r4, #11
 800682e:	1d23      	adds	r3, r4, #4
 8006830:	f020 0007 	bic.w	r0, r0, #7
 8006834:	1ac2      	subs	r2, r0, r3
 8006836:	bf1c      	itt	ne
 8006838:	1a1b      	subne	r3, r3, r0
 800683a:	50a3      	strne	r3, [r4, r2]
 800683c:	e7af      	b.n	800679e <_malloc_r+0x22>
 800683e:	6862      	ldr	r2, [r4, #4]
 8006840:	42a3      	cmp	r3, r4
 8006842:	bf0c      	ite	eq
 8006844:	f8c8 2000 	streq.w	r2, [r8]
 8006848:	605a      	strne	r2, [r3, #4]
 800684a:	e7eb      	b.n	8006824 <_malloc_r+0xa8>
 800684c:	4623      	mov	r3, r4
 800684e:	6864      	ldr	r4, [r4, #4]
 8006850:	e7ae      	b.n	80067b0 <_malloc_r+0x34>
 8006852:	463c      	mov	r4, r7
 8006854:	687f      	ldr	r7, [r7, #4]
 8006856:	e7b6      	b.n	80067c6 <_malloc_r+0x4a>
 8006858:	461a      	mov	r2, r3
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	42a3      	cmp	r3, r4
 800685e:	d1fb      	bne.n	8006858 <_malloc_r+0xdc>
 8006860:	2300      	movs	r3, #0
 8006862:	6053      	str	r3, [r2, #4]
 8006864:	e7de      	b.n	8006824 <_malloc_r+0xa8>
 8006866:	230c      	movs	r3, #12
 8006868:	6033      	str	r3, [r6, #0]
 800686a:	4630      	mov	r0, r6
 800686c:	f000 f8b8 	bl	80069e0 <__malloc_unlock>
 8006870:	e794      	b.n	800679c <_malloc_r+0x20>
 8006872:	6005      	str	r5, [r0, #0]
 8006874:	e7d6      	b.n	8006824 <_malloc_r+0xa8>
 8006876:	bf00      	nop
 8006878:	20000410 	.word	0x20000410

0800687c <__sflush_r>:
 800687c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006884:	0716      	lsls	r6, r2, #28
 8006886:	4605      	mov	r5, r0
 8006888:	460c      	mov	r4, r1
 800688a:	d454      	bmi.n	8006936 <__sflush_r+0xba>
 800688c:	684b      	ldr	r3, [r1, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	dc02      	bgt.n	8006898 <__sflush_r+0x1c>
 8006892:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006894:	2b00      	cmp	r3, #0
 8006896:	dd48      	ble.n	800692a <__sflush_r+0xae>
 8006898:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800689a:	2e00      	cmp	r6, #0
 800689c:	d045      	beq.n	800692a <__sflush_r+0xae>
 800689e:	2300      	movs	r3, #0
 80068a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80068a4:	682f      	ldr	r7, [r5, #0]
 80068a6:	6a21      	ldr	r1, [r4, #32]
 80068a8:	602b      	str	r3, [r5, #0]
 80068aa:	d030      	beq.n	800690e <__sflush_r+0x92>
 80068ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80068ae:	89a3      	ldrh	r3, [r4, #12]
 80068b0:	0759      	lsls	r1, r3, #29
 80068b2:	d505      	bpl.n	80068c0 <__sflush_r+0x44>
 80068b4:	6863      	ldr	r3, [r4, #4]
 80068b6:	1ad2      	subs	r2, r2, r3
 80068b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80068ba:	b10b      	cbz	r3, 80068c0 <__sflush_r+0x44>
 80068bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80068be:	1ad2      	subs	r2, r2, r3
 80068c0:	2300      	movs	r3, #0
 80068c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80068c4:	6a21      	ldr	r1, [r4, #32]
 80068c6:	4628      	mov	r0, r5
 80068c8:	47b0      	blx	r6
 80068ca:	1c43      	adds	r3, r0, #1
 80068cc:	89a3      	ldrh	r3, [r4, #12]
 80068ce:	d106      	bne.n	80068de <__sflush_r+0x62>
 80068d0:	6829      	ldr	r1, [r5, #0]
 80068d2:	291d      	cmp	r1, #29
 80068d4:	d82b      	bhi.n	800692e <__sflush_r+0xb2>
 80068d6:	4a2a      	ldr	r2, [pc, #168]	@ (8006980 <__sflush_r+0x104>)
 80068d8:	410a      	asrs	r2, r1
 80068da:	07d6      	lsls	r6, r2, #31
 80068dc:	d427      	bmi.n	800692e <__sflush_r+0xb2>
 80068de:	2200      	movs	r2, #0
 80068e0:	6062      	str	r2, [r4, #4]
 80068e2:	04d9      	lsls	r1, r3, #19
 80068e4:	6922      	ldr	r2, [r4, #16]
 80068e6:	6022      	str	r2, [r4, #0]
 80068e8:	d504      	bpl.n	80068f4 <__sflush_r+0x78>
 80068ea:	1c42      	adds	r2, r0, #1
 80068ec:	d101      	bne.n	80068f2 <__sflush_r+0x76>
 80068ee:	682b      	ldr	r3, [r5, #0]
 80068f0:	b903      	cbnz	r3, 80068f4 <__sflush_r+0x78>
 80068f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80068f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068f6:	602f      	str	r7, [r5, #0]
 80068f8:	b1b9      	cbz	r1, 800692a <__sflush_r+0xae>
 80068fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80068fe:	4299      	cmp	r1, r3
 8006900:	d002      	beq.n	8006908 <__sflush_r+0x8c>
 8006902:	4628      	mov	r0, r5
 8006904:	f000 fd16 	bl	8007334 <_free_r>
 8006908:	2300      	movs	r3, #0
 800690a:	6363      	str	r3, [r4, #52]	@ 0x34
 800690c:	e00d      	b.n	800692a <__sflush_r+0xae>
 800690e:	2301      	movs	r3, #1
 8006910:	4628      	mov	r0, r5
 8006912:	47b0      	blx	r6
 8006914:	4602      	mov	r2, r0
 8006916:	1c50      	adds	r0, r2, #1
 8006918:	d1c9      	bne.n	80068ae <__sflush_r+0x32>
 800691a:	682b      	ldr	r3, [r5, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d0c6      	beq.n	80068ae <__sflush_r+0x32>
 8006920:	2b1d      	cmp	r3, #29
 8006922:	d001      	beq.n	8006928 <__sflush_r+0xac>
 8006924:	2b16      	cmp	r3, #22
 8006926:	d11e      	bne.n	8006966 <__sflush_r+0xea>
 8006928:	602f      	str	r7, [r5, #0]
 800692a:	2000      	movs	r0, #0
 800692c:	e022      	b.n	8006974 <__sflush_r+0xf8>
 800692e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006932:	b21b      	sxth	r3, r3
 8006934:	e01b      	b.n	800696e <__sflush_r+0xf2>
 8006936:	690f      	ldr	r7, [r1, #16]
 8006938:	2f00      	cmp	r7, #0
 800693a:	d0f6      	beq.n	800692a <__sflush_r+0xae>
 800693c:	0793      	lsls	r3, r2, #30
 800693e:	680e      	ldr	r6, [r1, #0]
 8006940:	bf08      	it	eq
 8006942:	694b      	ldreq	r3, [r1, #20]
 8006944:	600f      	str	r7, [r1, #0]
 8006946:	bf18      	it	ne
 8006948:	2300      	movne	r3, #0
 800694a:	eba6 0807 	sub.w	r8, r6, r7
 800694e:	608b      	str	r3, [r1, #8]
 8006950:	f1b8 0f00 	cmp.w	r8, #0
 8006954:	dde9      	ble.n	800692a <__sflush_r+0xae>
 8006956:	6a21      	ldr	r1, [r4, #32]
 8006958:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800695a:	4643      	mov	r3, r8
 800695c:	463a      	mov	r2, r7
 800695e:	4628      	mov	r0, r5
 8006960:	47b0      	blx	r6
 8006962:	2800      	cmp	r0, #0
 8006964:	dc08      	bgt.n	8006978 <__sflush_r+0xfc>
 8006966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800696a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800696e:	81a3      	strh	r3, [r4, #12]
 8006970:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006978:	4407      	add	r7, r0
 800697a:	eba8 0800 	sub.w	r8, r8, r0
 800697e:	e7e7      	b.n	8006950 <__sflush_r+0xd4>
 8006980:	dfbffffe 	.word	0xdfbffffe

08006984 <_fflush_r>:
 8006984:	b538      	push	{r3, r4, r5, lr}
 8006986:	690b      	ldr	r3, [r1, #16]
 8006988:	4605      	mov	r5, r0
 800698a:	460c      	mov	r4, r1
 800698c:	b913      	cbnz	r3, 8006994 <_fflush_r+0x10>
 800698e:	2500      	movs	r5, #0
 8006990:	4628      	mov	r0, r5
 8006992:	bd38      	pop	{r3, r4, r5, pc}
 8006994:	b118      	cbz	r0, 800699e <_fflush_r+0x1a>
 8006996:	6a03      	ldr	r3, [r0, #32]
 8006998:	b90b      	cbnz	r3, 800699e <_fflush_r+0x1a>
 800699a:	f7fe feb1 	bl	8005700 <__sinit>
 800699e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d0f3      	beq.n	800698e <_fflush_r+0xa>
 80069a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80069a8:	07d0      	lsls	r0, r2, #31
 80069aa:	d404      	bmi.n	80069b6 <_fflush_r+0x32>
 80069ac:	0599      	lsls	r1, r3, #22
 80069ae:	d402      	bmi.n	80069b6 <_fflush_r+0x32>
 80069b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069b2:	f7fe ff12 	bl	80057da <__retarget_lock_acquire_recursive>
 80069b6:	4628      	mov	r0, r5
 80069b8:	4621      	mov	r1, r4
 80069ba:	f7ff ff5f 	bl	800687c <__sflush_r>
 80069be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80069c0:	07da      	lsls	r2, r3, #31
 80069c2:	4605      	mov	r5, r0
 80069c4:	d4e4      	bmi.n	8006990 <_fflush_r+0xc>
 80069c6:	89a3      	ldrh	r3, [r4, #12]
 80069c8:	059b      	lsls	r3, r3, #22
 80069ca:	d4e1      	bmi.n	8006990 <_fflush_r+0xc>
 80069cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069ce:	f7fe ff05 	bl	80057dc <__retarget_lock_release_recursive>
 80069d2:	e7dd      	b.n	8006990 <_fflush_r+0xc>

080069d4 <__malloc_lock>:
 80069d4:	4801      	ldr	r0, [pc, #4]	@ (80069dc <__malloc_lock+0x8>)
 80069d6:	f7fe bf00 	b.w	80057da <__retarget_lock_acquire_recursive>
 80069da:	bf00      	nop
 80069dc:	20000408 	.word	0x20000408

080069e0 <__malloc_unlock>:
 80069e0:	4801      	ldr	r0, [pc, #4]	@ (80069e8 <__malloc_unlock+0x8>)
 80069e2:	f7fe befb 	b.w	80057dc <__retarget_lock_release_recursive>
 80069e6:	bf00      	nop
 80069e8:	20000408 	.word	0x20000408

080069ec <_Balloc>:
 80069ec:	b570      	push	{r4, r5, r6, lr}
 80069ee:	69c6      	ldr	r6, [r0, #28]
 80069f0:	4604      	mov	r4, r0
 80069f2:	460d      	mov	r5, r1
 80069f4:	b976      	cbnz	r6, 8006a14 <_Balloc+0x28>
 80069f6:	2010      	movs	r0, #16
 80069f8:	f7ff fe96 	bl	8006728 <malloc>
 80069fc:	4602      	mov	r2, r0
 80069fe:	61e0      	str	r0, [r4, #28]
 8006a00:	b920      	cbnz	r0, 8006a0c <_Balloc+0x20>
 8006a02:	4b18      	ldr	r3, [pc, #96]	@ (8006a64 <_Balloc+0x78>)
 8006a04:	4818      	ldr	r0, [pc, #96]	@ (8006a68 <_Balloc+0x7c>)
 8006a06:	216b      	movs	r1, #107	@ 0x6b
 8006a08:	f000 fc62 	bl	80072d0 <__assert_func>
 8006a0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a10:	6006      	str	r6, [r0, #0]
 8006a12:	60c6      	str	r6, [r0, #12]
 8006a14:	69e6      	ldr	r6, [r4, #28]
 8006a16:	68f3      	ldr	r3, [r6, #12]
 8006a18:	b183      	cbz	r3, 8006a3c <_Balloc+0x50>
 8006a1a:	69e3      	ldr	r3, [r4, #28]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a22:	b9b8      	cbnz	r0, 8006a54 <_Balloc+0x68>
 8006a24:	2101      	movs	r1, #1
 8006a26:	fa01 f605 	lsl.w	r6, r1, r5
 8006a2a:	1d72      	adds	r2, r6, #5
 8006a2c:	0092      	lsls	r2, r2, #2
 8006a2e:	4620      	mov	r0, r4
 8006a30:	f000 fc6c 	bl	800730c <_calloc_r>
 8006a34:	b160      	cbz	r0, 8006a50 <_Balloc+0x64>
 8006a36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a3a:	e00e      	b.n	8006a5a <_Balloc+0x6e>
 8006a3c:	2221      	movs	r2, #33	@ 0x21
 8006a3e:	2104      	movs	r1, #4
 8006a40:	4620      	mov	r0, r4
 8006a42:	f000 fc63 	bl	800730c <_calloc_r>
 8006a46:	69e3      	ldr	r3, [r4, #28]
 8006a48:	60f0      	str	r0, [r6, #12]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1e4      	bne.n	8006a1a <_Balloc+0x2e>
 8006a50:	2000      	movs	r0, #0
 8006a52:	bd70      	pop	{r4, r5, r6, pc}
 8006a54:	6802      	ldr	r2, [r0, #0]
 8006a56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a60:	e7f7      	b.n	8006a52 <_Balloc+0x66>
 8006a62:	bf00      	nop
 8006a64:	08007f5d 	.word	0x08007f5d
 8006a68:	08007fee 	.word	0x08007fee

08006a6c <_Bfree>:
 8006a6c:	b570      	push	{r4, r5, r6, lr}
 8006a6e:	69c6      	ldr	r6, [r0, #28]
 8006a70:	4605      	mov	r5, r0
 8006a72:	460c      	mov	r4, r1
 8006a74:	b976      	cbnz	r6, 8006a94 <_Bfree+0x28>
 8006a76:	2010      	movs	r0, #16
 8006a78:	f7ff fe56 	bl	8006728 <malloc>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	61e8      	str	r0, [r5, #28]
 8006a80:	b920      	cbnz	r0, 8006a8c <_Bfree+0x20>
 8006a82:	4b09      	ldr	r3, [pc, #36]	@ (8006aa8 <_Bfree+0x3c>)
 8006a84:	4809      	ldr	r0, [pc, #36]	@ (8006aac <_Bfree+0x40>)
 8006a86:	218f      	movs	r1, #143	@ 0x8f
 8006a88:	f000 fc22 	bl	80072d0 <__assert_func>
 8006a8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a90:	6006      	str	r6, [r0, #0]
 8006a92:	60c6      	str	r6, [r0, #12]
 8006a94:	b13c      	cbz	r4, 8006aa6 <_Bfree+0x3a>
 8006a96:	69eb      	ldr	r3, [r5, #28]
 8006a98:	6862      	ldr	r2, [r4, #4]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006aa0:	6021      	str	r1, [r4, #0]
 8006aa2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006aa6:	bd70      	pop	{r4, r5, r6, pc}
 8006aa8:	08007f5d 	.word	0x08007f5d
 8006aac:	08007fee 	.word	0x08007fee

08006ab0 <__multadd>:
 8006ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ab4:	690d      	ldr	r5, [r1, #16]
 8006ab6:	4607      	mov	r7, r0
 8006ab8:	460c      	mov	r4, r1
 8006aba:	461e      	mov	r6, r3
 8006abc:	f101 0c14 	add.w	ip, r1, #20
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	f8dc 3000 	ldr.w	r3, [ip]
 8006ac6:	b299      	uxth	r1, r3
 8006ac8:	fb02 6101 	mla	r1, r2, r1, r6
 8006acc:	0c1e      	lsrs	r6, r3, #16
 8006ace:	0c0b      	lsrs	r3, r1, #16
 8006ad0:	fb02 3306 	mla	r3, r2, r6, r3
 8006ad4:	b289      	uxth	r1, r1
 8006ad6:	3001      	adds	r0, #1
 8006ad8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006adc:	4285      	cmp	r5, r0
 8006ade:	f84c 1b04 	str.w	r1, [ip], #4
 8006ae2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ae6:	dcec      	bgt.n	8006ac2 <__multadd+0x12>
 8006ae8:	b30e      	cbz	r6, 8006b2e <__multadd+0x7e>
 8006aea:	68a3      	ldr	r3, [r4, #8]
 8006aec:	42ab      	cmp	r3, r5
 8006aee:	dc19      	bgt.n	8006b24 <__multadd+0x74>
 8006af0:	6861      	ldr	r1, [r4, #4]
 8006af2:	4638      	mov	r0, r7
 8006af4:	3101      	adds	r1, #1
 8006af6:	f7ff ff79 	bl	80069ec <_Balloc>
 8006afa:	4680      	mov	r8, r0
 8006afc:	b928      	cbnz	r0, 8006b0a <__multadd+0x5a>
 8006afe:	4602      	mov	r2, r0
 8006b00:	4b0c      	ldr	r3, [pc, #48]	@ (8006b34 <__multadd+0x84>)
 8006b02:	480d      	ldr	r0, [pc, #52]	@ (8006b38 <__multadd+0x88>)
 8006b04:	21ba      	movs	r1, #186	@ 0xba
 8006b06:	f000 fbe3 	bl	80072d0 <__assert_func>
 8006b0a:	6922      	ldr	r2, [r4, #16]
 8006b0c:	3202      	adds	r2, #2
 8006b0e:	f104 010c 	add.w	r1, r4, #12
 8006b12:	0092      	lsls	r2, r2, #2
 8006b14:	300c      	adds	r0, #12
 8006b16:	f000 fbcd 	bl	80072b4 <memcpy>
 8006b1a:	4621      	mov	r1, r4
 8006b1c:	4638      	mov	r0, r7
 8006b1e:	f7ff ffa5 	bl	8006a6c <_Bfree>
 8006b22:	4644      	mov	r4, r8
 8006b24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b28:	3501      	adds	r5, #1
 8006b2a:	615e      	str	r6, [r3, #20]
 8006b2c:	6125      	str	r5, [r4, #16]
 8006b2e:	4620      	mov	r0, r4
 8006b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b34:	08007fcc 	.word	0x08007fcc
 8006b38:	08007fee 	.word	0x08007fee

08006b3c <__hi0bits>:
 8006b3c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006b40:	4603      	mov	r3, r0
 8006b42:	bf36      	itet	cc
 8006b44:	0403      	lslcc	r3, r0, #16
 8006b46:	2000      	movcs	r0, #0
 8006b48:	2010      	movcc	r0, #16
 8006b4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b4e:	bf3c      	itt	cc
 8006b50:	021b      	lslcc	r3, r3, #8
 8006b52:	3008      	addcc	r0, #8
 8006b54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b58:	bf3c      	itt	cc
 8006b5a:	011b      	lslcc	r3, r3, #4
 8006b5c:	3004      	addcc	r0, #4
 8006b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b62:	bf3c      	itt	cc
 8006b64:	009b      	lslcc	r3, r3, #2
 8006b66:	3002      	addcc	r0, #2
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	db05      	blt.n	8006b78 <__hi0bits+0x3c>
 8006b6c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006b70:	f100 0001 	add.w	r0, r0, #1
 8006b74:	bf08      	it	eq
 8006b76:	2020      	moveq	r0, #32
 8006b78:	4770      	bx	lr

08006b7a <__lo0bits>:
 8006b7a:	6803      	ldr	r3, [r0, #0]
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	f013 0007 	ands.w	r0, r3, #7
 8006b82:	d00b      	beq.n	8006b9c <__lo0bits+0x22>
 8006b84:	07d9      	lsls	r1, r3, #31
 8006b86:	d421      	bmi.n	8006bcc <__lo0bits+0x52>
 8006b88:	0798      	lsls	r0, r3, #30
 8006b8a:	bf49      	itett	mi
 8006b8c:	085b      	lsrmi	r3, r3, #1
 8006b8e:	089b      	lsrpl	r3, r3, #2
 8006b90:	2001      	movmi	r0, #1
 8006b92:	6013      	strmi	r3, [r2, #0]
 8006b94:	bf5c      	itt	pl
 8006b96:	6013      	strpl	r3, [r2, #0]
 8006b98:	2002      	movpl	r0, #2
 8006b9a:	4770      	bx	lr
 8006b9c:	b299      	uxth	r1, r3
 8006b9e:	b909      	cbnz	r1, 8006ba4 <__lo0bits+0x2a>
 8006ba0:	0c1b      	lsrs	r3, r3, #16
 8006ba2:	2010      	movs	r0, #16
 8006ba4:	b2d9      	uxtb	r1, r3
 8006ba6:	b909      	cbnz	r1, 8006bac <__lo0bits+0x32>
 8006ba8:	3008      	adds	r0, #8
 8006baa:	0a1b      	lsrs	r3, r3, #8
 8006bac:	0719      	lsls	r1, r3, #28
 8006bae:	bf04      	itt	eq
 8006bb0:	091b      	lsreq	r3, r3, #4
 8006bb2:	3004      	addeq	r0, #4
 8006bb4:	0799      	lsls	r1, r3, #30
 8006bb6:	bf04      	itt	eq
 8006bb8:	089b      	lsreq	r3, r3, #2
 8006bba:	3002      	addeq	r0, #2
 8006bbc:	07d9      	lsls	r1, r3, #31
 8006bbe:	d403      	bmi.n	8006bc8 <__lo0bits+0x4e>
 8006bc0:	085b      	lsrs	r3, r3, #1
 8006bc2:	f100 0001 	add.w	r0, r0, #1
 8006bc6:	d003      	beq.n	8006bd0 <__lo0bits+0x56>
 8006bc8:	6013      	str	r3, [r2, #0]
 8006bca:	4770      	bx	lr
 8006bcc:	2000      	movs	r0, #0
 8006bce:	4770      	bx	lr
 8006bd0:	2020      	movs	r0, #32
 8006bd2:	4770      	bx	lr

08006bd4 <__i2b>:
 8006bd4:	b510      	push	{r4, lr}
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	2101      	movs	r1, #1
 8006bda:	f7ff ff07 	bl	80069ec <_Balloc>
 8006bde:	4602      	mov	r2, r0
 8006be0:	b928      	cbnz	r0, 8006bee <__i2b+0x1a>
 8006be2:	4b05      	ldr	r3, [pc, #20]	@ (8006bf8 <__i2b+0x24>)
 8006be4:	4805      	ldr	r0, [pc, #20]	@ (8006bfc <__i2b+0x28>)
 8006be6:	f240 1145 	movw	r1, #325	@ 0x145
 8006bea:	f000 fb71 	bl	80072d0 <__assert_func>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	6144      	str	r4, [r0, #20]
 8006bf2:	6103      	str	r3, [r0, #16]
 8006bf4:	bd10      	pop	{r4, pc}
 8006bf6:	bf00      	nop
 8006bf8:	08007fcc 	.word	0x08007fcc
 8006bfc:	08007fee 	.word	0x08007fee

08006c00 <__multiply>:
 8006c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c04:	4614      	mov	r4, r2
 8006c06:	690a      	ldr	r2, [r1, #16]
 8006c08:	6923      	ldr	r3, [r4, #16]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	bfa8      	it	ge
 8006c0e:	4623      	movge	r3, r4
 8006c10:	460f      	mov	r7, r1
 8006c12:	bfa4      	itt	ge
 8006c14:	460c      	movge	r4, r1
 8006c16:	461f      	movge	r7, r3
 8006c18:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006c1c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006c20:	68a3      	ldr	r3, [r4, #8]
 8006c22:	6861      	ldr	r1, [r4, #4]
 8006c24:	eb0a 0609 	add.w	r6, sl, r9
 8006c28:	42b3      	cmp	r3, r6
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	bfb8      	it	lt
 8006c2e:	3101      	addlt	r1, #1
 8006c30:	f7ff fedc 	bl	80069ec <_Balloc>
 8006c34:	b930      	cbnz	r0, 8006c44 <__multiply+0x44>
 8006c36:	4602      	mov	r2, r0
 8006c38:	4b44      	ldr	r3, [pc, #272]	@ (8006d4c <__multiply+0x14c>)
 8006c3a:	4845      	ldr	r0, [pc, #276]	@ (8006d50 <__multiply+0x150>)
 8006c3c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006c40:	f000 fb46 	bl	80072d0 <__assert_func>
 8006c44:	f100 0514 	add.w	r5, r0, #20
 8006c48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c4c:	462b      	mov	r3, r5
 8006c4e:	2200      	movs	r2, #0
 8006c50:	4543      	cmp	r3, r8
 8006c52:	d321      	bcc.n	8006c98 <__multiply+0x98>
 8006c54:	f107 0114 	add.w	r1, r7, #20
 8006c58:	f104 0214 	add.w	r2, r4, #20
 8006c5c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006c60:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006c64:	9302      	str	r3, [sp, #8]
 8006c66:	1b13      	subs	r3, r2, r4
 8006c68:	3b15      	subs	r3, #21
 8006c6a:	f023 0303 	bic.w	r3, r3, #3
 8006c6e:	3304      	adds	r3, #4
 8006c70:	f104 0715 	add.w	r7, r4, #21
 8006c74:	42ba      	cmp	r2, r7
 8006c76:	bf38      	it	cc
 8006c78:	2304      	movcc	r3, #4
 8006c7a:	9301      	str	r3, [sp, #4]
 8006c7c:	9b02      	ldr	r3, [sp, #8]
 8006c7e:	9103      	str	r1, [sp, #12]
 8006c80:	428b      	cmp	r3, r1
 8006c82:	d80c      	bhi.n	8006c9e <__multiply+0x9e>
 8006c84:	2e00      	cmp	r6, #0
 8006c86:	dd03      	ble.n	8006c90 <__multiply+0x90>
 8006c88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d05b      	beq.n	8006d48 <__multiply+0x148>
 8006c90:	6106      	str	r6, [r0, #16]
 8006c92:	b005      	add	sp, #20
 8006c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c98:	f843 2b04 	str.w	r2, [r3], #4
 8006c9c:	e7d8      	b.n	8006c50 <__multiply+0x50>
 8006c9e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006ca2:	f1ba 0f00 	cmp.w	sl, #0
 8006ca6:	d024      	beq.n	8006cf2 <__multiply+0xf2>
 8006ca8:	f104 0e14 	add.w	lr, r4, #20
 8006cac:	46a9      	mov	r9, r5
 8006cae:	f04f 0c00 	mov.w	ip, #0
 8006cb2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006cb6:	f8d9 3000 	ldr.w	r3, [r9]
 8006cba:	fa1f fb87 	uxth.w	fp, r7
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	fb0a 330b 	mla	r3, sl, fp, r3
 8006cc4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006cc8:	f8d9 7000 	ldr.w	r7, [r9]
 8006ccc:	4463      	add	r3, ip
 8006cce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006cd2:	fb0a c70b 	mla	r7, sl, fp, ip
 8006cd6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006ce0:	4572      	cmp	r2, lr
 8006ce2:	f849 3b04 	str.w	r3, [r9], #4
 8006ce6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006cea:	d8e2      	bhi.n	8006cb2 <__multiply+0xb2>
 8006cec:	9b01      	ldr	r3, [sp, #4]
 8006cee:	f845 c003 	str.w	ip, [r5, r3]
 8006cf2:	9b03      	ldr	r3, [sp, #12]
 8006cf4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006cf8:	3104      	adds	r1, #4
 8006cfa:	f1b9 0f00 	cmp.w	r9, #0
 8006cfe:	d021      	beq.n	8006d44 <__multiply+0x144>
 8006d00:	682b      	ldr	r3, [r5, #0]
 8006d02:	f104 0c14 	add.w	ip, r4, #20
 8006d06:	46ae      	mov	lr, r5
 8006d08:	f04f 0a00 	mov.w	sl, #0
 8006d0c:	f8bc b000 	ldrh.w	fp, [ip]
 8006d10:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006d14:	fb09 770b 	mla	r7, r9, fp, r7
 8006d18:	4457      	add	r7, sl
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006d20:	f84e 3b04 	str.w	r3, [lr], #4
 8006d24:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d2c:	f8be 3000 	ldrh.w	r3, [lr]
 8006d30:	fb09 330a 	mla	r3, r9, sl, r3
 8006d34:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006d38:	4562      	cmp	r2, ip
 8006d3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d3e:	d8e5      	bhi.n	8006d0c <__multiply+0x10c>
 8006d40:	9f01      	ldr	r7, [sp, #4]
 8006d42:	51eb      	str	r3, [r5, r7]
 8006d44:	3504      	adds	r5, #4
 8006d46:	e799      	b.n	8006c7c <__multiply+0x7c>
 8006d48:	3e01      	subs	r6, #1
 8006d4a:	e79b      	b.n	8006c84 <__multiply+0x84>
 8006d4c:	08007fcc 	.word	0x08007fcc
 8006d50:	08007fee 	.word	0x08007fee

08006d54 <__pow5mult>:
 8006d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d58:	4615      	mov	r5, r2
 8006d5a:	f012 0203 	ands.w	r2, r2, #3
 8006d5e:	4607      	mov	r7, r0
 8006d60:	460e      	mov	r6, r1
 8006d62:	d007      	beq.n	8006d74 <__pow5mult+0x20>
 8006d64:	4c25      	ldr	r4, [pc, #148]	@ (8006dfc <__pow5mult+0xa8>)
 8006d66:	3a01      	subs	r2, #1
 8006d68:	2300      	movs	r3, #0
 8006d6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d6e:	f7ff fe9f 	bl	8006ab0 <__multadd>
 8006d72:	4606      	mov	r6, r0
 8006d74:	10ad      	asrs	r5, r5, #2
 8006d76:	d03d      	beq.n	8006df4 <__pow5mult+0xa0>
 8006d78:	69fc      	ldr	r4, [r7, #28]
 8006d7a:	b97c      	cbnz	r4, 8006d9c <__pow5mult+0x48>
 8006d7c:	2010      	movs	r0, #16
 8006d7e:	f7ff fcd3 	bl	8006728 <malloc>
 8006d82:	4602      	mov	r2, r0
 8006d84:	61f8      	str	r0, [r7, #28]
 8006d86:	b928      	cbnz	r0, 8006d94 <__pow5mult+0x40>
 8006d88:	4b1d      	ldr	r3, [pc, #116]	@ (8006e00 <__pow5mult+0xac>)
 8006d8a:	481e      	ldr	r0, [pc, #120]	@ (8006e04 <__pow5mult+0xb0>)
 8006d8c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006d90:	f000 fa9e 	bl	80072d0 <__assert_func>
 8006d94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d98:	6004      	str	r4, [r0, #0]
 8006d9a:	60c4      	str	r4, [r0, #12]
 8006d9c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006da0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006da4:	b94c      	cbnz	r4, 8006dba <__pow5mult+0x66>
 8006da6:	f240 2171 	movw	r1, #625	@ 0x271
 8006daa:	4638      	mov	r0, r7
 8006dac:	f7ff ff12 	bl	8006bd4 <__i2b>
 8006db0:	2300      	movs	r3, #0
 8006db2:	f8c8 0008 	str.w	r0, [r8, #8]
 8006db6:	4604      	mov	r4, r0
 8006db8:	6003      	str	r3, [r0, #0]
 8006dba:	f04f 0900 	mov.w	r9, #0
 8006dbe:	07eb      	lsls	r3, r5, #31
 8006dc0:	d50a      	bpl.n	8006dd8 <__pow5mult+0x84>
 8006dc2:	4631      	mov	r1, r6
 8006dc4:	4622      	mov	r2, r4
 8006dc6:	4638      	mov	r0, r7
 8006dc8:	f7ff ff1a 	bl	8006c00 <__multiply>
 8006dcc:	4631      	mov	r1, r6
 8006dce:	4680      	mov	r8, r0
 8006dd0:	4638      	mov	r0, r7
 8006dd2:	f7ff fe4b 	bl	8006a6c <_Bfree>
 8006dd6:	4646      	mov	r6, r8
 8006dd8:	106d      	asrs	r5, r5, #1
 8006dda:	d00b      	beq.n	8006df4 <__pow5mult+0xa0>
 8006ddc:	6820      	ldr	r0, [r4, #0]
 8006dde:	b938      	cbnz	r0, 8006df0 <__pow5mult+0x9c>
 8006de0:	4622      	mov	r2, r4
 8006de2:	4621      	mov	r1, r4
 8006de4:	4638      	mov	r0, r7
 8006de6:	f7ff ff0b 	bl	8006c00 <__multiply>
 8006dea:	6020      	str	r0, [r4, #0]
 8006dec:	f8c0 9000 	str.w	r9, [r0]
 8006df0:	4604      	mov	r4, r0
 8006df2:	e7e4      	b.n	8006dbe <__pow5mult+0x6a>
 8006df4:	4630      	mov	r0, r6
 8006df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dfa:	bf00      	nop
 8006dfc:	08008048 	.word	0x08008048
 8006e00:	08007f5d 	.word	0x08007f5d
 8006e04:	08007fee 	.word	0x08007fee

08006e08 <__lshift>:
 8006e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e0c:	460c      	mov	r4, r1
 8006e0e:	6849      	ldr	r1, [r1, #4]
 8006e10:	6923      	ldr	r3, [r4, #16]
 8006e12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e16:	68a3      	ldr	r3, [r4, #8]
 8006e18:	4607      	mov	r7, r0
 8006e1a:	4691      	mov	r9, r2
 8006e1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e20:	f108 0601 	add.w	r6, r8, #1
 8006e24:	42b3      	cmp	r3, r6
 8006e26:	db0b      	blt.n	8006e40 <__lshift+0x38>
 8006e28:	4638      	mov	r0, r7
 8006e2a:	f7ff fddf 	bl	80069ec <_Balloc>
 8006e2e:	4605      	mov	r5, r0
 8006e30:	b948      	cbnz	r0, 8006e46 <__lshift+0x3e>
 8006e32:	4602      	mov	r2, r0
 8006e34:	4b28      	ldr	r3, [pc, #160]	@ (8006ed8 <__lshift+0xd0>)
 8006e36:	4829      	ldr	r0, [pc, #164]	@ (8006edc <__lshift+0xd4>)
 8006e38:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006e3c:	f000 fa48 	bl	80072d0 <__assert_func>
 8006e40:	3101      	adds	r1, #1
 8006e42:	005b      	lsls	r3, r3, #1
 8006e44:	e7ee      	b.n	8006e24 <__lshift+0x1c>
 8006e46:	2300      	movs	r3, #0
 8006e48:	f100 0114 	add.w	r1, r0, #20
 8006e4c:	f100 0210 	add.w	r2, r0, #16
 8006e50:	4618      	mov	r0, r3
 8006e52:	4553      	cmp	r3, sl
 8006e54:	db33      	blt.n	8006ebe <__lshift+0xb6>
 8006e56:	6920      	ldr	r0, [r4, #16]
 8006e58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e5c:	f104 0314 	add.w	r3, r4, #20
 8006e60:	f019 091f 	ands.w	r9, r9, #31
 8006e64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e6c:	d02b      	beq.n	8006ec6 <__lshift+0xbe>
 8006e6e:	f1c9 0e20 	rsb	lr, r9, #32
 8006e72:	468a      	mov	sl, r1
 8006e74:	2200      	movs	r2, #0
 8006e76:	6818      	ldr	r0, [r3, #0]
 8006e78:	fa00 f009 	lsl.w	r0, r0, r9
 8006e7c:	4310      	orrs	r0, r2
 8006e7e:	f84a 0b04 	str.w	r0, [sl], #4
 8006e82:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e86:	459c      	cmp	ip, r3
 8006e88:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e8c:	d8f3      	bhi.n	8006e76 <__lshift+0x6e>
 8006e8e:	ebac 0304 	sub.w	r3, ip, r4
 8006e92:	3b15      	subs	r3, #21
 8006e94:	f023 0303 	bic.w	r3, r3, #3
 8006e98:	3304      	adds	r3, #4
 8006e9a:	f104 0015 	add.w	r0, r4, #21
 8006e9e:	4584      	cmp	ip, r0
 8006ea0:	bf38      	it	cc
 8006ea2:	2304      	movcc	r3, #4
 8006ea4:	50ca      	str	r2, [r1, r3]
 8006ea6:	b10a      	cbz	r2, 8006eac <__lshift+0xa4>
 8006ea8:	f108 0602 	add.w	r6, r8, #2
 8006eac:	3e01      	subs	r6, #1
 8006eae:	4638      	mov	r0, r7
 8006eb0:	612e      	str	r6, [r5, #16]
 8006eb2:	4621      	mov	r1, r4
 8006eb4:	f7ff fdda 	bl	8006a6c <_Bfree>
 8006eb8:	4628      	mov	r0, r5
 8006eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ebe:	f842 0f04 	str.w	r0, [r2, #4]!
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	e7c5      	b.n	8006e52 <__lshift+0x4a>
 8006ec6:	3904      	subs	r1, #4
 8006ec8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ecc:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ed0:	459c      	cmp	ip, r3
 8006ed2:	d8f9      	bhi.n	8006ec8 <__lshift+0xc0>
 8006ed4:	e7ea      	b.n	8006eac <__lshift+0xa4>
 8006ed6:	bf00      	nop
 8006ed8:	08007fcc 	.word	0x08007fcc
 8006edc:	08007fee 	.word	0x08007fee

08006ee0 <__mcmp>:
 8006ee0:	690a      	ldr	r2, [r1, #16]
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	6900      	ldr	r0, [r0, #16]
 8006ee6:	1a80      	subs	r0, r0, r2
 8006ee8:	b530      	push	{r4, r5, lr}
 8006eea:	d10e      	bne.n	8006f0a <__mcmp+0x2a>
 8006eec:	3314      	adds	r3, #20
 8006eee:	3114      	adds	r1, #20
 8006ef0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006ef4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006ef8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006efc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006f00:	4295      	cmp	r5, r2
 8006f02:	d003      	beq.n	8006f0c <__mcmp+0x2c>
 8006f04:	d205      	bcs.n	8006f12 <__mcmp+0x32>
 8006f06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f0a:	bd30      	pop	{r4, r5, pc}
 8006f0c:	42a3      	cmp	r3, r4
 8006f0e:	d3f3      	bcc.n	8006ef8 <__mcmp+0x18>
 8006f10:	e7fb      	b.n	8006f0a <__mcmp+0x2a>
 8006f12:	2001      	movs	r0, #1
 8006f14:	e7f9      	b.n	8006f0a <__mcmp+0x2a>
	...

08006f18 <__mdiff>:
 8006f18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f1c:	4689      	mov	r9, r1
 8006f1e:	4606      	mov	r6, r0
 8006f20:	4611      	mov	r1, r2
 8006f22:	4648      	mov	r0, r9
 8006f24:	4614      	mov	r4, r2
 8006f26:	f7ff ffdb 	bl	8006ee0 <__mcmp>
 8006f2a:	1e05      	subs	r5, r0, #0
 8006f2c:	d112      	bne.n	8006f54 <__mdiff+0x3c>
 8006f2e:	4629      	mov	r1, r5
 8006f30:	4630      	mov	r0, r6
 8006f32:	f7ff fd5b 	bl	80069ec <_Balloc>
 8006f36:	4602      	mov	r2, r0
 8006f38:	b928      	cbnz	r0, 8006f46 <__mdiff+0x2e>
 8006f3a:	4b3f      	ldr	r3, [pc, #252]	@ (8007038 <__mdiff+0x120>)
 8006f3c:	f240 2137 	movw	r1, #567	@ 0x237
 8006f40:	483e      	ldr	r0, [pc, #248]	@ (800703c <__mdiff+0x124>)
 8006f42:	f000 f9c5 	bl	80072d0 <__assert_func>
 8006f46:	2301      	movs	r3, #1
 8006f48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f4c:	4610      	mov	r0, r2
 8006f4e:	b003      	add	sp, #12
 8006f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f54:	bfbc      	itt	lt
 8006f56:	464b      	movlt	r3, r9
 8006f58:	46a1      	movlt	r9, r4
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006f60:	bfba      	itte	lt
 8006f62:	461c      	movlt	r4, r3
 8006f64:	2501      	movlt	r5, #1
 8006f66:	2500      	movge	r5, #0
 8006f68:	f7ff fd40 	bl	80069ec <_Balloc>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	b918      	cbnz	r0, 8006f78 <__mdiff+0x60>
 8006f70:	4b31      	ldr	r3, [pc, #196]	@ (8007038 <__mdiff+0x120>)
 8006f72:	f240 2145 	movw	r1, #581	@ 0x245
 8006f76:	e7e3      	b.n	8006f40 <__mdiff+0x28>
 8006f78:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006f7c:	6926      	ldr	r6, [r4, #16]
 8006f7e:	60c5      	str	r5, [r0, #12]
 8006f80:	f109 0310 	add.w	r3, r9, #16
 8006f84:	f109 0514 	add.w	r5, r9, #20
 8006f88:	f104 0e14 	add.w	lr, r4, #20
 8006f8c:	f100 0b14 	add.w	fp, r0, #20
 8006f90:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006f94:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006f98:	9301      	str	r3, [sp, #4]
 8006f9a:	46d9      	mov	r9, fp
 8006f9c:	f04f 0c00 	mov.w	ip, #0
 8006fa0:	9b01      	ldr	r3, [sp, #4]
 8006fa2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006fa6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006faa:	9301      	str	r3, [sp, #4]
 8006fac:	fa1f f38a 	uxth.w	r3, sl
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	b283      	uxth	r3, r0
 8006fb4:	1acb      	subs	r3, r1, r3
 8006fb6:	0c00      	lsrs	r0, r0, #16
 8006fb8:	4463      	add	r3, ip
 8006fba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006fbe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006fc8:	4576      	cmp	r6, lr
 8006fca:	f849 3b04 	str.w	r3, [r9], #4
 8006fce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006fd2:	d8e5      	bhi.n	8006fa0 <__mdiff+0x88>
 8006fd4:	1b33      	subs	r3, r6, r4
 8006fd6:	3b15      	subs	r3, #21
 8006fd8:	f023 0303 	bic.w	r3, r3, #3
 8006fdc:	3415      	adds	r4, #21
 8006fde:	3304      	adds	r3, #4
 8006fe0:	42a6      	cmp	r6, r4
 8006fe2:	bf38      	it	cc
 8006fe4:	2304      	movcc	r3, #4
 8006fe6:	441d      	add	r5, r3
 8006fe8:	445b      	add	r3, fp
 8006fea:	461e      	mov	r6, r3
 8006fec:	462c      	mov	r4, r5
 8006fee:	4544      	cmp	r4, r8
 8006ff0:	d30e      	bcc.n	8007010 <__mdiff+0xf8>
 8006ff2:	f108 0103 	add.w	r1, r8, #3
 8006ff6:	1b49      	subs	r1, r1, r5
 8006ff8:	f021 0103 	bic.w	r1, r1, #3
 8006ffc:	3d03      	subs	r5, #3
 8006ffe:	45a8      	cmp	r8, r5
 8007000:	bf38      	it	cc
 8007002:	2100      	movcc	r1, #0
 8007004:	440b      	add	r3, r1
 8007006:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800700a:	b191      	cbz	r1, 8007032 <__mdiff+0x11a>
 800700c:	6117      	str	r7, [r2, #16]
 800700e:	e79d      	b.n	8006f4c <__mdiff+0x34>
 8007010:	f854 1b04 	ldr.w	r1, [r4], #4
 8007014:	46e6      	mov	lr, ip
 8007016:	0c08      	lsrs	r0, r1, #16
 8007018:	fa1c fc81 	uxtah	ip, ip, r1
 800701c:	4471      	add	r1, lr
 800701e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007022:	b289      	uxth	r1, r1
 8007024:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007028:	f846 1b04 	str.w	r1, [r6], #4
 800702c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007030:	e7dd      	b.n	8006fee <__mdiff+0xd6>
 8007032:	3f01      	subs	r7, #1
 8007034:	e7e7      	b.n	8007006 <__mdiff+0xee>
 8007036:	bf00      	nop
 8007038:	08007fcc 	.word	0x08007fcc
 800703c:	08007fee 	.word	0x08007fee

08007040 <__d2b>:
 8007040:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007044:	460f      	mov	r7, r1
 8007046:	2101      	movs	r1, #1
 8007048:	ec59 8b10 	vmov	r8, r9, d0
 800704c:	4616      	mov	r6, r2
 800704e:	f7ff fccd 	bl	80069ec <_Balloc>
 8007052:	4604      	mov	r4, r0
 8007054:	b930      	cbnz	r0, 8007064 <__d2b+0x24>
 8007056:	4602      	mov	r2, r0
 8007058:	4b23      	ldr	r3, [pc, #140]	@ (80070e8 <__d2b+0xa8>)
 800705a:	4824      	ldr	r0, [pc, #144]	@ (80070ec <__d2b+0xac>)
 800705c:	f240 310f 	movw	r1, #783	@ 0x30f
 8007060:	f000 f936 	bl	80072d0 <__assert_func>
 8007064:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007068:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800706c:	b10d      	cbz	r5, 8007072 <__d2b+0x32>
 800706e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007072:	9301      	str	r3, [sp, #4]
 8007074:	f1b8 0300 	subs.w	r3, r8, #0
 8007078:	d023      	beq.n	80070c2 <__d2b+0x82>
 800707a:	4668      	mov	r0, sp
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	f7ff fd7c 	bl	8006b7a <__lo0bits>
 8007082:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007086:	b1d0      	cbz	r0, 80070be <__d2b+0x7e>
 8007088:	f1c0 0320 	rsb	r3, r0, #32
 800708c:	fa02 f303 	lsl.w	r3, r2, r3
 8007090:	430b      	orrs	r3, r1
 8007092:	40c2      	lsrs	r2, r0
 8007094:	6163      	str	r3, [r4, #20]
 8007096:	9201      	str	r2, [sp, #4]
 8007098:	9b01      	ldr	r3, [sp, #4]
 800709a:	61a3      	str	r3, [r4, #24]
 800709c:	2b00      	cmp	r3, #0
 800709e:	bf0c      	ite	eq
 80070a0:	2201      	moveq	r2, #1
 80070a2:	2202      	movne	r2, #2
 80070a4:	6122      	str	r2, [r4, #16]
 80070a6:	b1a5      	cbz	r5, 80070d2 <__d2b+0x92>
 80070a8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80070ac:	4405      	add	r5, r0
 80070ae:	603d      	str	r5, [r7, #0]
 80070b0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80070b4:	6030      	str	r0, [r6, #0]
 80070b6:	4620      	mov	r0, r4
 80070b8:	b003      	add	sp, #12
 80070ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070be:	6161      	str	r1, [r4, #20]
 80070c0:	e7ea      	b.n	8007098 <__d2b+0x58>
 80070c2:	a801      	add	r0, sp, #4
 80070c4:	f7ff fd59 	bl	8006b7a <__lo0bits>
 80070c8:	9b01      	ldr	r3, [sp, #4]
 80070ca:	6163      	str	r3, [r4, #20]
 80070cc:	3020      	adds	r0, #32
 80070ce:	2201      	movs	r2, #1
 80070d0:	e7e8      	b.n	80070a4 <__d2b+0x64>
 80070d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80070d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80070da:	6038      	str	r0, [r7, #0]
 80070dc:	6918      	ldr	r0, [r3, #16]
 80070de:	f7ff fd2d 	bl	8006b3c <__hi0bits>
 80070e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80070e6:	e7e5      	b.n	80070b4 <__d2b+0x74>
 80070e8:	08007fcc 	.word	0x08007fcc
 80070ec:	08007fee 	.word	0x08007fee

080070f0 <__sread>:
 80070f0:	b510      	push	{r4, lr}
 80070f2:	460c      	mov	r4, r1
 80070f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070f8:	f000 f8a8 	bl	800724c <_read_r>
 80070fc:	2800      	cmp	r0, #0
 80070fe:	bfab      	itete	ge
 8007100:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007102:	89a3      	ldrhlt	r3, [r4, #12]
 8007104:	181b      	addge	r3, r3, r0
 8007106:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800710a:	bfac      	ite	ge
 800710c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800710e:	81a3      	strhlt	r3, [r4, #12]
 8007110:	bd10      	pop	{r4, pc}

08007112 <__swrite>:
 8007112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007116:	461f      	mov	r7, r3
 8007118:	898b      	ldrh	r3, [r1, #12]
 800711a:	05db      	lsls	r3, r3, #23
 800711c:	4605      	mov	r5, r0
 800711e:	460c      	mov	r4, r1
 8007120:	4616      	mov	r6, r2
 8007122:	d505      	bpl.n	8007130 <__swrite+0x1e>
 8007124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007128:	2302      	movs	r3, #2
 800712a:	2200      	movs	r2, #0
 800712c:	f000 f87c 	bl	8007228 <_lseek_r>
 8007130:	89a3      	ldrh	r3, [r4, #12]
 8007132:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007136:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800713a:	81a3      	strh	r3, [r4, #12]
 800713c:	4632      	mov	r2, r6
 800713e:	463b      	mov	r3, r7
 8007140:	4628      	mov	r0, r5
 8007142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007146:	f000 b8a3 	b.w	8007290 <_write_r>

0800714a <__sseek>:
 800714a:	b510      	push	{r4, lr}
 800714c:	460c      	mov	r4, r1
 800714e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007152:	f000 f869 	bl	8007228 <_lseek_r>
 8007156:	1c43      	adds	r3, r0, #1
 8007158:	89a3      	ldrh	r3, [r4, #12]
 800715a:	bf15      	itete	ne
 800715c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800715e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007162:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007166:	81a3      	strheq	r3, [r4, #12]
 8007168:	bf18      	it	ne
 800716a:	81a3      	strhne	r3, [r4, #12]
 800716c:	bd10      	pop	{r4, pc}

0800716e <__sclose>:
 800716e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007172:	f000 b849 	b.w	8007208 <_close_r>

08007176 <_realloc_r>:
 8007176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800717a:	4680      	mov	r8, r0
 800717c:	4615      	mov	r5, r2
 800717e:	460c      	mov	r4, r1
 8007180:	b921      	cbnz	r1, 800718c <_realloc_r+0x16>
 8007182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007186:	4611      	mov	r1, r2
 8007188:	f7ff baf8 	b.w	800677c <_malloc_r>
 800718c:	b92a      	cbnz	r2, 800719a <_realloc_r+0x24>
 800718e:	f000 f8d1 	bl	8007334 <_free_r>
 8007192:	2400      	movs	r4, #0
 8007194:	4620      	mov	r0, r4
 8007196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800719a:	f000 f927 	bl	80073ec <_malloc_usable_size_r>
 800719e:	4285      	cmp	r5, r0
 80071a0:	4606      	mov	r6, r0
 80071a2:	d802      	bhi.n	80071aa <_realloc_r+0x34>
 80071a4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80071a8:	d8f4      	bhi.n	8007194 <_realloc_r+0x1e>
 80071aa:	4629      	mov	r1, r5
 80071ac:	4640      	mov	r0, r8
 80071ae:	f7ff fae5 	bl	800677c <_malloc_r>
 80071b2:	4607      	mov	r7, r0
 80071b4:	2800      	cmp	r0, #0
 80071b6:	d0ec      	beq.n	8007192 <_realloc_r+0x1c>
 80071b8:	42b5      	cmp	r5, r6
 80071ba:	462a      	mov	r2, r5
 80071bc:	4621      	mov	r1, r4
 80071be:	bf28      	it	cs
 80071c0:	4632      	movcs	r2, r6
 80071c2:	f000 f877 	bl	80072b4 <memcpy>
 80071c6:	4621      	mov	r1, r4
 80071c8:	4640      	mov	r0, r8
 80071ca:	f000 f8b3 	bl	8007334 <_free_r>
 80071ce:	463c      	mov	r4, r7
 80071d0:	e7e0      	b.n	8007194 <_realloc_r+0x1e>

080071d2 <memmove>:
 80071d2:	4288      	cmp	r0, r1
 80071d4:	b510      	push	{r4, lr}
 80071d6:	eb01 0402 	add.w	r4, r1, r2
 80071da:	d902      	bls.n	80071e2 <memmove+0x10>
 80071dc:	4284      	cmp	r4, r0
 80071de:	4623      	mov	r3, r4
 80071e0:	d807      	bhi.n	80071f2 <memmove+0x20>
 80071e2:	1e43      	subs	r3, r0, #1
 80071e4:	42a1      	cmp	r1, r4
 80071e6:	d008      	beq.n	80071fa <memmove+0x28>
 80071e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071f0:	e7f8      	b.n	80071e4 <memmove+0x12>
 80071f2:	4402      	add	r2, r0
 80071f4:	4601      	mov	r1, r0
 80071f6:	428a      	cmp	r2, r1
 80071f8:	d100      	bne.n	80071fc <memmove+0x2a>
 80071fa:	bd10      	pop	{r4, pc}
 80071fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007200:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007204:	e7f7      	b.n	80071f6 <memmove+0x24>
	...

08007208 <_close_r>:
 8007208:	b538      	push	{r3, r4, r5, lr}
 800720a:	4d06      	ldr	r5, [pc, #24]	@ (8007224 <_close_r+0x1c>)
 800720c:	2300      	movs	r3, #0
 800720e:	4604      	mov	r4, r0
 8007210:	4608      	mov	r0, r1
 8007212:	602b      	str	r3, [r5, #0]
 8007214:	f7fa fe1b 	bl	8001e4e <_close>
 8007218:	1c43      	adds	r3, r0, #1
 800721a:	d102      	bne.n	8007222 <_close_r+0x1a>
 800721c:	682b      	ldr	r3, [r5, #0]
 800721e:	b103      	cbz	r3, 8007222 <_close_r+0x1a>
 8007220:	6023      	str	r3, [r4, #0]
 8007222:	bd38      	pop	{r3, r4, r5, pc}
 8007224:	20000414 	.word	0x20000414

08007228 <_lseek_r>:
 8007228:	b538      	push	{r3, r4, r5, lr}
 800722a:	4d07      	ldr	r5, [pc, #28]	@ (8007248 <_lseek_r+0x20>)
 800722c:	4604      	mov	r4, r0
 800722e:	4608      	mov	r0, r1
 8007230:	4611      	mov	r1, r2
 8007232:	2200      	movs	r2, #0
 8007234:	602a      	str	r2, [r5, #0]
 8007236:	461a      	mov	r2, r3
 8007238:	f7fa fe30 	bl	8001e9c <_lseek>
 800723c:	1c43      	adds	r3, r0, #1
 800723e:	d102      	bne.n	8007246 <_lseek_r+0x1e>
 8007240:	682b      	ldr	r3, [r5, #0]
 8007242:	b103      	cbz	r3, 8007246 <_lseek_r+0x1e>
 8007244:	6023      	str	r3, [r4, #0]
 8007246:	bd38      	pop	{r3, r4, r5, pc}
 8007248:	20000414 	.word	0x20000414

0800724c <_read_r>:
 800724c:	b538      	push	{r3, r4, r5, lr}
 800724e:	4d07      	ldr	r5, [pc, #28]	@ (800726c <_read_r+0x20>)
 8007250:	4604      	mov	r4, r0
 8007252:	4608      	mov	r0, r1
 8007254:	4611      	mov	r1, r2
 8007256:	2200      	movs	r2, #0
 8007258:	602a      	str	r2, [r5, #0]
 800725a:	461a      	mov	r2, r3
 800725c:	f7fa fdbe 	bl	8001ddc <_read>
 8007260:	1c43      	adds	r3, r0, #1
 8007262:	d102      	bne.n	800726a <_read_r+0x1e>
 8007264:	682b      	ldr	r3, [r5, #0]
 8007266:	b103      	cbz	r3, 800726a <_read_r+0x1e>
 8007268:	6023      	str	r3, [r4, #0]
 800726a:	bd38      	pop	{r3, r4, r5, pc}
 800726c:	20000414 	.word	0x20000414

08007270 <_sbrk_r>:
 8007270:	b538      	push	{r3, r4, r5, lr}
 8007272:	4d06      	ldr	r5, [pc, #24]	@ (800728c <_sbrk_r+0x1c>)
 8007274:	2300      	movs	r3, #0
 8007276:	4604      	mov	r4, r0
 8007278:	4608      	mov	r0, r1
 800727a:	602b      	str	r3, [r5, #0]
 800727c:	f7fa fe1c 	bl	8001eb8 <_sbrk>
 8007280:	1c43      	adds	r3, r0, #1
 8007282:	d102      	bne.n	800728a <_sbrk_r+0x1a>
 8007284:	682b      	ldr	r3, [r5, #0]
 8007286:	b103      	cbz	r3, 800728a <_sbrk_r+0x1a>
 8007288:	6023      	str	r3, [r4, #0]
 800728a:	bd38      	pop	{r3, r4, r5, pc}
 800728c:	20000414 	.word	0x20000414

08007290 <_write_r>:
 8007290:	b538      	push	{r3, r4, r5, lr}
 8007292:	4d07      	ldr	r5, [pc, #28]	@ (80072b0 <_write_r+0x20>)
 8007294:	4604      	mov	r4, r0
 8007296:	4608      	mov	r0, r1
 8007298:	4611      	mov	r1, r2
 800729a:	2200      	movs	r2, #0
 800729c:	602a      	str	r2, [r5, #0]
 800729e:	461a      	mov	r2, r3
 80072a0:	f7fa fdb9 	bl	8001e16 <_write>
 80072a4:	1c43      	adds	r3, r0, #1
 80072a6:	d102      	bne.n	80072ae <_write_r+0x1e>
 80072a8:	682b      	ldr	r3, [r5, #0]
 80072aa:	b103      	cbz	r3, 80072ae <_write_r+0x1e>
 80072ac:	6023      	str	r3, [r4, #0]
 80072ae:	bd38      	pop	{r3, r4, r5, pc}
 80072b0:	20000414 	.word	0x20000414

080072b4 <memcpy>:
 80072b4:	440a      	add	r2, r1
 80072b6:	4291      	cmp	r1, r2
 80072b8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80072bc:	d100      	bne.n	80072c0 <memcpy+0xc>
 80072be:	4770      	bx	lr
 80072c0:	b510      	push	{r4, lr}
 80072c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072ca:	4291      	cmp	r1, r2
 80072cc:	d1f9      	bne.n	80072c2 <memcpy+0xe>
 80072ce:	bd10      	pop	{r4, pc}

080072d0 <__assert_func>:
 80072d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80072d2:	4614      	mov	r4, r2
 80072d4:	461a      	mov	r2, r3
 80072d6:	4b09      	ldr	r3, [pc, #36]	@ (80072fc <__assert_func+0x2c>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4605      	mov	r5, r0
 80072dc:	68d8      	ldr	r0, [r3, #12]
 80072de:	b954      	cbnz	r4, 80072f6 <__assert_func+0x26>
 80072e0:	4b07      	ldr	r3, [pc, #28]	@ (8007300 <__assert_func+0x30>)
 80072e2:	461c      	mov	r4, r3
 80072e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80072e8:	9100      	str	r1, [sp, #0]
 80072ea:	462b      	mov	r3, r5
 80072ec:	4905      	ldr	r1, [pc, #20]	@ (8007304 <__assert_func+0x34>)
 80072ee:	f000 f885 	bl	80073fc <fiprintf>
 80072f2:	f000 f8a2 	bl	800743a <abort>
 80072f6:	4b04      	ldr	r3, [pc, #16]	@ (8007308 <__assert_func+0x38>)
 80072f8:	e7f4      	b.n	80072e4 <__assert_func+0x14>
 80072fa:	bf00      	nop
 80072fc:	20000018 	.word	0x20000018
 8007300:	0800828e 	.word	0x0800828e
 8007304:	08008260 	.word	0x08008260
 8007308:	08008253 	.word	0x08008253

0800730c <_calloc_r>:
 800730c:	b570      	push	{r4, r5, r6, lr}
 800730e:	fba1 5402 	umull	r5, r4, r1, r2
 8007312:	b93c      	cbnz	r4, 8007324 <_calloc_r+0x18>
 8007314:	4629      	mov	r1, r5
 8007316:	f7ff fa31 	bl	800677c <_malloc_r>
 800731a:	4606      	mov	r6, r0
 800731c:	b928      	cbnz	r0, 800732a <_calloc_r+0x1e>
 800731e:	2600      	movs	r6, #0
 8007320:	4630      	mov	r0, r6
 8007322:	bd70      	pop	{r4, r5, r6, pc}
 8007324:	220c      	movs	r2, #12
 8007326:	6002      	str	r2, [r0, #0]
 8007328:	e7f9      	b.n	800731e <_calloc_r+0x12>
 800732a:	462a      	mov	r2, r5
 800732c:	4621      	mov	r1, r4
 800732e:	f7fe fa1d 	bl	800576c <memset>
 8007332:	e7f5      	b.n	8007320 <_calloc_r+0x14>

08007334 <_free_r>:
 8007334:	b538      	push	{r3, r4, r5, lr}
 8007336:	4605      	mov	r5, r0
 8007338:	2900      	cmp	r1, #0
 800733a:	d041      	beq.n	80073c0 <_free_r+0x8c>
 800733c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007340:	1f0c      	subs	r4, r1, #4
 8007342:	2b00      	cmp	r3, #0
 8007344:	bfb8      	it	lt
 8007346:	18e4      	addlt	r4, r4, r3
 8007348:	f7ff fb44 	bl	80069d4 <__malloc_lock>
 800734c:	4a1d      	ldr	r2, [pc, #116]	@ (80073c4 <_free_r+0x90>)
 800734e:	6813      	ldr	r3, [r2, #0]
 8007350:	b933      	cbnz	r3, 8007360 <_free_r+0x2c>
 8007352:	6063      	str	r3, [r4, #4]
 8007354:	6014      	str	r4, [r2, #0]
 8007356:	4628      	mov	r0, r5
 8007358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800735c:	f7ff bb40 	b.w	80069e0 <__malloc_unlock>
 8007360:	42a3      	cmp	r3, r4
 8007362:	d908      	bls.n	8007376 <_free_r+0x42>
 8007364:	6820      	ldr	r0, [r4, #0]
 8007366:	1821      	adds	r1, r4, r0
 8007368:	428b      	cmp	r3, r1
 800736a:	bf01      	itttt	eq
 800736c:	6819      	ldreq	r1, [r3, #0]
 800736e:	685b      	ldreq	r3, [r3, #4]
 8007370:	1809      	addeq	r1, r1, r0
 8007372:	6021      	streq	r1, [r4, #0]
 8007374:	e7ed      	b.n	8007352 <_free_r+0x1e>
 8007376:	461a      	mov	r2, r3
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	b10b      	cbz	r3, 8007380 <_free_r+0x4c>
 800737c:	42a3      	cmp	r3, r4
 800737e:	d9fa      	bls.n	8007376 <_free_r+0x42>
 8007380:	6811      	ldr	r1, [r2, #0]
 8007382:	1850      	adds	r0, r2, r1
 8007384:	42a0      	cmp	r0, r4
 8007386:	d10b      	bne.n	80073a0 <_free_r+0x6c>
 8007388:	6820      	ldr	r0, [r4, #0]
 800738a:	4401      	add	r1, r0
 800738c:	1850      	adds	r0, r2, r1
 800738e:	4283      	cmp	r3, r0
 8007390:	6011      	str	r1, [r2, #0]
 8007392:	d1e0      	bne.n	8007356 <_free_r+0x22>
 8007394:	6818      	ldr	r0, [r3, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	6053      	str	r3, [r2, #4]
 800739a:	4408      	add	r0, r1
 800739c:	6010      	str	r0, [r2, #0]
 800739e:	e7da      	b.n	8007356 <_free_r+0x22>
 80073a0:	d902      	bls.n	80073a8 <_free_r+0x74>
 80073a2:	230c      	movs	r3, #12
 80073a4:	602b      	str	r3, [r5, #0]
 80073a6:	e7d6      	b.n	8007356 <_free_r+0x22>
 80073a8:	6820      	ldr	r0, [r4, #0]
 80073aa:	1821      	adds	r1, r4, r0
 80073ac:	428b      	cmp	r3, r1
 80073ae:	bf04      	itt	eq
 80073b0:	6819      	ldreq	r1, [r3, #0]
 80073b2:	685b      	ldreq	r3, [r3, #4]
 80073b4:	6063      	str	r3, [r4, #4]
 80073b6:	bf04      	itt	eq
 80073b8:	1809      	addeq	r1, r1, r0
 80073ba:	6021      	streq	r1, [r4, #0]
 80073bc:	6054      	str	r4, [r2, #4]
 80073be:	e7ca      	b.n	8007356 <_free_r+0x22>
 80073c0:	bd38      	pop	{r3, r4, r5, pc}
 80073c2:	bf00      	nop
 80073c4:	20000410 	.word	0x20000410

080073c8 <__ascii_mbtowc>:
 80073c8:	b082      	sub	sp, #8
 80073ca:	b901      	cbnz	r1, 80073ce <__ascii_mbtowc+0x6>
 80073cc:	a901      	add	r1, sp, #4
 80073ce:	b142      	cbz	r2, 80073e2 <__ascii_mbtowc+0x1a>
 80073d0:	b14b      	cbz	r3, 80073e6 <__ascii_mbtowc+0x1e>
 80073d2:	7813      	ldrb	r3, [r2, #0]
 80073d4:	600b      	str	r3, [r1, #0]
 80073d6:	7812      	ldrb	r2, [r2, #0]
 80073d8:	1e10      	subs	r0, r2, #0
 80073da:	bf18      	it	ne
 80073dc:	2001      	movne	r0, #1
 80073de:	b002      	add	sp, #8
 80073e0:	4770      	bx	lr
 80073e2:	4610      	mov	r0, r2
 80073e4:	e7fb      	b.n	80073de <__ascii_mbtowc+0x16>
 80073e6:	f06f 0001 	mvn.w	r0, #1
 80073ea:	e7f8      	b.n	80073de <__ascii_mbtowc+0x16>

080073ec <_malloc_usable_size_r>:
 80073ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073f0:	1f18      	subs	r0, r3, #4
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	bfbc      	itt	lt
 80073f6:	580b      	ldrlt	r3, [r1, r0]
 80073f8:	18c0      	addlt	r0, r0, r3
 80073fa:	4770      	bx	lr

080073fc <fiprintf>:
 80073fc:	b40e      	push	{r1, r2, r3}
 80073fe:	b503      	push	{r0, r1, lr}
 8007400:	4601      	mov	r1, r0
 8007402:	ab03      	add	r3, sp, #12
 8007404:	4805      	ldr	r0, [pc, #20]	@ (800741c <fiprintf+0x20>)
 8007406:	f853 2b04 	ldr.w	r2, [r3], #4
 800740a:	6800      	ldr	r0, [r0, #0]
 800740c:	9301      	str	r3, [sp, #4]
 800740e:	f000 f845 	bl	800749c <_vfiprintf_r>
 8007412:	b002      	add	sp, #8
 8007414:	f85d eb04 	ldr.w	lr, [sp], #4
 8007418:	b003      	add	sp, #12
 800741a:	4770      	bx	lr
 800741c:	20000018 	.word	0x20000018

08007420 <__ascii_wctomb>:
 8007420:	4603      	mov	r3, r0
 8007422:	4608      	mov	r0, r1
 8007424:	b141      	cbz	r1, 8007438 <__ascii_wctomb+0x18>
 8007426:	2aff      	cmp	r2, #255	@ 0xff
 8007428:	d904      	bls.n	8007434 <__ascii_wctomb+0x14>
 800742a:	228a      	movs	r2, #138	@ 0x8a
 800742c:	601a      	str	r2, [r3, #0]
 800742e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007432:	4770      	bx	lr
 8007434:	700a      	strb	r2, [r1, #0]
 8007436:	2001      	movs	r0, #1
 8007438:	4770      	bx	lr

0800743a <abort>:
 800743a:	b508      	push	{r3, lr}
 800743c:	2006      	movs	r0, #6
 800743e:	f000 fa85 	bl	800794c <raise>
 8007442:	2001      	movs	r0, #1
 8007444:	f7fa fcbf 	bl	8001dc6 <_exit>

08007448 <__sfputc_r>:
 8007448:	6893      	ldr	r3, [r2, #8]
 800744a:	3b01      	subs	r3, #1
 800744c:	2b00      	cmp	r3, #0
 800744e:	b410      	push	{r4}
 8007450:	6093      	str	r3, [r2, #8]
 8007452:	da08      	bge.n	8007466 <__sfputc_r+0x1e>
 8007454:	6994      	ldr	r4, [r2, #24]
 8007456:	42a3      	cmp	r3, r4
 8007458:	db01      	blt.n	800745e <__sfputc_r+0x16>
 800745a:	290a      	cmp	r1, #10
 800745c:	d103      	bne.n	8007466 <__sfputc_r+0x1e>
 800745e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007462:	f000 b933 	b.w	80076cc <__swbuf_r>
 8007466:	6813      	ldr	r3, [r2, #0]
 8007468:	1c58      	adds	r0, r3, #1
 800746a:	6010      	str	r0, [r2, #0]
 800746c:	7019      	strb	r1, [r3, #0]
 800746e:	4608      	mov	r0, r1
 8007470:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007474:	4770      	bx	lr

08007476 <__sfputs_r>:
 8007476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007478:	4606      	mov	r6, r0
 800747a:	460f      	mov	r7, r1
 800747c:	4614      	mov	r4, r2
 800747e:	18d5      	adds	r5, r2, r3
 8007480:	42ac      	cmp	r4, r5
 8007482:	d101      	bne.n	8007488 <__sfputs_r+0x12>
 8007484:	2000      	movs	r0, #0
 8007486:	e007      	b.n	8007498 <__sfputs_r+0x22>
 8007488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800748c:	463a      	mov	r2, r7
 800748e:	4630      	mov	r0, r6
 8007490:	f7ff ffda 	bl	8007448 <__sfputc_r>
 8007494:	1c43      	adds	r3, r0, #1
 8007496:	d1f3      	bne.n	8007480 <__sfputs_r+0xa>
 8007498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800749c <_vfiprintf_r>:
 800749c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a0:	460d      	mov	r5, r1
 80074a2:	b09d      	sub	sp, #116	@ 0x74
 80074a4:	4614      	mov	r4, r2
 80074a6:	4698      	mov	r8, r3
 80074a8:	4606      	mov	r6, r0
 80074aa:	b118      	cbz	r0, 80074b4 <_vfiprintf_r+0x18>
 80074ac:	6a03      	ldr	r3, [r0, #32]
 80074ae:	b90b      	cbnz	r3, 80074b4 <_vfiprintf_r+0x18>
 80074b0:	f7fe f926 	bl	8005700 <__sinit>
 80074b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074b6:	07d9      	lsls	r1, r3, #31
 80074b8:	d405      	bmi.n	80074c6 <_vfiprintf_r+0x2a>
 80074ba:	89ab      	ldrh	r3, [r5, #12]
 80074bc:	059a      	lsls	r2, r3, #22
 80074be:	d402      	bmi.n	80074c6 <_vfiprintf_r+0x2a>
 80074c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074c2:	f7fe f98a 	bl	80057da <__retarget_lock_acquire_recursive>
 80074c6:	89ab      	ldrh	r3, [r5, #12]
 80074c8:	071b      	lsls	r3, r3, #28
 80074ca:	d501      	bpl.n	80074d0 <_vfiprintf_r+0x34>
 80074cc:	692b      	ldr	r3, [r5, #16]
 80074ce:	b99b      	cbnz	r3, 80074f8 <_vfiprintf_r+0x5c>
 80074d0:	4629      	mov	r1, r5
 80074d2:	4630      	mov	r0, r6
 80074d4:	f000 f938 	bl	8007748 <__swsetup_r>
 80074d8:	b170      	cbz	r0, 80074f8 <_vfiprintf_r+0x5c>
 80074da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074dc:	07dc      	lsls	r4, r3, #31
 80074de:	d504      	bpl.n	80074ea <_vfiprintf_r+0x4e>
 80074e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074e4:	b01d      	add	sp, #116	@ 0x74
 80074e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ea:	89ab      	ldrh	r3, [r5, #12]
 80074ec:	0598      	lsls	r0, r3, #22
 80074ee:	d4f7      	bmi.n	80074e0 <_vfiprintf_r+0x44>
 80074f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074f2:	f7fe f973 	bl	80057dc <__retarget_lock_release_recursive>
 80074f6:	e7f3      	b.n	80074e0 <_vfiprintf_r+0x44>
 80074f8:	2300      	movs	r3, #0
 80074fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80074fc:	2320      	movs	r3, #32
 80074fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007502:	f8cd 800c 	str.w	r8, [sp, #12]
 8007506:	2330      	movs	r3, #48	@ 0x30
 8007508:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80076b8 <_vfiprintf_r+0x21c>
 800750c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007510:	f04f 0901 	mov.w	r9, #1
 8007514:	4623      	mov	r3, r4
 8007516:	469a      	mov	sl, r3
 8007518:	f813 2b01 	ldrb.w	r2, [r3], #1
 800751c:	b10a      	cbz	r2, 8007522 <_vfiprintf_r+0x86>
 800751e:	2a25      	cmp	r2, #37	@ 0x25
 8007520:	d1f9      	bne.n	8007516 <_vfiprintf_r+0x7a>
 8007522:	ebba 0b04 	subs.w	fp, sl, r4
 8007526:	d00b      	beq.n	8007540 <_vfiprintf_r+0xa4>
 8007528:	465b      	mov	r3, fp
 800752a:	4622      	mov	r2, r4
 800752c:	4629      	mov	r1, r5
 800752e:	4630      	mov	r0, r6
 8007530:	f7ff ffa1 	bl	8007476 <__sfputs_r>
 8007534:	3001      	adds	r0, #1
 8007536:	f000 80a7 	beq.w	8007688 <_vfiprintf_r+0x1ec>
 800753a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800753c:	445a      	add	r2, fp
 800753e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007540:	f89a 3000 	ldrb.w	r3, [sl]
 8007544:	2b00      	cmp	r3, #0
 8007546:	f000 809f 	beq.w	8007688 <_vfiprintf_r+0x1ec>
 800754a:	2300      	movs	r3, #0
 800754c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007550:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007554:	f10a 0a01 	add.w	sl, sl, #1
 8007558:	9304      	str	r3, [sp, #16]
 800755a:	9307      	str	r3, [sp, #28]
 800755c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007560:	931a      	str	r3, [sp, #104]	@ 0x68
 8007562:	4654      	mov	r4, sl
 8007564:	2205      	movs	r2, #5
 8007566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800756a:	4853      	ldr	r0, [pc, #332]	@ (80076b8 <_vfiprintf_r+0x21c>)
 800756c:	f7f8 fe38 	bl	80001e0 <memchr>
 8007570:	9a04      	ldr	r2, [sp, #16]
 8007572:	b9d8      	cbnz	r0, 80075ac <_vfiprintf_r+0x110>
 8007574:	06d1      	lsls	r1, r2, #27
 8007576:	bf44      	itt	mi
 8007578:	2320      	movmi	r3, #32
 800757a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800757e:	0713      	lsls	r3, r2, #28
 8007580:	bf44      	itt	mi
 8007582:	232b      	movmi	r3, #43	@ 0x2b
 8007584:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007588:	f89a 3000 	ldrb.w	r3, [sl]
 800758c:	2b2a      	cmp	r3, #42	@ 0x2a
 800758e:	d015      	beq.n	80075bc <_vfiprintf_r+0x120>
 8007590:	9a07      	ldr	r2, [sp, #28]
 8007592:	4654      	mov	r4, sl
 8007594:	2000      	movs	r0, #0
 8007596:	f04f 0c0a 	mov.w	ip, #10
 800759a:	4621      	mov	r1, r4
 800759c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075a0:	3b30      	subs	r3, #48	@ 0x30
 80075a2:	2b09      	cmp	r3, #9
 80075a4:	d94b      	bls.n	800763e <_vfiprintf_r+0x1a2>
 80075a6:	b1b0      	cbz	r0, 80075d6 <_vfiprintf_r+0x13a>
 80075a8:	9207      	str	r2, [sp, #28]
 80075aa:	e014      	b.n	80075d6 <_vfiprintf_r+0x13a>
 80075ac:	eba0 0308 	sub.w	r3, r0, r8
 80075b0:	fa09 f303 	lsl.w	r3, r9, r3
 80075b4:	4313      	orrs	r3, r2
 80075b6:	9304      	str	r3, [sp, #16]
 80075b8:	46a2      	mov	sl, r4
 80075ba:	e7d2      	b.n	8007562 <_vfiprintf_r+0xc6>
 80075bc:	9b03      	ldr	r3, [sp, #12]
 80075be:	1d19      	adds	r1, r3, #4
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	9103      	str	r1, [sp, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	bfbb      	ittet	lt
 80075c8:	425b      	neglt	r3, r3
 80075ca:	f042 0202 	orrlt.w	r2, r2, #2
 80075ce:	9307      	strge	r3, [sp, #28]
 80075d0:	9307      	strlt	r3, [sp, #28]
 80075d2:	bfb8      	it	lt
 80075d4:	9204      	strlt	r2, [sp, #16]
 80075d6:	7823      	ldrb	r3, [r4, #0]
 80075d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80075da:	d10a      	bne.n	80075f2 <_vfiprintf_r+0x156>
 80075dc:	7863      	ldrb	r3, [r4, #1]
 80075de:	2b2a      	cmp	r3, #42	@ 0x2a
 80075e0:	d132      	bne.n	8007648 <_vfiprintf_r+0x1ac>
 80075e2:	9b03      	ldr	r3, [sp, #12]
 80075e4:	1d1a      	adds	r2, r3, #4
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	9203      	str	r2, [sp, #12]
 80075ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80075ee:	3402      	adds	r4, #2
 80075f0:	9305      	str	r3, [sp, #20]
 80075f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80076c8 <_vfiprintf_r+0x22c>
 80075f6:	7821      	ldrb	r1, [r4, #0]
 80075f8:	2203      	movs	r2, #3
 80075fa:	4650      	mov	r0, sl
 80075fc:	f7f8 fdf0 	bl	80001e0 <memchr>
 8007600:	b138      	cbz	r0, 8007612 <_vfiprintf_r+0x176>
 8007602:	9b04      	ldr	r3, [sp, #16]
 8007604:	eba0 000a 	sub.w	r0, r0, sl
 8007608:	2240      	movs	r2, #64	@ 0x40
 800760a:	4082      	lsls	r2, r0
 800760c:	4313      	orrs	r3, r2
 800760e:	3401      	adds	r4, #1
 8007610:	9304      	str	r3, [sp, #16]
 8007612:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007616:	4829      	ldr	r0, [pc, #164]	@ (80076bc <_vfiprintf_r+0x220>)
 8007618:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800761c:	2206      	movs	r2, #6
 800761e:	f7f8 fddf 	bl	80001e0 <memchr>
 8007622:	2800      	cmp	r0, #0
 8007624:	d03f      	beq.n	80076a6 <_vfiprintf_r+0x20a>
 8007626:	4b26      	ldr	r3, [pc, #152]	@ (80076c0 <_vfiprintf_r+0x224>)
 8007628:	bb1b      	cbnz	r3, 8007672 <_vfiprintf_r+0x1d6>
 800762a:	9b03      	ldr	r3, [sp, #12]
 800762c:	3307      	adds	r3, #7
 800762e:	f023 0307 	bic.w	r3, r3, #7
 8007632:	3308      	adds	r3, #8
 8007634:	9303      	str	r3, [sp, #12]
 8007636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007638:	443b      	add	r3, r7
 800763a:	9309      	str	r3, [sp, #36]	@ 0x24
 800763c:	e76a      	b.n	8007514 <_vfiprintf_r+0x78>
 800763e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007642:	460c      	mov	r4, r1
 8007644:	2001      	movs	r0, #1
 8007646:	e7a8      	b.n	800759a <_vfiprintf_r+0xfe>
 8007648:	2300      	movs	r3, #0
 800764a:	3401      	adds	r4, #1
 800764c:	9305      	str	r3, [sp, #20]
 800764e:	4619      	mov	r1, r3
 8007650:	f04f 0c0a 	mov.w	ip, #10
 8007654:	4620      	mov	r0, r4
 8007656:	f810 2b01 	ldrb.w	r2, [r0], #1
 800765a:	3a30      	subs	r2, #48	@ 0x30
 800765c:	2a09      	cmp	r2, #9
 800765e:	d903      	bls.n	8007668 <_vfiprintf_r+0x1cc>
 8007660:	2b00      	cmp	r3, #0
 8007662:	d0c6      	beq.n	80075f2 <_vfiprintf_r+0x156>
 8007664:	9105      	str	r1, [sp, #20]
 8007666:	e7c4      	b.n	80075f2 <_vfiprintf_r+0x156>
 8007668:	fb0c 2101 	mla	r1, ip, r1, r2
 800766c:	4604      	mov	r4, r0
 800766e:	2301      	movs	r3, #1
 8007670:	e7f0      	b.n	8007654 <_vfiprintf_r+0x1b8>
 8007672:	ab03      	add	r3, sp, #12
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	462a      	mov	r2, r5
 8007678:	4b12      	ldr	r3, [pc, #72]	@ (80076c4 <_vfiprintf_r+0x228>)
 800767a:	a904      	add	r1, sp, #16
 800767c:	4630      	mov	r0, r6
 800767e:	f7fd fbdb 	bl	8004e38 <_printf_float>
 8007682:	4607      	mov	r7, r0
 8007684:	1c78      	adds	r0, r7, #1
 8007686:	d1d6      	bne.n	8007636 <_vfiprintf_r+0x19a>
 8007688:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800768a:	07d9      	lsls	r1, r3, #31
 800768c:	d405      	bmi.n	800769a <_vfiprintf_r+0x1fe>
 800768e:	89ab      	ldrh	r3, [r5, #12]
 8007690:	059a      	lsls	r2, r3, #22
 8007692:	d402      	bmi.n	800769a <_vfiprintf_r+0x1fe>
 8007694:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007696:	f7fe f8a1 	bl	80057dc <__retarget_lock_release_recursive>
 800769a:	89ab      	ldrh	r3, [r5, #12]
 800769c:	065b      	lsls	r3, r3, #25
 800769e:	f53f af1f 	bmi.w	80074e0 <_vfiprintf_r+0x44>
 80076a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076a4:	e71e      	b.n	80074e4 <_vfiprintf_r+0x48>
 80076a6:	ab03      	add	r3, sp, #12
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	462a      	mov	r2, r5
 80076ac:	4b05      	ldr	r3, [pc, #20]	@ (80076c4 <_vfiprintf_r+0x228>)
 80076ae:	a904      	add	r1, sp, #16
 80076b0:	4630      	mov	r0, r6
 80076b2:	f7fd fe59 	bl	8005368 <_printf_i>
 80076b6:	e7e4      	b.n	8007682 <_vfiprintf_r+0x1e6>
 80076b8:	08007fdd 	.word	0x08007fdd
 80076bc:	08007fe7 	.word	0x08007fe7
 80076c0:	08004e39 	.word	0x08004e39
 80076c4:	08007477 	.word	0x08007477
 80076c8:	08007fe3 	.word	0x08007fe3

080076cc <__swbuf_r>:
 80076cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ce:	460e      	mov	r6, r1
 80076d0:	4614      	mov	r4, r2
 80076d2:	4605      	mov	r5, r0
 80076d4:	b118      	cbz	r0, 80076de <__swbuf_r+0x12>
 80076d6:	6a03      	ldr	r3, [r0, #32]
 80076d8:	b90b      	cbnz	r3, 80076de <__swbuf_r+0x12>
 80076da:	f7fe f811 	bl	8005700 <__sinit>
 80076de:	69a3      	ldr	r3, [r4, #24]
 80076e0:	60a3      	str	r3, [r4, #8]
 80076e2:	89a3      	ldrh	r3, [r4, #12]
 80076e4:	071a      	lsls	r2, r3, #28
 80076e6:	d501      	bpl.n	80076ec <__swbuf_r+0x20>
 80076e8:	6923      	ldr	r3, [r4, #16]
 80076ea:	b943      	cbnz	r3, 80076fe <__swbuf_r+0x32>
 80076ec:	4621      	mov	r1, r4
 80076ee:	4628      	mov	r0, r5
 80076f0:	f000 f82a 	bl	8007748 <__swsetup_r>
 80076f4:	b118      	cbz	r0, 80076fe <__swbuf_r+0x32>
 80076f6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80076fa:	4638      	mov	r0, r7
 80076fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	6922      	ldr	r2, [r4, #16]
 8007702:	1a98      	subs	r0, r3, r2
 8007704:	6963      	ldr	r3, [r4, #20]
 8007706:	b2f6      	uxtb	r6, r6
 8007708:	4283      	cmp	r3, r0
 800770a:	4637      	mov	r7, r6
 800770c:	dc05      	bgt.n	800771a <__swbuf_r+0x4e>
 800770e:	4621      	mov	r1, r4
 8007710:	4628      	mov	r0, r5
 8007712:	f7ff f937 	bl	8006984 <_fflush_r>
 8007716:	2800      	cmp	r0, #0
 8007718:	d1ed      	bne.n	80076f6 <__swbuf_r+0x2a>
 800771a:	68a3      	ldr	r3, [r4, #8]
 800771c:	3b01      	subs	r3, #1
 800771e:	60a3      	str	r3, [r4, #8]
 8007720:	6823      	ldr	r3, [r4, #0]
 8007722:	1c5a      	adds	r2, r3, #1
 8007724:	6022      	str	r2, [r4, #0]
 8007726:	701e      	strb	r6, [r3, #0]
 8007728:	6962      	ldr	r2, [r4, #20]
 800772a:	1c43      	adds	r3, r0, #1
 800772c:	429a      	cmp	r2, r3
 800772e:	d004      	beq.n	800773a <__swbuf_r+0x6e>
 8007730:	89a3      	ldrh	r3, [r4, #12]
 8007732:	07db      	lsls	r3, r3, #31
 8007734:	d5e1      	bpl.n	80076fa <__swbuf_r+0x2e>
 8007736:	2e0a      	cmp	r6, #10
 8007738:	d1df      	bne.n	80076fa <__swbuf_r+0x2e>
 800773a:	4621      	mov	r1, r4
 800773c:	4628      	mov	r0, r5
 800773e:	f7ff f921 	bl	8006984 <_fflush_r>
 8007742:	2800      	cmp	r0, #0
 8007744:	d0d9      	beq.n	80076fa <__swbuf_r+0x2e>
 8007746:	e7d6      	b.n	80076f6 <__swbuf_r+0x2a>

08007748 <__swsetup_r>:
 8007748:	b538      	push	{r3, r4, r5, lr}
 800774a:	4b29      	ldr	r3, [pc, #164]	@ (80077f0 <__swsetup_r+0xa8>)
 800774c:	4605      	mov	r5, r0
 800774e:	6818      	ldr	r0, [r3, #0]
 8007750:	460c      	mov	r4, r1
 8007752:	b118      	cbz	r0, 800775c <__swsetup_r+0x14>
 8007754:	6a03      	ldr	r3, [r0, #32]
 8007756:	b90b      	cbnz	r3, 800775c <__swsetup_r+0x14>
 8007758:	f7fd ffd2 	bl	8005700 <__sinit>
 800775c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007760:	0719      	lsls	r1, r3, #28
 8007762:	d422      	bmi.n	80077aa <__swsetup_r+0x62>
 8007764:	06da      	lsls	r2, r3, #27
 8007766:	d407      	bmi.n	8007778 <__swsetup_r+0x30>
 8007768:	2209      	movs	r2, #9
 800776a:	602a      	str	r2, [r5, #0]
 800776c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007770:	81a3      	strh	r3, [r4, #12]
 8007772:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007776:	e033      	b.n	80077e0 <__swsetup_r+0x98>
 8007778:	0758      	lsls	r0, r3, #29
 800777a:	d512      	bpl.n	80077a2 <__swsetup_r+0x5a>
 800777c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800777e:	b141      	cbz	r1, 8007792 <__swsetup_r+0x4a>
 8007780:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007784:	4299      	cmp	r1, r3
 8007786:	d002      	beq.n	800778e <__swsetup_r+0x46>
 8007788:	4628      	mov	r0, r5
 800778a:	f7ff fdd3 	bl	8007334 <_free_r>
 800778e:	2300      	movs	r3, #0
 8007790:	6363      	str	r3, [r4, #52]	@ 0x34
 8007792:	89a3      	ldrh	r3, [r4, #12]
 8007794:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007798:	81a3      	strh	r3, [r4, #12]
 800779a:	2300      	movs	r3, #0
 800779c:	6063      	str	r3, [r4, #4]
 800779e:	6923      	ldr	r3, [r4, #16]
 80077a0:	6023      	str	r3, [r4, #0]
 80077a2:	89a3      	ldrh	r3, [r4, #12]
 80077a4:	f043 0308 	orr.w	r3, r3, #8
 80077a8:	81a3      	strh	r3, [r4, #12]
 80077aa:	6923      	ldr	r3, [r4, #16]
 80077ac:	b94b      	cbnz	r3, 80077c2 <__swsetup_r+0x7a>
 80077ae:	89a3      	ldrh	r3, [r4, #12]
 80077b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80077b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077b8:	d003      	beq.n	80077c2 <__swsetup_r+0x7a>
 80077ba:	4621      	mov	r1, r4
 80077bc:	4628      	mov	r0, r5
 80077be:	f000 f83f 	bl	8007840 <__smakebuf_r>
 80077c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077c6:	f013 0201 	ands.w	r2, r3, #1
 80077ca:	d00a      	beq.n	80077e2 <__swsetup_r+0x9a>
 80077cc:	2200      	movs	r2, #0
 80077ce:	60a2      	str	r2, [r4, #8]
 80077d0:	6962      	ldr	r2, [r4, #20]
 80077d2:	4252      	negs	r2, r2
 80077d4:	61a2      	str	r2, [r4, #24]
 80077d6:	6922      	ldr	r2, [r4, #16]
 80077d8:	b942      	cbnz	r2, 80077ec <__swsetup_r+0xa4>
 80077da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80077de:	d1c5      	bne.n	800776c <__swsetup_r+0x24>
 80077e0:	bd38      	pop	{r3, r4, r5, pc}
 80077e2:	0799      	lsls	r1, r3, #30
 80077e4:	bf58      	it	pl
 80077e6:	6962      	ldrpl	r2, [r4, #20]
 80077e8:	60a2      	str	r2, [r4, #8]
 80077ea:	e7f4      	b.n	80077d6 <__swsetup_r+0x8e>
 80077ec:	2000      	movs	r0, #0
 80077ee:	e7f7      	b.n	80077e0 <__swsetup_r+0x98>
 80077f0:	20000018 	.word	0x20000018

080077f4 <__swhatbuf_r>:
 80077f4:	b570      	push	{r4, r5, r6, lr}
 80077f6:	460c      	mov	r4, r1
 80077f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077fc:	2900      	cmp	r1, #0
 80077fe:	b096      	sub	sp, #88	@ 0x58
 8007800:	4615      	mov	r5, r2
 8007802:	461e      	mov	r6, r3
 8007804:	da0d      	bge.n	8007822 <__swhatbuf_r+0x2e>
 8007806:	89a3      	ldrh	r3, [r4, #12]
 8007808:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800780c:	f04f 0100 	mov.w	r1, #0
 8007810:	bf14      	ite	ne
 8007812:	2340      	movne	r3, #64	@ 0x40
 8007814:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007818:	2000      	movs	r0, #0
 800781a:	6031      	str	r1, [r6, #0]
 800781c:	602b      	str	r3, [r5, #0]
 800781e:	b016      	add	sp, #88	@ 0x58
 8007820:	bd70      	pop	{r4, r5, r6, pc}
 8007822:	466a      	mov	r2, sp
 8007824:	f000 f848 	bl	80078b8 <_fstat_r>
 8007828:	2800      	cmp	r0, #0
 800782a:	dbec      	blt.n	8007806 <__swhatbuf_r+0x12>
 800782c:	9901      	ldr	r1, [sp, #4]
 800782e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007832:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007836:	4259      	negs	r1, r3
 8007838:	4159      	adcs	r1, r3
 800783a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800783e:	e7eb      	b.n	8007818 <__swhatbuf_r+0x24>

08007840 <__smakebuf_r>:
 8007840:	898b      	ldrh	r3, [r1, #12]
 8007842:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007844:	079d      	lsls	r5, r3, #30
 8007846:	4606      	mov	r6, r0
 8007848:	460c      	mov	r4, r1
 800784a:	d507      	bpl.n	800785c <__smakebuf_r+0x1c>
 800784c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007850:	6023      	str	r3, [r4, #0]
 8007852:	6123      	str	r3, [r4, #16]
 8007854:	2301      	movs	r3, #1
 8007856:	6163      	str	r3, [r4, #20]
 8007858:	b003      	add	sp, #12
 800785a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800785c:	ab01      	add	r3, sp, #4
 800785e:	466a      	mov	r2, sp
 8007860:	f7ff ffc8 	bl	80077f4 <__swhatbuf_r>
 8007864:	9f00      	ldr	r7, [sp, #0]
 8007866:	4605      	mov	r5, r0
 8007868:	4639      	mov	r1, r7
 800786a:	4630      	mov	r0, r6
 800786c:	f7fe ff86 	bl	800677c <_malloc_r>
 8007870:	b948      	cbnz	r0, 8007886 <__smakebuf_r+0x46>
 8007872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007876:	059a      	lsls	r2, r3, #22
 8007878:	d4ee      	bmi.n	8007858 <__smakebuf_r+0x18>
 800787a:	f023 0303 	bic.w	r3, r3, #3
 800787e:	f043 0302 	orr.w	r3, r3, #2
 8007882:	81a3      	strh	r3, [r4, #12]
 8007884:	e7e2      	b.n	800784c <__smakebuf_r+0xc>
 8007886:	89a3      	ldrh	r3, [r4, #12]
 8007888:	6020      	str	r0, [r4, #0]
 800788a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800788e:	81a3      	strh	r3, [r4, #12]
 8007890:	9b01      	ldr	r3, [sp, #4]
 8007892:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007896:	b15b      	cbz	r3, 80078b0 <__smakebuf_r+0x70>
 8007898:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800789c:	4630      	mov	r0, r6
 800789e:	f000 f81d 	bl	80078dc <_isatty_r>
 80078a2:	b128      	cbz	r0, 80078b0 <__smakebuf_r+0x70>
 80078a4:	89a3      	ldrh	r3, [r4, #12]
 80078a6:	f023 0303 	bic.w	r3, r3, #3
 80078aa:	f043 0301 	orr.w	r3, r3, #1
 80078ae:	81a3      	strh	r3, [r4, #12]
 80078b0:	89a3      	ldrh	r3, [r4, #12]
 80078b2:	431d      	orrs	r5, r3
 80078b4:	81a5      	strh	r5, [r4, #12]
 80078b6:	e7cf      	b.n	8007858 <__smakebuf_r+0x18>

080078b8 <_fstat_r>:
 80078b8:	b538      	push	{r3, r4, r5, lr}
 80078ba:	4d07      	ldr	r5, [pc, #28]	@ (80078d8 <_fstat_r+0x20>)
 80078bc:	2300      	movs	r3, #0
 80078be:	4604      	mov	r4, r0
 80078c0:	4608      	mov	r0, r1
 80078c2:	4611      	mov	r1, r2
 80078c4:	602b      	str	r3, [r5, #0]
 80078c6:	f7fa face 	bl	8001e66 <_fstat>
 80078ca:	1c43      	adds	r3, r0, #1
 80078cc:	d102      	bne.n	80078d4 <_fstat_r+0x1c>
 80078ce:	682b      	ldr	r3, [r5, #0]
 80078d0:	b103      	cbz	r3, 80078d4 <_fstat_r+0x1c>
 80078d2:	6023      	str	r3, [r4, #0]
 80078d4:	bd38      	pop	{r3, r4, r5, pc}
 80078d6:	bf00      	nop
 80078d8:	20000414 	.word	0x20000414

080078dc <_isatty_r>:
 80078dc:	b538      	push	{r3, r4, r5, lr}
 80078de:	4d06      	ldr	r5, [pc, #24]	@ (80078f8 <_isatty_r+0x1c>)
 80078e0:	2300      	movs	r3, #0
 80078e2:	4604      	mov	r4, r0
 80078e4:	4608      	mov	r0, r1
 80078e6:	602b      	str	r3, [r5, #0]
 80078e8:	f7fa facd 	bl	8001e86 <_isatty>
 80078ec:	1c43      	adds	r3, r0, #1
 80078ee:	d102      	bne.n	80078f6 <_isatty_r+0x1a>
 80078f0:	682b      	ldr	r3, [r5, #0]
 80078f2:	b103      	cbz	r3, 80078f6 <_isatty_r+0x1a>
 80078f4:	6023      	str	r3, [r4, #0]
 80078f6:	bd38      	pop	{r3, r4, r5, pc}
 80078f8:	20000414 	.word	0x20000414

080078fc <_raise_r>:
 80078fc:	291f      	cmp	r1, #31
 80078fe:	b538      	push	{r3, r4, r5, lr}
 8007900:	4605      	mov	r5, r0
 8007902:	460c      	mov	r4, r1
 8007904:	d904      	bls.n	8007910 <_raise_r+0x14>
 8007906:	2316      	movs	r3, #22
 8007908:	6003      	str	r3, [r0, #0]
 800790a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800790e:	bd38      	pop	{r3, r4, r5, pc}
 8007910:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007912:	b112      	cbz	r2, 800791a <_raise_r+0x1e>
 8007914:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007918:	b94b      	cbnz	r3, 800792e <_raise_r+0x32>
 800791a:	4628      	mov	r0, r5
 800791c:	f000 f830 	bl	8007980 <_getpid_r>
 8007920:	4622      	mov	r2, r4
 8007922:	4601      	mov	r1, r0
 8007924:	4628      	mov	r0, r5
 8007926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800792a:	f000 b817 	b.w	800795c <_kill_r>
 800792e:	2b01      	cmp	r3, #1
 8007930:	d00a      	beq.n	8007948 <_raise_r+0x4c>
 8007932:	1c59      	adds	r1, r3, #1
 8007934:	d103      	bne.n	800793e <_raise_r+0x42>
 8007936:	2316      	movs	r3, #22
 8007938:	6003      	str	r3, [r0, #0]
 800793a:	2001      	movs	r0, #1
 800793c:	e7e7      	b.n	800790e <_raise_r+0x12>
 800793e:	2100      	movs	r1, #0
 8007940:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007944:	4620      	mov	r0, r4
 8007946:	4798      	blx	r3
 8007948:	2000      	movs	r0, #0
 800794a:	e7e0      	b.n	800790e <_raise_r+0x12>

0800794c <raise>:
 800794c:	4b02      	ldr	r3, [pc, #8]	@ (8007958 <raise+0xc>)
 800794e:	4601      	mov	r1, r0
 8007950:	6818      	ldr	r0, [r3, #0]
 8007952:	f7ff bfd3 	b.w	80078fc <_raise_r>
 8007956:	bf00      	nop
 8007958:	20000018 	.word	0x20000018

0800795c <_kill_r>:
 800795c:	b538      	push	{r3, r4, r5, lr}
 800795e:	4d07      	ldr	r5, [pc, #28]	@ (800797c <_kill_r+0x20>)
 8007960:	2300      	movs	r3, #0
 8007962:	4604      	mov	r4, r0
 8007964:	4608      	mov	r0, r1
 8007966:	4611      	mov	r1, r2
 8007968:	602b      	str	r3, [r5, #0]
 800796a:	f7fa fa1c 	bl	8001da6 <_kill>
 800796e:	1c43      	adds	r3, r0, #1
 8007970:	d102      	bne.n	8007978 <_kill_r+0x1c>
 8007972:	682b      	ldr	r3, [r5, #0]
 8007974:	b103      	cbz	r3, 8007978 <_kill_r+0x1c>
 8007976:	6023      	str	r3, [r4, #0]
 8007978:	bd38      	pop	{r3, r4, r5, pc}
 800797a:	bf00      	nop
 800797c:	20000414 	.word	0x20000414

08007980 <_getpid_r>:
 8007980:	f7fa ba09 	b.w	8001d96 <_getpid>

08007984 <atan2>:
 8007984:	f000 b800 	b.w	8007988 <__ieee754_atan2>

08007988 <__ieee754_atan2>:
 8007988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800798c:	ec57 6b11 	vmov	r6, r7, d1
 8007990:	4273      	negs	r3, r6
 8007992:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8007b10 <__ieee754_atan2+0x188>
 8007996:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800799a:	4333      	orrs	r3, r6
 800799c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80079a0:	4543      	cmp	r3, r8
 80079a2:	ec51 0b10 	vmov	r0, r1, d0
 80079a6:	4635      	mov	r5, r6
 80079a8:	d809      	bhi.n	80079be <__ieee754_atan2+0x36>
 80079aa:	4244      	negs	r4, r0
 80079ac:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80079b0:	4304      	orrs	r4, r0
 80079b2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80079b6:	4544      	cmp	r4, r8
 80079b8:	468e      	mov	lr, r1
 80079ba:	4681      	mov	r9, r0
 80079bc:	d907      	bls.n	80079ce <__ieee754_atan2+0x46>
 80079be:	4632      	mov	r2, r6
 80079c0:	463b      	mov	r3, r7
 80079c2:	f7f8 fc6b 	bl	800029c <__adddf3>
 80079c6:	ec41 0b10 	vmov	d0, r0, r1
 80079ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079ce:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80079d2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80079d6:	4334      	orrs	r4, r6
 80079d8:	d103      	bne.n	80079e2 <__ieee754_atan2+0x5a>
 80079da:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079de:	f000 b89b 	b.w	8007b18 <atan>
 80079e2:	17bc      	asrs	r4, r7, #30
 80079e4:	f004 0402 	and.w	r4, r4, #2
 80079e8:	ea53 0909 	orrs.w	r9, r3, r9
 80079ec:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80079f0:	d107      	bne.n	8007a02 <__ieee754_atan2+0x7a>
 80079f2:	2c02      	cmp	r4, #2
 80079f4:	d05f      	beq.n	8007ab6 <__ieee754_atan2+0x12e>
 80079f6:	2c03      	cmp	r4, #3
 80079f8:	d1e5      	bne.n	80079c6 <__ieee754_atan2+0x3e>
 80079fa:	a141      	add	r1, pc, #260	@ (adr r1, 8007b00 <__ieee754_atan2+0x178>)
 80079fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a00:	e7e1      	b.n	80079c6 <__ieee754_atan2+0x3e>
 8007a02:	4315      	orrs	r5, r2
 8007a04:	d106      	bne.n	8007a14 <__ieee754_atan2+0x8c>
 8007a06:	f1be 0f00 	cmp.w	lr, #0
 8007a0a:	da5f      	bge.n	8007acc <__ieee754_atan2+0x144>
 8007a0c:	a13e      	add	r1, pc, #248	@ (adr r1, 8007b08 <__ieee754_atan2+0x180>)
 8007a0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a12:	e7d8      	b.n	80079c6 <__ieee754_atan2+0x3e>
 8007a14:	4542      	cmp	r2, r8
 8007a16:	d10f      	bne.n	8007a38 <__ieee754_atan2+0xb0>
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8007a1e:	d107      	bne.n	8007a30 <__ieee754_atan2+0xa8>
 8007a20:	2c02      	cmp	r4, #2
 8007a22:	d84c      	bhi.n	8007abe <__ieee754_atan2+0x136>
 8007a24:	4b34      	ldr	r3, [pc, #208]	@ (8007af8 <__ieee754_atan2+0x170>)
 8007a26:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007a2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a2e:	e7ca      	b.n	80079c6 <__ieee754_atan2+0x3e>
 8007a30:	2c02      	cmp	r4, #2
 8007a32:	d848      	bhi.n	8007ac6 <__ieee754_atan2+0x13e>
 8007a34:	4b31      	ldr	r3, [pc, #196]	@ (8007afc <__ieee754_atan2+0x174>)
 8007a36:	e7f6      	b.n	8007a26 <__ieee754_atan2+0x9e>
 8007a38:	4543      	cmp	r3, r8
 8007a3a:	d0e4      	beq.n	8007a06 <__ieee754_atan2+0x7e>
 8007a3c:	1a9b      	subs	r3, r3, r2
 8007a3e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8007a42:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007a46:	da1e      	bge.n	8007a86 <__ieee754_atan2+0xfe>
 8007a48:	2f00      	cmp	r7, #0
 8007a4a:	da01      	bge.n	8007a50 <__ieee754_atan2+0xc8>
 8007a4c:	323c      	adds	r2, #60	@ 0x3c
 8007a4e:	db1e      	blt.n	8007a8e <__ieee754_atan2+0x106>
 8007a50:	4632      	mov	r2, r6
 8007a52:	463b      	mov	r3, r7
 8007a54:	f7f8 ff02 	bl	800085c <__aeabi_ddiv>
 8007a58:	ec41 0b10 	vmov	d0, r0, r1
 8007a5c:	f000 f9f4 	bl	8007e48 <fabs>
 8007a60:	f000 f85a 	bl	8007b18 <atan>
 8007a64:	ec51 0b10 	vmov	r0, r1, d0
 8007a68:	2c01      	cmp	r4, #1
 8007a6a:	d013      	beq.n	8007a94 <__ieee754_atan2+0x10c>
 8007a6c:	2c02      	cmp	r4, #2
 8007a6e:	d015      	beq.n	8007a9c <__ieee754_atan2+0x114>
 8007a70:	2c00      	cmp	r4, #0
 8007a72:	d0a8      	beq.n	80079c6 <__ieee754_atan2+0x3e>
 8007a74:	a318      	add	r3, pc, #96	@ (adr r3, 8007ad8 <__ieee754_atan2+0x150>)
 8007a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7a:	f7f8 fc0d 	bl	8000298 <__aeabi_dsub>
 8007a7e:	a318      	add	r3, pc, #96	@ (adr r3, 8007ae0 <__ieee754_atan2+0x158>)
 8007a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a84:	e014      	b.n	8007ab0 <__ieee754_atan2+0x128>
 8007a86:	a118      	add	r1, pc, #96	@ (adr r1, 8007ae8 <__ieee754_atan2+0x160>)
 8007a88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a8c:	e7ec      	b.n	8007a68 <__ieee754_atan2+0xe0>
 8007a8e:	2000      	movs	r0, #0
 8007a90:	2100      	movs	r1, #0
 8007a92:	e7e9      	b.n	8007a68 <__ieee754_atan2+0xe0>
 8007a94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007a98:	4619      	mov	r1, r3
 8007a9a:	e794      	b.n	80079c6 <__ieee754_atan2+0x3e>
 8007a9c:	a30e      	add	r3, pc, #56	@ (adr r3, 8007ad8 <__ieee754_atan2+0x150>)
 8007a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa2:	f7f8 fbf9 	bl	8000298 <__aeabi_dsub>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	a10d      	add	r1, pc, #52	@ (adr r1, 8007ae0 <__ieee754_atan2+0x158>)
 8007aac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ab0:	f7f8 fbf2 	bl	8000298 <__aeabi_dsub>
 8007ab4:	e787      	b.n	80079c6 <__ieee754_atan2+0x3e>
 8007ab6:	a10a      	add	r1, pc, #40	@ (adr r1, 8007ae0 <__ieee754_atan2+0x158>)
 8007ab8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007abc:	e783      	b.n	80079c6 <__ieee754_atan2+0x3e>
 8007abe:	a10c      	add	r1, pc, #48	@ (adr r1, 8007af0 <__ieee754_atan2+0x168>)
 8007ac0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ac4:	e77f      	b.n	80079c6 <__ieee754_atan2+0x3e>
 8007ac6:	2000      	movs	r0, #0
 8007ac8:	2100      	movs	r1, #0
 8007aca:	e77c      	b.n	80079c6 <__ieee754_atan2+0x3e>
 8007acc:	a106      	add	r1, pc, #24	@ (adr r1, 8007ae8 <__ieee754_atan2+0x160>)
 8007ace:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ad2:	e778      	b.n	80079c6 <__ieee754_atan2+0x3e>
 8007ad4:	f3af 8000 	nop.w
 8007ad8:	33145c07 	.word	0x33145c07
 8007adc:	3ca1a626 	.word	0x3ca1a626
 8007ae0:	54442d18 	.word	0x54442d18
 8007ae4:	400921fb 	.word	0x400921fb
 8007ae8:	54442d18 	.word	0x54442d18
 8007aec:	3ff921fb 	.word	0x3ff921fb
 8007af0:	54442d18 	.word	0x54442d18
 8007af4:	3fe921fb 	.word	0x3fe921fb
 8007af8:	080082a8 	.word	0x080082a8
 8007afc:	08008290 	.word	0x08008290
 8007b00:	54442d18 	.word	0x54442d18
 8007b04:	c00921fb 	.word	0xc00921fb
 8007b08:	54442d18 	.word	0x54442d18
 8007b0c:	bff921fb 	.word	0xbff921fb
 8007b10:	7ff00000 	.word	0x7ff00000
 8007b14:	00000000 	.word	0x00000000

08007b18 <atan>:
 8007b18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b1c:	ec55 4b10 	vmov	r4, r5, d0
 8007b20:	4bbf      	ldr	r3, [pc, #764]	@ (8007e20 <atan+0x308>)
 8007b22:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8007b26:	429e      	cmp	r6, r3
 8007b28:	46ab      	mov	fp, r5
 8007b2a:	d918      	bls.n	8007b5e <atan+0x46>
 8007b2c:	4bbd      	ldr	r3, [pc, #756]	@ (8007e24 <atan+0x30c>)
 8007b2e:	429e      	cmp	r6, r3
 8007b30:	d801      	bhi.n	8007b36 <atan+0x1e>
 8007b32:	d109      	bne.n	8007b48 <atan+0x30>
 8007b34:	b144      	cbz	r4, 8007b48 <atan+0x30>
 8007b36:	4622      	mov	r2, r4
 8007b38:	462b      	mov	r3, r5
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	4629      	mov	r1, r5
 8007b3e:	f7f8 fbad 	bl	800029c <__adddf3>
 8007b42:	4604      	mov	r4, r0
 8007b44:	460d      	mov	r5, r1
 8007b46:	e006      	b.n	8007b56 <atan+0x3e>
 8007b48:	f1bb 0f00 	cmp.w	fp, #0
 8007b4c:	f340 812b 	ble.w	8007da6 <atan+0x28e>
 8007b50:	a597      	add	r5, pc, #604	@ (adr r5, 8007db0 <atan+0x298>)
 8007b52:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007b56:	ec45 4b10 	vmov	d0, r4, r5
 8007b5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b5e:	4bb2      	ldr	r3, [pc, #712]	@ (8007e28 <atan+0x310>)
 8007b60:	429e      	cmp	r6, r3
 8007b62:	d813      	bhi.n	8007b8c <atan+0x74>
 8007b64:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8007b68:	429e      	cmp	r6, r3
 8007b6a:	d80c      	bhi.n	8007b86 <atan+0x6e>
 8007b6c:	a392      	add	r3, pc, #584	@ (adr r3, 8007db8 <atan+0x2a0>)
 8007b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b72:	4620      	mov	r0, r4
 8007b74:	4629      	mov	r1, r5
 8007b76:	f7f8 fb91 	bl	800029c <__adddf3>
 8007b7a:	4bac      	ldr	r3, [pc, #688]	@ (8007e2c <atan+0x314>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f7f8 ffd3 	bl	8000b28 <__aeabi_dcmpgt>
 8007b82:	2800      	cmp	r0, #0
 8007b84:	d1e7      	bne.n	8007b56 <atan+0x3e>
 8007b86:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007b8a:	e029      	b.n	8007be0 <atan+0xc8>
 8007b8c:	f000 f95c 	bl	8007e48 <fabs>
 8007b90:	4ba7      	ldr	r3, [pc, #668]	@ (8007e30 <atan+0x318>)
 8007b92:	429e      	cmp	r6, r3
 8007b94:	ec55 4b10 	vmov	r4, r5, d0
 8007b98:	f200 80bc 	bhi.w	8007d14 <atan+0x1fc>
 8007b9c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8007ba0:	429e      	cmp	r6, r3
 8007ba2:	f200 809e 	bhi.w	8007ce2 <atan+0x1ca>
 8007ba6:	4622      	mov	r2, r4
 8007ba8:	462b      	mov	r3, r5
 8007baa:	4620      	mov	r0, r4
 8007bac:	4629      	mov	r1, r5
 8007bae:	f7f8 fb75 	bl	800029c <__adddf3>
 8007bb2:	4b9e      	ldr	r3, [pc, #632]	@ (8007e2c <atan+0x314>)
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f7f8 fb6f 	bl	8000298 <__aeabi_dsub>
 8007bba:	2200      	movs	r2, #0
 8007bbc:	4606      	mov	r6, r0
 8007bbe:	460f      	mov	r7, r1
 8007bc0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	4629      	mov	r1, r5
 8007bc8:	f7f8 fb68 	bl	800029c <__adddf3>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	460b      	mov	r3, r1
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	4639      	mov	r1, r7
 8007bd4:	f7f8 fe42 	bl	800085c <__aeabi_ddiv>
 8007bd8:	f04f 0a00 	mov.w	sl, #0
 8007bdc:	4604      	mov	r4, r0
 8007bde:	460d      	mov	r5, r1
 8007be0:	4622      	mov	r2, r4
 8007be2:	462b      	mov	r3, r5
 8007be4:	4620      	mov	r0, r4
 8007be6:	4629      	mov	r1, r5
 8007be8:	f7f8 fd0e 	bl	8000608 <__aeabi_dmul>
 8007bec:	4602      	mov	r2, r0
 8007bee:	460b      	mov	r3, r1
 8007bf0:	4680      	mov	r8, r0
 8007bf2:	4689      	mov	r9, r1
 8007bf4:	f7f8 fd08 	bl	8000608 <__aeabi_dmul>
 8007bf8:	a371      	add	r3, pc, #452	@ (adr r3, 8007dc0 <atan+0x2a8>)
 8007bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfe:	4606      	mov	r6, r0
 8007c00:	460f      	mov	r7, r1
 8007c02:	f7f8 fd01 	bl	8000608 <__aeabi_dmul>
 8007c06:	a370      	add	r3, pc, #448	@ (adr r3, 8007dc8 <atan+0x2b0>)
 8007c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0c:	f7f8 fb46 	bl	800029c <__adddf3>
 8007c10:	4632      	mov	r2, r6
 8007c12:	463b      	mov	r3, r7
 8007c14:	f7f8 fcf8 	bl	8000608 <__aeabi_dmul>
 8007c18:	a36d      	add	r3, pc, #436	@ (adr r3, 8007dd0 <atan+0x2b8>)
 8007c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1e:	f7f8 fb3d 	bl	800029c <__adddf3>
 8007c22:	4632      	mov	r2, r6
 8007c24:	463b      	mov	r3, r7
 8007c26:	f7f8 fcef 	bl	8000608 <__aeabi_dmul>
 8007c2a:	a36b      	add	r3, pc, #428	@ (adr r3, 8007dd8 <atan+0x2c0>)
 8007c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c30:	f7f8 fb34 	bl	800029c <__adddf3>
 8007c34:	4632      	mov	r2, r6
 8007c36:	463b      	mov	r3, r7
 8007c38:	f7f8 fce6 	bl	8000608 <__aeabi_dmul>
 8007c3c:	a368      	add	r3, pc, #416	@ (adr r3, 8007de0 <atan+0x2c8>)
 8007c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c42:	f7f8 fb2b 	bl	800029c <__adddf3>
 8007c46:	4632      	mov	r2, r6
 8007c48:	463b      	mov	r3, r7
 8007c4a:	f7f8 fcdd 	bl	8000608 <__aeabi_dmul>
 8007c4e:	a366      	add	r3, pc, #408	@ (adr r3, 8007de8 <atan+0x2d0>)
 8007c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c54:	f7f8 fb22 	bl	800029c <__adddf3>
 8007c58:	4642      	mov	r2, r8
 8007c5a:	464b      	mov	r3, r9
 8007c5c:	f7f8 fcd4 	bl	8000608 <__aeabi_dmul>
 8007c60:	a363      	add	r3, pc, #396	@ (adr r3, 8007df0 <atan+0x2d8>)
 8007c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c66:	4680      	mov	r8, r0
 8007c68:	4689      	mov	r9, r1
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	4639      	mov	r1, r7
 8007c6e:	f7f8 fccb 	bl	8000608 <__aeabi_dmul>
 8007c72:	a361      	add	r3, pc, #388	@ (adr r3, 8007df8 <atan+0x2e0>)
 8007c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c78:	f7f8 fb0e 	bl	8000298 <__aeabi_dsub>
 8007c7c:	4632      	mov	r2, r6
 8007c7e:	463b      	mov	r3, r7
 8007c80:	f7f8 fcc2 	bl	8000608 <__aeabi_dmul>
 8007c84:	a35e      	add	r3, pc, #376	@ (adr r3, 8007e00 <atan+0x2e8>)
 8007c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8a:	f7f8 fb05 	bl	8000298 <__aeabi_dsub>
 8007c8e:	4632      	mov	r2, r6
 8007c90:	463b      	mov	r3, r7
 8007c92:	f7f8 fcb9 	bl	8000608 <__aeabi_dmul>
 8007c96:	a35c      	add	r3, pc, #368	@ (adr r3, 8007e08 <atan+0x2f0>)
 8007c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9c:	f7f8 fafc 	bl	8000298 <__aeabi_dsub>
 8007ca0:	4632      	mov	r2, r6
 8007ca2:	463b      	mov	r3, r7
 8007ca4:	f7f8 fcb0 	bl	8000608 <__aeabi_dmul>
 8007ca8:	a359      	add	r3, pc, #356	@ (adr r3, 8007e10 <atan+0x2f8>)
 8007caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cae:	f7f8 faf3 	bl	8000298 <__aeabi_dsub>
 8007cb2:	4632      	mov	r2, r6
 8007cb4:	463b      	mov	r3, r7
 8007cb6:	f7f8 fca7 	bl	8000608 <__aeabi_dmul>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	4640      	mov	r0, r8
 8007cc0:	4649      	mov	r1, r9
 8007cc2:	f7f8 faeb 	bl	800029c <__adddf3>
 8007cc6:	4622      	mov	r2, r4
 8007cc8:	462b      	mov	r3, r5
 8007cca:	f7f8 fc9d 	bl	8000608 <__aeabi_dmul>
 8007cce:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	d148      	bne.n	8007d6a <atan+0x252>
 8007cd8:	4620      	mov	r0, r4
 8007cda:	4629      	mov	r1, r5
 8007cdc:	f7f8 fadc 	bl	8000298 <__aeabi_dsub>
 8007ce0:	e72f      	b.n	8007b42 <atan+0x2a>
 8007ce2:	4b52      	ldr	r3, [pc, #328]	@ (8007e2c <atan+0x314>)
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	4629      	mov	r1, r5
 8007cea:	f7f8 fad5 	bl	8000298 <__aeabi_dsub>
 8007cee:	4b4f      	ldr	r3, [pc, #316]	@ (8007e2c <atan+0x314>)
 8007cf0:	4606      	mov	r6, r0
 8007cf2:	460f      	mov	r7, r1
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	f7f8 facf 	bl	800029c <__adddf3>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	460b      	mov	r3, r1
 8007d02:	4630      	mov	r0, r6
 8007d04:	4639      	mov	r1, r7
 8007d06:	f7f8 fda9 	bl	800085c <__aeabi_ddiv>
 8007d0a:	f04f 0a01 	mov.w	sl, #1
 8007d0e:	4604      	mov	r4, r0
 8007d10:	460d      	mov	r5, r1
 8007d12:	e765      	b.n	8007be0 <atan+0xc8>
 8007d14:	4b47      	ldr	r3, [pc, #284]	@ (8007e34 <atan+0x31c>)
 8007d16:	429e      	cmp	r6, r3
 8007d18:	d21c      	bcs.n	8007d54 <atan+0x23c>
 8007d1a:	4b47      	ldr	r3, [pc, #284]	@ (8007e38 <atan+0x320>)
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	4620      	mov	r0, r4
 8007d20:	4629      	mov	r1, r5
 8007d22:	f7f8 fab9 	bl	8000298 <__aeabi_dsub>
 8007d26:	4b44      	ldr	r3, [pc, #272]	@ (8007e38 <atan+0x320>)
 8007d28:	4606      	mov	r6, r0
 8007d2a:	460f      	mov	r7, r1
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	4620      	mov	r0, r4
 8007d30:	4629      	mov	r1, r5
 8007d32:	f7f8 fc69 	bl	8000608 <__aeabi_dmul>
 8007d36:	4b3d      	ldr	r3, [pc, #244]	@ (8007e2c <atan+0x314>)
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f7f8 faaf 	bl	800029c <__adddf3>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	4630      	mov	r0, r6
 8007d44:	4639      	mov	r1, r7
 8007d46:	f7f8 fd89 	bl	800085c <__aeabi_ddiv>
 8007d4a:	f04f 0a02 	mov.w	sl, #2
 8007d4e:	4604      	mov	r4, r0
 8007d50:	460d      	mov	r5, r1
 8007d52:	e745      	b.n	8007be0 <atan+0xc8>
 8007d54:	4622      	mov	r2, r4
 8007d56:	462b      	mov	r3, r5
 8007d58:	4938      	ldr	r1, [pc, #224]	@ (8007e3c <atan+0x324>)
 8007d5a:	2000      	movs	r0, #0
 8007d5c:	f7f8 fd7e 	bl	800085c <__aeabi_ddiv>
 8007d60:	f04f 0a03 	mov.w	sl, #3
 8007d64:	4604      	mov	r4, r0
 8007d66:	460d      	mov	r5, r1
 8007d68:	e73a      	b.n	8007be0 <atan+0xc8>
 8007d6a:	4b35      	ldr	r3, [pc, #212]	@ (8007e40 <atan+0x328>)
 8007d6c:	4e35      	ldr	r6, [pc, #212]	@ (8007e44 <atan+0x32c>)
 8007d6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d76:	f7f8 fa8f 	bl	8000298 <__aeabi_dsub>
 8007d7a:	4622      	mov	r2, r4
 8007d7c:	462b      	mov	r3, r5
 8007d7e:	f7f8 fa8b 	bl	8000298 <__aeabi_dsub>
 8007d82:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007d86:	4602      	mov	r2, r0
 8007d88:	460b      	mov	r3, r1
 8007d8a:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007d8e:	f7f8 fa83 	bl	8000298 <__aeabi_dsub>
 8007d92:	f1bb 0f00 	cmp.w	fp, #0
 8007d96:	4604      	mov	r4, r0
 8007d98:	460d      	mov	r5, r1
 8007d9a:	f6bf aedc 	bge.w	8007b56 <atan+0x3e>
 8007d9e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007da2:	461d      	mov	r5, r3
 8007da4:	e6d7      	b.n	8007b56 <atan+0x3e>
 8007da6:	a51c      	add	r5, pc, #112	@ (adr r5, 8007e18 <atan+0x300>)
 8007da8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007dac:	e6d3      	b.n	8007b56 <atan+0x3e>
 8007dae:	bf00      	nop
 8007db0:	54442d18 	.word	0x54442d18
 8007db4:	3ff921fb 	.word	0x3ff921fb
 8007db8:	8800759c 	.word	0x8800759c
 8007dbc:	7e37e43c 	.word	0x7e37e43c
 8007dc0:	e322da11 	.word	0xe322da11
 8007dc4:	3f90ad3a 	.word	0x3f90ad3a
 8007dc8:	24760deb 	.word	0x24760deb
 8007dcc:	3fa97b4b 	.word	0x3fa97b4b
 8007dd0:	a0d03d51 	.word	0xa0d03d51
 8007dd4:	3fb10d66 	.word	0x3fb10d66
 8007dd8:	c54c206e 	.word	0xc54c206e
 8007ddc:	3fb745cd 	.word	0x3fb745cd
 8007de0:	920083ff 	.word	0x920083ff
 8007de4:	3fc24924 	.word	0x3fc24924
 8007de8:	5555550d 	.word	0x5555550d
 8007dec:	3fd55555 	.word	0x3fd55555
 8007df0:	2c6a6c2f 	.word	0x2c6a6c2f
 8007df4:	bfa2b444 	.word	0xbfa2b444
 8007df8:	52defd9a 	.word	0x52defd9a
 8007dfc:	3fadde2d 	.word	0x3fadde2d
 8007e00:	af749a6d 	.word	0xaf749a6d
 8007e04:	3fb3b0f2 	.word	0x3fb3b0f2
 8007e08:	fe231671 	.word	0xfe231671
 8007e0c:	3fbc71c6 	.word	0x3fbc71c6
 8007e10:	9998ebc4 	.word	0x9998ebc4
 8007e14:	3fc99999 	.word	0x3fc99999
 8007e18:	54442d18 	.word	0x54442d18
 8007e1c:	bff921fb 	.word	0xbff921fb
 8007e20:	440fffff 	.word	0x440fffff
 8007e24:	7ff00000 	.word	0x7ff00000
 8007e28:	3fdbffff 	.word	0x3fdbffff
 8007e2c:	3ff00000 	.word	0x3ff00000
 8007e30:	3ff2ffff 	.word	0x3ff2ffff
 8007e34:	40038000 	.word	0x40038000
 8007e38:	3ff80000 	.word	0x3ff80000
 8007e3c:	bff00000 	.word	0xbff00000
 8007e40:	080082c0 	.word	0x080082c0
 8007e44:	080082e0 	.word	0x080082e0

08007e48 <fabs>:
 8007e48:	ec51 0b10 	vmov	r0, r1, d0
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007e52:	ec43 2b10 	vmov	d0, r2, r3
 8007e56:	4770      	bx	lr

08007e58 <_init>:
 8007e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5a:	bf00      	nop
 8007e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e5e:	bc08      	pop	{r3}
 8007e60:	469e      	mov	lr, r3
 8007e62:	4770      	bx	lr

08007e64 <_fini>:
 8007e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e66:	bf00      	nop
 8007e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e6a:	bc08      	pop	{r3}
 8007e6c:	469e      	mov	lr, r3
 8007e6e:	4770      	bx	lr
